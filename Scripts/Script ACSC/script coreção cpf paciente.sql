--<DS_SCRIPT>
-- DESCRIÇÃO..: FATURSUS-1254  alteracao do tipo do campo CPF
-- RESPONSAVEL: Alexandre Neri
-- DATA.......: 19/12/2018
-- VERSÃO PACOTE: 2018.003.06.FTR
-- APLICAÇÃO..: FFIS
--</DS_SCRIPT>
--<USUARIO=DBAMV>


CREATE OR REPLACE
PACKAGE DBAMV.pkg_ffis_m_lacto_aih_p321 AS
-- Exceptions
FORM_TRIGGER_FAILURE EXCEPTION;
PRAGMA EXCEPTION_INIT(FORM_TRIGGER_FAILURE, -40000);
-- Declarations of extracted code units
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>P_FACHADA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_FACHADA(in_params in Clob, out_params out Clob);
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PK_ITREG_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_PK_ITREG_FAT (in_params in Clob, out_params out Clob) RETURN number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_TIPO_PAGTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_TIPO_PAGTO (in_params in Clob, out_params out Clob) RETURN varchar2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_PERM_MAIOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_PERM_MAIOR (in_params in Clob, out_params out Clob) RETURN number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PRIMEIRA_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PRIMEIRA_CONTA (in_params in Clob, out_params out Clob) RETURN number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_CALC_DIAS_PROCEDIMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_CALC_DIAS_PROCEDIMENTO (in_params in Clob, out_params out Clob) RETURN number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_ATEND_QTD_FECHADAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_ATEND_QTD_FECHADAS (in_params in Clob, out_params out Clob) RETURN NUMBER;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_PEND_SADT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_PEND_SADT (in_params in Clob, out_params out Clob) RETURN boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PROCURA_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_PROCURA_PARTO (in_params in Clob, out_params out Clob) RETURN boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_REMESSA_OBRIGATORIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (in_params in Clob, out_params out Clob) RETURN boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>valida_periodo_conta</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VALIDA_PERIODO_CONTA (in_params in Clob, out_params out Clob) RETURN boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_CNS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VALIDA_CNS (in_params in Clob, out_params out Clob) RETURN Boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_CNS_PROV</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VALIDA_CNS_PROV (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VERIFICA_QTD_ABERTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VERIFICA_QTD_ABERTA (in_params in Clob, out_params out Clob) RETURN NUMBER;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_GRU_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_GRU_FAT (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_PRC_DIARIA_ACOMPANHANTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>OBRIGA_CBO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_OBRIGA_CBO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_INTERCORRENCIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_INTERCORRENCIA (in_params in Clob, out_params out Clob) RETURN Boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_LANCA_APURAR_VALOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_LANCA_APURAR_VALOR (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_DIAS_DIFERENCA_UNIFICACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_RETORNA_DETAL_GESTOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_RETORNA_DETAL_GESTOR (in_params in Clob, out_params out Clob) RETURN Varchar2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_UTI (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_CLINICO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_CLINICO (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_INTERNACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_INTERNACAO (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_DEFINE_ATI_MED_ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_ATI_MED_ITEM (in_params in Clob, out_params out Clob) RETURN Varchar2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_ITEM_CENTRO_CIRURGICO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_ITEM_CENTRO_CIRURGICO (in_params in Clob, out_params out Clob) RETURN Boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_CONTA_CIR_MULTIPLA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_CONTA_CIR_MULTIPLA (in_params in Clob, out_params out Clob) RETURN Boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PROC_PACOTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PROC_PACOTE (in_params in Clob, out_params out Clob) RETURN Varchar2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_UTI (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_OPM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_OPM (in_params in Clob, out_params out Clob) RETURN Boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_ABRE_EQUIPE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_ABRE_EQUIPE (in_params in Clob, out_params out Clob) RETURN Boolean;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_PROC_CIRURGICO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_PROC_CIRURGICO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_DEFINE_VINCULO_CREDITO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_VINCULO_CREDITO (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_LAQUEADURA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_LAQUEADURA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_TOTAL_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_TOTAL_UTI (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_TP_COMPLEXIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_TP_COMPLEXIDADE (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_RET_INCREMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_RET_INCREMENTO (in_params in Clob, out_params out Clob) RETURN NUMBER;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_RET_TIPO_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_RET_TIPO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_ULTIMA_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_ULTIMA_CONTA (in_params in Clob, out_params out Clob) RETURN number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_IDADE_PACIENTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_IDADE_PACIENTE (in_params in Clob, out_params out Clob) RETURN NUMBER;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_PARTO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PROC_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PROC_REALIZADO (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PROC_DIARIA_IDOSO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PROC_DIARIA_IDOSO (in_params in Clob, out_params out Clob) RETURN Varchar2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_SETOR_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_SETOR_REALIZADO (in_params in Clob, out_params out Clob) RETURN Number;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PRESTADOR_AIH</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PRESTADOR_AIH (in_params in Clob, out_params out Clob) RETURN NUMBER;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_AIH_5</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_AIH_5 (in_params in Clob, out_params out Clob) RETURN NUMBER;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DT_INTERNACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DT_INTERNACAO (in_params in Clob, out_params out Clob) RETURN DATE;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_FECHADA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_FECHADA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_CBO_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_CBO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN Varchar2;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_PAGO_POR_DIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_PAGO_POR_DIA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
   FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_AIH_CONTINUACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_AIH_CONTINUACAO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_COMPET_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_COMPET_CONTA (in_params in Clob, out_params out Clob) RETURN DATE;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_TEM_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_TEM_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_ATUALIZA_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_ATUALIZA_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_NR_AIH</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_NR_AIH (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>HABILITA_DADOS_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_HABILITA_DADOS_PARTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_DIA_ACOMPANHANTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_PONTO_PROFISSIONAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Define_Prestador_Auto</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_PRESTADOR_AUTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CONTA_CLOSED</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CONTA_CLOSED (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DADOS_PARTO_DEFAULT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DADOS_PARTO_DEFAULT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Check_contas_remessa</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHECK_CONTAS_REMESSA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_PRESTADOR_AUDITOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>STATUS_LOCK</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_STATUS_LOCK (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_ATIVIDADE_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CRIA_NOVA_REG_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CRIA_NOVA_REG_FAT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CPF_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CPF_PRESTADOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>HABILITA_DT_AUT_HOMONIMO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_DT_AUT_HOMONIMO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_GLOSA_TOTAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_GLOSA_TOTAL (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>prc_habilita_desabilita_guia</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_HABILITA_DESABILITA_GUIA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Insere_ITREG_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_INSERE_ITREG_FAT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>MONTAR_EQUIPE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_MONTAR_EQUIPE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>chk_lcto_uti</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHK_LCTO_UTI (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_MODALIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_MODALIDADE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
--  PROCEDURE P_VALIDA_ESPEC_SUS_REG_FAT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PROCEDIMENTO_HOSPITAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CHK_ATI_MED_06</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHK_ATI_MED_06 (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_PACOTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_PACOTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_CORRIGE_LCTO_CBO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_CORRIGE_LCTO_CBO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Prc_Lanca_CBO_Prestador</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_LANCA_CBO_PRESTADOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CHK_DIAS_PERIODO_VS_LACTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_NR_GUIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_NR_GUIA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_REG_CIVIL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_REG_CIVIL (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_DADOS_LAQVASEC</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_DADOS_LAQVASEC (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_GRUPO_PROC_PADRAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_LANCAMENTO_PAI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_LANCAMENTO_PAI (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_DIARIA_ACOMPANHANTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_CEP_PACIENTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_CEP_PACIENTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PREST_ATENDIMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PREST_ATENDIMENTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_FORNECEDOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_FORNECEDOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CID_SEXO_PACIENTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_MODALIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_MODALIDADE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_ESPEC_SUS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CHECA_CPF_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHECA_CPF_PRESTADOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PREST_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PREST_CONTA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_INSERE_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_INSERE_REALIZADO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CONTA_ANTERIOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CONTA_ANTERIOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_DATA_INICIO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_DATA_INICIO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_EXCLUI_DIARIAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_EXCLUI_DIARIAS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_ESPEC_SUS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_GUIAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_GUIAS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_SOL_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_SOL_REALIZADO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_CID_PADRAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_CID_PADRAO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_REMESSA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_REMESSA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_CID_SECUNDARIO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_CID_SECUNDARIO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_EXIGENCIA_CID_PRINCIPAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_EQP_MEDICA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_EQP_MEDICA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_ABERTURA_TELAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_ABERTURA_TELAS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_PRESTADORES_ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_PRESTADORES_ITEM (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_INSERE_DADOS_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_INSERE_DADOS_PARTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_COD_REDUZIDO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_COD_REDUZIDO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_QUANTIDADE_OPM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_QUANTIDADE_OPM (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_SETOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_SETOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PRESTADOR_CIRURGIAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_ATI_MED_REPETIDO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_ATI_MED_REPETIDO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PRESTADOR_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PRESTADOR_SUS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PRESTADOR_CBO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PRESTADOR_CBO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_CBO_AUXILIARES</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_CBO_AUXILIARES (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_TIPO_PAGAMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_TIPO_PAGAMENTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_REMESSA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_REMESSA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CNPJ</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CNPJ (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>P_COMMIT_FORM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_P_COMMIT_FORM (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_REGISTRO_CIVIL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_REGISTRO_CIVIL (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_CIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_CIDADE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_CIDADE2</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_CIDADE2 (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_CORRIGE_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_CORRIGE_UTI (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_ATUALIZA_ITEM_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_ATUALIZA_ITEM_UTI (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_LEITO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_LEITO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_MOT_ALT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_MOT_ALT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_SN_INFECCAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_SN_INFECCAO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_LANCA_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_LANCA_ESPEC_SUS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_EMPRESA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_EMPRESA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CID_OBITO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CID_OBITO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Montar_Diaria_Acompanhante</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_ATUALIZA_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_ATUALIZA_DA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_DELETE_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_DELETE_DA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.DSP_DS_CIDADANIA.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.DSP_DS_GRAU_INS.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.NR_CEP.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_NR_CEP (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.DSP_NR_CPF.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_DSP_NR_CPF (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.NR_CNS.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_P_NR_CNS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.POST-QUERY</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PQ_PACIENTE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.DT_ATENDIMENTO.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_A_DT_ATENDIMENTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.CD_PRESTADOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_A_CD_PRESTADOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.CD_LEITO.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_A_CD_LEITO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.PRE-INSERT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PI_ATENDIME (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.ON-CHECK-DELETE-MASTER</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_OCDM_ATENDIME (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_GUIA.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_GUIA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_SEQAIH5.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_AIH_ANTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_AIH_POSTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.CD_PRESTADOR_AUDITOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_LAUDO_ACH.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.PRE-INSERT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PI_REG_FAT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.PRE-UPDATE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PU_REG_FAT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.QT_LANCAMENTO.MUDOU_SETOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_M_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.QT_LANCAMENTO.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.CD_SETOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_IF_CD_SETOR (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.CD_SETOR_PRODUZIU.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.PRE-DELETE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PD_ITREG_FAT (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITCOB_PRE.VL_PRECO_UNITARIO.KEY-NEXT-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>RESPONSA.DS_NACIONALIDADE.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>RESPONSA.WHEN-NEW-BLOCK-INSTANCE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_WNBI_RESPONSA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DIARIA_UTI_SUS.DT_COMPETENCIA.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DIARIA_UTI_SUS.POST-QUERY</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PQ_DIARIA_UTI_SUS (in_params in Clob, out_params out Clob);
    /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRE-FORM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_F_PF (in_params in Clob, out_params out Clob);
END Pkg_ffis_M_LACTO_AIH_P321;
/

GRANT EXECUTE ON DBAMV.Pkg_ffis_M_LACTO_AIH_P321 TO mv2000
/

CREATE OR REPLACE
PACKAGE BODY DBAMV.pkg_ffis_m_lacto_aih_p321 AS
-- Struct definitions for passing state from appliction level to the code units
-- defined in this package
  -- Record to be used as parameter of procedures and functions that access application block ITREG_FAT's items
  TYPE ITREG_FATRec IS RECORD (
    CD_PROCEDIMENTO  VARCHAR2(2000),
    CD_REG_FAT  NUMBER,
    CD_LANCAMENTO  NUMBER,
    DS_SETOR_PRODUZIU  VARCHAR2(2000),
    TP_MVTO  VARCHAR2(2000),
    QT_LANCAMENTO  NUMBER,
    CD_SETOR  NUMBER,
    DSP_NM_SETOR  VARCHAR2(2000),
    CD_SETOR_PRODUZIU  NUMBER,
    CD_PRESTADOR  NUMBER,
    CD_CBO_PRESTADOR  VARCHAR2(2000),
    CD_TIPO_VINCULO  NUMBER,
    SN_PROCED_REALIZADO  VARCHAR2(2000),
    DS_PROCEDIMENTO  VARCHAR2(2000)
  );
  -- Record to be used as parameter of procedures and functions that access application block DIARIA_UTI_SUS's items
  TYPE DIARIA_UTI_SUSRec IS RECORD (
    CD_REG_FAT  NUMBER,
    CD_LANCAMENTO  NUMBER,
    DT_COMPETENCIA  DATE,
    DSP_QT_TOTAL_UTI  NUMBER,
    DSP_CD_PROCEDIMENTO  VARCHAR2(2000),
    DSP_DS_PROCEDIMENTO  VARCHAR2(2000)
  );
  -- Record to be used as parameter of procedures and functions that access application block ITCOB_PRE's items
  TYPE ITCOB_PRERec IS RECORD (
    NR_CNPJ_FABRICANTE  NUMBER,
    VL_PRECO_UNITARIO  NUMBER,
    VL_PRECO_TOTAL  NUMBER,
    SN_COBRANCA_FORNEC  VARCHAR2(2000),
    NR_CGC_CPF  NUMBER,
    SN_CESSAO_CREDITO  VARCHAR2(2000),
    SN_FORNECE_OPM  VARCHAR2(2000)
  );
  -- Record to be used as parameter of procedures and functions that access application block REG_FAT's items
  TYPE REG_FATRec IS RECORD (
    NR_GUIA  VARCHAR2(2000),
    CD_ATENDIMENTO  NUMBER,
    DT_ATENDIMENTO  DATE,
    DT_ALTA  DATE,
    NR_IDENTIFICACAO  VARCHAR2(2000),
    NR_SEQAIH5  NUMBER,
    CD_REMESSA  NUMBER,
    DSP_REMESSA_SN_FECHADA  VARCHAR2(2000),
    DSP_REM_SN_VALIDA_DATA_ALTA  VARCHAR2(2000),
    DT_INICIO  DATE,
    DT_FINAL  DATE,
    CD_PROCEDIMENTO_SOLICITADO  VARCHAR2(2000),
    CD_PRO_FAT_SOLICITADO  VARCHAR2(2000),
    CD_ESPEC_SUS  VARCHAR2(2000),
    CD_MOT_ALT  NUMBER,
    DT_EMISSAO_LAUDO  DATE,
    DT_AUT_HOMONIMO  DATE,
    NR_AIH_ANTERIOR  VARCHAR2(2000),
    NR_AIH_POSTERIOR  VARCHAR2(2000),
    SN_FECHADA  VARCHAR2(2000),
    CD_SUS_REALIZADO  VARCHAR2(2000),
    CD_PROCEDIMENTO_REALIZADO  VARCHAR2(2000),
    CD_PROCEDIMENTO_REALIZADO_OLD  VARCHAR2(2000),
    DS_PROCEDIMENTO_REALIZADO VARCHAR2(2000),
    CD_PRESTADOR_RESPONSAVEL  NUMBER,
    NM_PRESTADOR_RESPONSAVEL  VARCHAR2(2000),
    CD_PRESTADOR_AUDITOR  NUMBER,
    NM_PRESTADOR_AUDITOR  VARCHAR2(2000),
    CD_TIP_ACOM  NUMBER,
    CD_PRO_FAT_REALIZADO  VARCHAR2(2000),
    CD_CID_PRINCIPAL  VARCHAR2(2000),
    DSP_DS_CID_PRINCIPAL  VARCHAR2(2000),
    TP_MODALIDADE_ATENDIMENTO  VARCHAR2(2000),
    CD_REGRA  NUMBER,
    NM_USUARIO  VARCHAR2(2000),
    NR_DIARIA_ACOMPANHANTE  NUMBER,
    DSP_TIPO_COMPLEXIDADE  VARCHAR2(2000),
    CD_GESTOR_AUTORIZOU  VARCHAR2(2000),
    NR_CPF_GESTOR  NUMBER,
    NR_PRE_NATAL  VARCHAR2(2000),
    DSP_DT_ABERTURA  DATE,
    CD_REG_FAT  NUMBER,
    DSP_DS_REMESSA  VARCHAR2(2000),
    DSP_DT_COMPETENCIA  DATE,
    NR_LAUDO_ACH  NUMBER,
    CD_CONVENIO NUMBER,
    CD_CON_PLA NUMBER
  );
  -- Record to be used as parameter of procedures and functions that access application block ATENDIME's items
  TYPE ATENDIMERec IS RECORD (
    CD_ATENDIMENTO  NUMBER,
    CD_PACIENTE  NUMBER,
    CD_MULTI_EMPRESA  NUMBER,
    DT_ATENDIMENTO  DATE,
    TP_MOT_ALTA  VARCHAR2(2000),
    CD_PRESTADOR  NUMBER,
    SN_INFECCAO  VARCHAR2(2000),
    CD_LEITO  NUMBER,
    DSP_DS_LEITO  VARCHAR2(2000),
    CD_TIP_ACOM  NUMBER,
    DSP_DS_TIP_ACOM  VARCHAR2(2000),
    CD_UNID_INT  NUMBER,
    DSP_DS_ENFERMARIA  VARCHAR2(2000),
    CD_CID  VARCHAR2(2000),
    CD_ORI_ATE  NUMBER,
    CD_CONVENIO  NUMBER,
    CD_CON_PLA  NUMBER,
    NM_USUARIO  VARCHAR2(2000),
    CD_ALTA_SUS  NUMBER
  );
  -- Record to be used as parameter of procedures and functions that access application block PACIENTE's items
  TYPE PACIENTERec IS RECORD (
    CD_PACIENTE  NUMBER,
    TP_SEXO  VARCHAR2(2000),
    DSP_DS_CIDADANIA  VARCHAR2(2000),
    CD_MULTI_EMPRESA  NUMBER,
    DSP_DS_GRAU_INS  VARCHAR2(2000),
    NR_CEP  VARCHAR2(2000),
    DSP_NM_CIDADE  VARCHAR2(2000),
    DSP_CD_UF  VARCHAR2(2000),
    DSP_NR_IDENTIDADE  VARCHAR2(2000),
    DSP_NR_CPF  VARCHAR2(2000),
    NR_CPF  VARCHAR2(2000),
    NR_CNS  VARCHAR2(2000),
    NR_IDENTIDADE  VARCHAR2(2000),
    CD_CIDADANIA  NUMBER,
    CD_GRAU_INS  NUMBER,
    CD_CIDADE  NUMBER
  );
  -- Record to be used as parameter of procedures and functions that access application block CG$CTRL's items
  TYPE CG$CTRLRec IS RECORD (
    REFRESH_ITREG_FAT  VARCHAR2(2000),
    REFRESH_ITLAN_MED  VARCHAR2(2000),
    DIGITA_EQUIPE  VARCHAR2(2000),
    DIGITA_NOTA  VARCHAR2(2000),
    DIGITA_UTI  VARCHAR2(2000),
    DIGITA_REG_CIVIL  VARCHAR2(2000),
    DIGITA_LACVAS  VARCHAR2(2000),
    DIGITA_PRE_NATAL  VARCHAR2(2000),
    GO_ACOMPANHANTE  VARCHAR2(2000),
    CD_SETOR_REA_ANT  NUMBER,
    CD_PRESTADOR_REA_ANT  NUMBER,
    STATUS_LOCK  VARCHAR2(2000)
  );
  -- Record to be used as parameter of procedures and functions that access application block IT_PARTO's items
  TYPE IT_PARTORec IS RECORD (
    QT_RN_VIVO  NUMBER,
    QT_RN_MORTO  NUMBER,
    QT_RN_ALTA  NUMBER,
    QT_RN_TRANSFERIDO  NUMBER,
    QT_RN_OBITO  NUMBER
  );
  -- Record to be used as parameter of procedures and functions that access application block RESPONSA's items
  TYPE RESPONSARec IS RECORD (
    NM_RESPONSAVEL  VARCHAR2(2000),
    DS_ENDERECO  VARCHAR2(2000),
    DS_COMPLEMENTO  VARCHAR2(2000),
    NR_ENDERECO  NUMBER,
    NM_BAIRRO  VARCHAR2(2000),
    DSP_NM_CIDADE  VARCHAR2(2000),
    DSP_CD_UF  VARCHAR2(2000),
    DS_NACIONALIDADE  VARCHAR2(2000),
    CD_CIDADE  NUMBER
  );
  -- Record to be used as parameter of procedures and functions that access application level global variables
  TYPE GlobalsRec IS RECORD (
    RECALCULOU  VARCHAR2(256),
    VCHANGE  VARCHAR2(256),
    VCTAFECHADA  VARCHAR2(256),
    CPFOLD  VARCHAR2(256),
    RGOLD  VARCHAR2(256),
    OBG_MEDAUT  VARCHAR2(256),
    VOBRIGAGESTOR  VARCHAR2(256),
    CD_REGRA  VARCHAR2(256),
    VCSETOR  VARCHAR2(256)
  );
  -- Record to be used as parameter of procedures and functions that access application level Form parameters
  TYPE FormParamsRec IS RECORD (
    SN_REMESSA_OBRIGATORIA  VARCHAR(512),
--    P_HOSPITAL  VARCHAR(512),
    P_EMPRESA  VARCHAR(512),
    SN_IMPORTA_ATEND  VARCHAR(512),
    SN_GERA_DISQUETE_PERIODO  VARCHAR(512),
    SN_GERA_ACH  VARCHAR(512),
    CD_PRESTADOR_AIH  VARCHAR(512),
    CD_CGC  VARCHAR(512),
    CD_PRESTADOR_DIR_CLINICO  VARCHAR(512),
    DS_MULTI_EMPRESA  VARCHAR(512),
    NR_AIH_INICIAL_CNRAC  VARCHAR(512),
    NR_AIH_FINAL_CNRAC  VARCHAR(512),
    NR_INICIAL_AIH_ESPECIFICA  VARCHAR(512),
    NR_FINAL_AIH_ESPECIFICA  VARCHAR(512)
  );
-- Extracted code units
  FUNCTION F_PK_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdRegFat in number) RETURN number;
  FUNCTION F_DEFINE_TIPO_PAGTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number) RETURN varchar2;
  FUNCTION F_GET_DIAS_PERM_MAIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number;
  FUNCTION F_GET_PRIMEIRA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number;
  FUNCTION F_CALC_DIAS_PROCEDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number;
  FUNCTION F_GET_ATEND_QTD_FECHADAS (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                                nAtend   in number) RETURN NUMBER;
  FUNCTION F_DEFINE_PEND_SADT (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend in number) RETURN boolean;
  FUNCTION F_PROCURA_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat in number) RETURN boolean;
  FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) RETURN boolean;
  FUNCTION F_VALIDA_PERIODO_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, p_cd_reg_fat reg_fat.cd_reg_fat%type, p_dt_inicio date, p_dt_final date) RETURN boolean;
  FUNCTION F_VALIDA_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Number) RETURN Boolean;
  FUNCTION F_VALIDA_CNS_PROV (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Varchar2) RETURN BOOLEAN;
  FUNCTION F_VERIFICA_QTD_ABERTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                              nAtend   in number) RETURN NUMBER;
  FUNCTION F_DEFINE_GRU_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompetencia IN Date) RETURN Number; --OP 35293
  FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2;
  FUNCTION F_OBRIGA_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento Varchar2) RETURN BOOLEAN;
  FUNCTION F_INTERCORRENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLancamento In Number) RETURN Boolean;
  FUNCTION F_LANCA_APURAR_VALOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in number) RETURN Number;
  FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pnCdRegFat    In Number) RETURN Number;
  FUNCTION F_RETORNA_DETAL_GESTOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Number, pId_Critica Varchar2) RETURN Varchar2;
  FUNCTION F_GET_DIAS_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN Number;
  FUNCTION F_GET_DIAS_CLINICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pNrIdentificacao in varchar2, pDtInicio Date, pDtFinal Date) RETURN Number;
  FUNCTION F_GET_DIAS_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pTipo In Varchar2 Default 'C', reg_fat IN OUT NOCOPY REG_FATRec) RETURN Number;
  FUNCTION F_DEFINE_ATI_MED_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompet in Date) RETURN Varchar2;
    FUNCTION F_ITEM_CENTRO_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento in Varchar2) RETURN Boolean;
  FUNCTION F_F_CONTA_CIR_MULTIPLA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2 Default '', pCompet in Date) RETURN Boolean;
  FUNCTION F_GET_PROC_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Varchar2;
  FUNCTION F_F_SN_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN;
  FUNCTION F_F_SN_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean;
  FUNCTION F_F_SN_ABRE_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean;
  FUNCTION F_F_SN_PROC_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN;
  FUNCTION F_DEFINE_VINCULO_CREDITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pData in Date, pPrestador in Number,pTpCredito in Number) RETURN Number;
  FUNCTION F_F_LAQUEADURA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN;
  FUNCTION F_F_TOTAL_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number) RETURN Number;
  FUNCTION F_GET_TP_COMPLEXIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pModo In Varchar2) RETURN VARCHAR2;
  FUNCTION F_RET_INCREMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pDate in Date) RETURN NUMBER;
  FUNCTION F_RET_TIPO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pCompet Date) RETURN VARCHAR2;
  FUNCTION F_GET_ULTIMA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number;
  FUNCTION F_GET_IDADE_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN NUMBER;
  FUNCTION F_F_SN_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In VARCHAR2) RETURN BOOLEAN;
  FUNCTION F_GET_PROC_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2;
  FUNCTION F_GET_PROC_DIARIA_IDOSO (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN Varchar2;
  FUNCTION F_GET_SETOR_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN Number;
  FUNCTION F_GET_PRESTADOR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN NUMBER;
  FUNCTION F_GET_DIAS_AIH_5 (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pTipo In Varchar2 Default 'C') RETURN NUMBER;
  FUNCTION F_GET_DT_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE;
  FUNCTION F_F_SN_FECHADA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN BOOLEAN;
  FUNCTION F_GET_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number, pProcedimento in Varchar2, pCompet in Date) RETURN Varchar2;
  FUNCTION F_F_SN_PAGO_POR_DIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN;
   FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN;
  FUNCTION F_F_AIH_CONTINUACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In NUmber) RETURN BOOLEAN;
  FUNCTION F_F_COMPET_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE;
  FUNCTION F_F_SN_TEM_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN;
  FUNCTION F_F_SN_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN;
  PROCEDURE P_VALIDA_NR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext, P_REG_FAT   NUMBER,
                         PNR_AIH     VARCHAR2,
                         PTIPO_AIH   VARCHAR2,
                         PGUIA_ANT   VARCHAR2,
                         PGUIA_POS   VARCHAR2);
  PROCEDURE P_HABILITA_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, vProcedimento in varchar2);
  PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDiarias in Number, cg$ctrl IN OUT NOCOPY CG$CTRLRec, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_DEFINE_PRESTADOR_AUTO (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdSetor     in     number  ,
                                 nCdPrestador IN OUT NOCOPY number  ,
                                 pProcedimento in Varchar2,PCBO IN OUT VARCHAR2);
  PROCEDURE P_CONTA_CLOSED (xml IN OUT NOCOPY PKG_XML.XmlContext, vClosed in varchar2, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec);
  PROCEDURE P_DADOS_PARTO_DEFAULT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number
                              ,pProcedimento in varchar2, it_parto IN OUT NOCOPY IT_PARTORec);
  PROCEDURE P_CHECK_CONTAS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, nRemessa in number);
  PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_STATUS_LOCK (xml IN OUT NOCOPY PKG_XML.XmlContext, vModo in varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec);
  PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador In Number,pAtiMed In Varchar2,pProcedimento in Varchar2);
  PROCEDURE P_CRIA_NOVA_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pdAlta in Date,pMotAlt in Number);
  PROCEDURE P_VALIDA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pCdPrestador in number);
  PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_VALIDA_GLOSA_TOTAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
  PROCEDURE P_HABILITA_DESABILITA_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pbLimpaCampo in boolean, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_INSERE_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat          in     number  ,
                             nLancto          IN OUT NOCOPY number  ,
                             vProcedimento    in     varchar2,
                             dDate            in     date    ,
                             nSetor           in     number  ,
                             pPrestador       in     number  ,
                             nQtd             in     number  ,
                             vSN_Realizado    in     varchar2,
                             vAtualizaIT      out    varchar2);
  PROCEDURE P_MONTAR_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat  in number,
                         nLancto  in number,
                         vProced  in Varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec);
  PROCEDURE P_CHK_LCTO_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat  In Number
                      ,pLcto    In Number
                      ,DtComp   In Date);
  PROCEDURE P_VALIDA_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pModalidade In Varchar2);
--  PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_CHK_ATI_MED_06 (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Reg_Fat Number, pCd_Lancamento Number);
  PROCEDURE P_DEFINE_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number);
  PROCEDURE P_DML_CORRIGE_LCTO_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in NUMBER, pCompet Date, pAtualiza in out Varchar2 );
  PROCEDURE P_LANCA_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec);
  PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pProcedimento In Varchar2);
  PROCEDURE P_VALIDA_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pAIH In Varchar2);
  PROCEDURE P_DML_REG_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
  PROCEDURE P_DML_DADOS_LAQVASEC (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pProcedimento in Varchar2);
  PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2);
  PROCEDURE P_DML_LANCAMENTO_PAI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
  PROCEDURE P_DML_DIARIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDA_Acomp in Number);
  PROCEDURE P_VAL_CEP_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_VAL_PREST_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_RETORNA_DADOS_FORNECEDOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pFornecedor in number, itcob_pre IN OUT NOCOPY ITCOB_PRERec);
  PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pSexoPac In Varchar2);
  PROCEDURE P_DEFINE_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_DEFINE_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number,pSolicitado in varchar2,pRealizado in varchar2,pEsp IN OUT NOCOPY Varchar2);
  PROCEDURE P_CHECA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdPrestador number);
  PROCEDURE P_VAL_PREST_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Varchar2);
  PROCEDURE P_INSERE_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec);
  PROCEDURE P_VALIDA_CONTA_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat Number);
  PROCEDURE P_VALIDA_DATA_INICIO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_DML_EXCLUI_DIARIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number
                                ,pDtAlta In Date);
  PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                              ,pEspec_SUS    In Varchar2);
  PROCEDURE P_VALIDA_GUIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento In Number, pReg_Fat In Number, pNr_Guia In Varchar2);
  PROCEDURE P_VALIDA_SOL_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProc_Sol In Varchar2,pProc_Rea In Varchar2);
  PROCEDURE P_DEFINE_CID_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_DEFINE_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_VAL_CID_SECUNDARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pCID_Pri In Varchar2 ,pCID_Sec In Varchar2,pSexPac In Varchar2);
  PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pProcedimento In Varchar2,pCID In Varchar2);
  PROCEDURE P_DEFINE_EQP_MEDICA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                               ,pSN_Equipe      Out Varchar2
                               ,pNr_Auxiliar    Out Number
                               ,pSN_Anestesista Out Varchar2);
  PROCEDURE P_DEFINE_ABERTURA_TELAS (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec);
  PROCEDURE P_VALIDA_PRESTADORES_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number);
  PROCEDURE P_INSERE_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento In Varchar2);
  PROCEDURE P_VALIDA_COD_REDUZIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in varchar, itreg_fat IN OUT NOCOPY ITREG_FATRec);
  PROCEDURE P_VAL_QUANTIDADE_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar, pProc_Pai in Varchar2, pDtLacto in date,pQtLacto in Number);
  PROCEDURE P_VALIDA_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pEmpresa in Number, pSetor in Number);
  PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Number, pPrestador in Number);
  PROCEDURE P_VALIDA_ATI_MED_REPETIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLancamento in Number,pAtiMed in Varchar2);
  PROCEDURE P_VAL_PRESTADOR_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number);
  PROCEDURE P_VAL_PRESTADOR_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pPrestador in Number, pCBO in Varchar2,pAtiMed in Varchar2 default '00');
  PROCEDURE P_VAL_CBO_AUXILIARES (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
  PROCEDURE P_VALIDA_TIPO_PAGAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pConvenio in Number,pPrestador in Number,pTpPagamento in Varchar2, FSV_MODE IN OUT NOCOPY varchar2);
  PROCEDURE P_RETORNA_DADOS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Remessa number, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_VALIDA_CNPJ (xml IN OUT NOCOPY PKG_XML.XmlContext, pCNPJ in Number, itcob_pre IN OUT NOCOPY ITCOB_PRERec);
  PROCEDURE P_P_COMMIT_FORM (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2);
  PROCEDURE P_DML_REGISTRO_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number, pProcedimento in Varchar2, pQtLancamento in Number);
  PROCEDURE P_RETORNA_CIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCidade in Number, rNm_Cidade out Varchar2, rCd_UF out Varchar2,pRaise in boolean);
  PROCEDURE P_RETORNA_CIDADE2 (xml IN OUT NOCOPY PKG_XML.XmlContext, pNm_Cidade in Varchar2, pCd_UF in Varchar2,pCidade in Number,pRaise in boolean, responsa IN OUT NOCOPY RESPONSARec);
  PROCEDURE P_DML_CORRIGE_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto In Number Default Null);
  PROCEDURE P_DML_ATUALIZA_ITEM_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto in Number, pQtd_It In Number);
  PROCEDURE P_RETORNA_DADOS_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Leito number, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_RETORNA_DADOS_MOT_ALT (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Mot_Alt in number, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_DEFINE_SN_INFECCAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento in Number,pSN_Infec in Varchar2, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_LANCA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_RETORNA_DADOS_EMPRESA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Multi_Empresa number, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_VALIDA_CID_OBITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pEstadoPac in Varchar2,pMot in Varchar2);
  PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat  In Number
                                     ,pDias_DA In number
                                     ,pReflesh  IN OUT NOCOPY Varchar2, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_DML_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number ,pDias in number);
  PROCEDURE P_DML_DELETE_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_I_PC_P_NR_CEP (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_I_PC_P_DSP_NR_CPF (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec);
  PROCEDURE P_I_WVI_P_NR_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec);
  PROCEDURE P_B_PQ_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_I_PC_A_DT_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, p_atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_I_WVI_A_CD_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_I_PC_A_CD_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_B_PI_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_B_OCDM_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_I_WVI_RF_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec);
  PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_B_PI_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_B_PU_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec, FSV_FORM_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_I_M_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, itreg_fat IN OUT NOCOPY ITREG_FATRec, global IN OUT NOCOPY GlobalsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
  PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec);
  PROCEDURE P_I_WVI_IF_CD_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
  PROCEDURE P_B_PD_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, itcob_pre IN OUT NOCOPY ITCOB_PRERec, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, responsa IN OUT NOCOPY RESPONSARec);
  PROCEDURE P_B_WNBI_RESPONSA (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, responsa IN OUT NOCOPY RESPONSARec);
  PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, reg_fat IN OUT NOCOPY REG_FATRec);
  PROCEDURE P_B_PQ_DIARIA_UTI_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, itreg_fat IN OUT NOCOPY ITREG_FATRec);
  PROCEDURE P_F_PF (xml IN OUT NOCOPY PKG_XML.XmlContext);
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>P_FACHADA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
PROCEDURE P_FACHADA(in_params in Clob, out_params out Clob) IS
BEGIN
  null;
END P_FACHADA;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PK_ITREG_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_PK_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdRegFat in number) RETURN number IS
nPk number := 1;
begin
   begin
      select nvl(max(CD_LANCAMENTO),0) + 1
        into nPk
        from ITREG_FAT
       where CD_REG_FAT = nCdRegFat;
   exception
      when NO_DATA_FOUND then
           Null;
   end;
   return nPk;
end;
FUNCTION F_PK_ITREG_FAT (in_params in Clob, out_params out Clob) RETURN number IS
  xml PKG_XML.XmlContext;
  nCdRegFat number;
  result number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nCdRegFat:= PKG_XML.Getnumber(xml, 'nCdRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_PK_ITREG_FAT_E(xml) THEN
        result:= F_PK_ITREG_FAT(xml, nCdRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_PK_ITREG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_TIPO_PAGTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_TIPO_PAGTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number) RETURN varchar2 IS
Cursor cPrestador is
    SELECT prestador.TP_VINCULO,
           convenio.TP_CONVENIO,
           pres_con.SN_PAGA_PELO_CONVENIO
      FROM CONVENIO convenio
         , PRES_CON pres_con
         , PRESTADOR prestador
         , CONFIG_FFIS conf
           , EMPRESA_CONVENIO
     WHERE pres_con.CD_PRESTADOR (+) = prestador.CD_PRESTADOR
       AND pres_con.CD_CONVENIO      = convenio.CD_CONVENIO (+)
       and (pres_con.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or pres_con.cd_multi_empresa is null )  -- OP 3396 - 25/04/2013
       AND convenio.CD_CONVENIO      = conf.CD_CONVENIO
       AND Empresa_Convenio.Cd_Convenio = Convenio.Cd_Convenio
       AND Empresa_Convenio.Cd_Multi_Empresa = xml.multiEmpresa
       AND prestador.TP_SITUACAO     = 'A'
       AND prestador.CD_PRESTADOR    = pPrestador;
  vTpVinc  Varchar2(1);
  vTpConv  Varchar2(1);
  vSnPaga  Varchar2(1);
  vTpPagt  Varchar2(1);
begin
  Open  cPrestador;
    Fetch cPrestador into vTpVinc,
                                      vTpConv,
                                      vSnPaga;
  Close cPrestador;
  if    vTpVinc in('U','C') then
        vTpPagt := 'F';
  elsif vTpConv = 'H' and vSnPaga = 'S' then
        vTpPagt := 'C';
  else
        vTpPagt := 'P';
  end if;
   return(vTpPagt);
end;
FUNCTION F_DEFINE_TIPO_PAGTO (in_params in Clob, out_params out Clob) RETURN varchar2 IS
  xml PKG_XML.XmlContext;
  pPrestador Number;
  result varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_TIPO_PAGTO_E(xml) THEN
        result:= F_DEFINE_TIPO_PAGTO(xml, pPrestador);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_TIPO_PAGTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_PERM_MAIOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_PERM_MAIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number IS
Cursor cProcPerMaior is select i.cd_procedimento,nr_dias_internacao
                            from itreg_fat i,
                                 procedimento_sus p
                           where i.cd_procedimento = p.cd_procedimento
                             and i.cd_reg_fat = pRegFat
                             and p.nr_dias_internacao in (select max(nr_dias_internacao)
                                                            from procedimento_sus
                                                           where cd_procedimento in (select cd_procedimento
                                                                                       from itreg_fat
                                                                                      where cd_reg_fat = pRegFat
                                                                                        and sn_proced_realizado = 'S'));
  nDiasConta  Number:= 0;      -- Dias Internado
  nDiasProc   Number:= 0;      -- Maximo de dias do procedimento
  nPM_Calc    Number:= 0;      -- Dias de Permanencia Maior
  nUti        Number:= 0;
  vProcedPM   Procedimento_SUS.Cd_Procedimento%Type; -- Recebe o Procedimento de Maior Numero de Dias de Internação
  eSaida      Exception;
begin
   IF DBAMV.PKG_SUS_REGRA_PROCEDIMENTO.f_prc_permanencia_maior(F_GET_PROC_REALIZADO(xml,pRegFat),F_GET_DT_INTERNACAO(xml,pRegFat) ) THEN
      RAISE eSaida;
   END IF;
  -- se n permitir, chamar saida;
   -- Recupera os dias de internacao consideranco o motivo de alta
   --nDiasConta:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT);
   nDiasConta:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat,'P' ,reg_fat => REG_FAT); --OP: 3622 início/Fim.
   -- Recupera na conta o procedimento principal com maior quantidade de dias para Internação.
   Open cProcPerMaior;
     Fetch cProcPerMaior into vProcedPM,nDiasProc;
   Close cProcPerMaior;
   If nDiasProc > 0 Then
     nUTI    := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
     nPM_Calc:= (nDiasConta - (nDiasProc * 2)) - nUTI;
     If nPM_Calc > 0 then
       If nPM_Calc > 99 then
         Return 99;
       Else
         Return nPM_Calc;
       End if;
     End if;
   End If;
   Return 0;
Exception
When eSaida Then
  Return 0;
end;
FUNCTION F_GET_DIAS_PERM_MAIOR (in_params in Clob, out_params out Clob) RETURN number IS
  xml PKG_XML.XmlContext;
  pRegFat number;
  reg_fat REG_FATRec;
  result number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_PERM_MAIOR_E(xml) THEN
        result:= F_GET_DIAS_PERM_MAIOR(xml, pRegFat, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_PERM_MAIOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PRIMEIRA_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PRIMEIRA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number IS
nRegFat number;
begin
   SELECT min(reg_fat.CD_REG_FAT) REG_FAT
     into nRegFat
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_ATENDIMENTO   = nAtend;
   return(nRegFat);
end;
FUNCTION F_GET_PRIMEIRA_CONTA (in_params in Clob, out_params out Clob) RETURN number IS
  xml PKG_XML.XmlContext;
  nAtend number;
  result number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRIMEIRA_CONTA_E(xml) THEN
        result:= F_GET_PRIMEIRA_CONTA(xml, nAtend);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRIMEIRA_CONTA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_CALC_DIAS_PROCEDIMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_CALC_DIAS_PROCEDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number IS
vProcedimento Procedimento_SUS.Cd_Procedimento%Type;
  nQtd     Number := 1;
  nDiasUTI Number := 0;
  bPgDIA   Boolean;
  bAIH_5   Boolean;
Begin
    -- Captura parametros
    vProcedimento := Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat);
    --bPgDIA        := Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PAGO_POR_DIA(xml, vProcedimento);
    bAIH_5        := Pkg_ffis_M_LACTO_AIH_P321.F_F_AIH_CONTINUACAO(xml, pRegFat);
  -- Captura os dias de UTI
  nDiasUTI:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
  If Not bAIH_5 Then
   nQtd := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat,'C',reg_fat => REG_FAT)- nDiasUTI;
  Else
   nQtd := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_AIH_5(xml, pRegFat);
  End If;
   If nQtd < 1 Then
    nQtd:=1;
   End IF;
  Return nQtd;
End;
FUNCTION F_CALC_DIAS_PROCEDIMENTO (in_params in Clob, out_params out Clob) RETURN number IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  reg_fat REG_FATRec;
  result number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_CALC_DIAS_PROCEDIMENTO_E(xml) THEN
        result:= F_CALC_DIAS_PROCEDIMENTO(xml, pRegFat, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_CALC_DIAS_PROCEDIMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_ATEND_QTD_FECHADAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_ATEND_QTD_FECHADAS (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                                nAtend   in number) RETURN NUMBER IS
nQtd number := 0;
begin
   SELECT nvl(count(*),0)
     INTO nQtd
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_MULTI_EMPRESA = nEmpresa
      AND reg_fat.CD_ATENDIMENTO   = nAtend
      AND reg_fat.SN_FECHADA       = 'S';
   return(nQtd);
exception
   when NO_DATA_FOUND then
        return(0);
end;
FUNCTION F_GET_ATEND_QTD_FECHADAS (in_params in Clob, out_params out Clob) RETURN NUMBER IS
  xml PKG_XML.XmlContext;
  nEmpresa number;
  nAtend number;
  result NUMBER;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nEmpresa:= PKG_XML.Getnumber(xml, 'nEmpresa');
    nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ATEND_QTD_FECHADAS_E(xml) THEN
        result:= F_GET_ATEND_QTD_FECHADAS(xml, nEmpresa, nAtend);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ATEND_QTD_FECHADAS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_PEND_SADT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_PEND_SADT (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend in number) RETURN boolean IS
nQtd number := 0;
begin
   SELECT nvl(count(log_falha_importacao.CD_ITEM_FALHA),0)
     into nQtd
     FROM LOG_FALHA_IMPORTACAO log_falha_importacao
    WHERE log_falha_importacao.CD_ATENDIMENTO    = nAtend
      AND log_falha_importacao.NM_USUARIO_BAIXOU is null;
   if nQtd = 0 then
         return(False);
   end if;
   return(True);
exception
    when NO_DATA_FOUND then
         return(False);
end;
FUNCTION F_DEFINE_PEND_SADT (in_params in Clob, out_params out Clob) RETURN boolean IS
  xml PKG_XML.XmlContext;
  nAtend number;
  result boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PEND_SADT_E(xml) THEN
        result:= F_DEFINE_PEND_SADT(xml, nAtend);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PEND_SADT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PROCURA_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_PROCURA_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat in number) RETURN boolean IS
nItens number := 0;
begin
   select nvl(count(*),0)
     into nItens
     from ITREG_FAT
    where itreg_fat.CD_REG_FAT = nRegFat
      and itreg_fat.CD_Procedimento    in (Select Cd_Procedimento
                                             From Procedimento_SUS_Detalhe
                                            Where SN_Parto = 'S');
   if nItens = 0 then
      raise NO_DATA_FOUND;
   end if;
   return(True);
exception
   when NO_DATA_FOUND then
        return(False);
end;
FUNCTION F_PROCURA_PARTO (in_params in Clob, out_params out Clob) RETURN boolean IS
  xml PKG_XML.XmlContext;
  nRegFat number;
  result boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nRegFat:= PKG_XML.Getnumber(xml, 'nRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_PROCURA_PARTO_E(xml) THEN
        result:= F_PROCURA_PARTO(xml, nRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_PROCURA_PARTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_REMESSA_OBRIGATORIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) RETURN boolean IS
Begin
   if REG_FAT.CD_REMESSA           IS NULL     AND
         REG_FAT.CD_PROCEDIMENTO_REALIZADO IS NOT NULL AND
         formParams.SN_REMESSA_OBRIGATORIA = 'S' THEN
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_3)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_3', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Remessa deve ser informada.'),false);
      return(False);
   end if;
   return(True);
End;
FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (in_params in Clob, out_params out Clob) RETURN boolean IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  formParams FormParamsRec;
  result boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_REMESSA_OBRIGATORIA_E(xml) THEN
        result:= F_DEFINE_REMESSA_OBRIGATORIA(xml, REG_FAT, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_REMESSA_OBRIGATORIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>valida_periodo_conta</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VALIDA_PERIODO_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, p_cd_reg_fat reg_fat.cd_reg_fat%type, p_dt_inicio date, p_dt_final date) RETURN boolean IS
vCountItensFora number := 0;
BEGIN
  if p_dt_inicio is not null and p_dt_final is null then
      select count(*)
        into vCountItensfora
        from itreg_fat
       where cd_reg_fat = p_cd_reg_fat
         and trunc(dt_lancamento) < p_dt_inicio
         and cd_procedimento is not null;
  elsif p_dt_inicio is null and p_dt_final is not null then
      select count(*)
        into vCountItensfora
        from itreg_fat
       where cd_reg_fat = p_cd_reg_fat
         and trunc(dt_lancamento) > p_dt_final
         and cd_procedimento is not null;
  elsif p_dt_inicio is not null and p_dt_final is not null then
      select count(*)
        into vCountItensfora
        from itreg_fat
       where cd_reg_fat = p_cd_reg_fat
         and trunc(dt_lancamento) not between p_dt_inicio and p_dt_final
         and cd_procedimento is not null;
  end if;
  if vCountItensfora > 0 then
      return false; --encontrou itens fora do periodo da conta e retorna false
  else
      return true;  --não encontrou itens fora do periodo da conta e retorna true
  end if;
END;
FUNCTION F_VALIDA_PERIODO_CONTA (in_params in Clob, out_params out Clob) RETURN boolean IS
  xml PKG_XML.XmlContext;
  p_cd_reg_fat number;
  p_dt_inicio date;
  p_dt_final date;
  result boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    p_cd_reg_fat:= PKG_XML.Getnumber(xml, 'p_cd_reg_fat');
    p_dt_inicio:= PKG_XML.Getdate(xml, 'p_dt_inicio');
    p_dt_final:= PKG_XML.Getdate(xml, 'p_dt_final');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_PERIODO_CONTA_E(xml) THEN
        result:= F_VALIDA_PERIODO_CONTA(xml, p_cd_reg_fat, p_dt_inicio, p_dt_final);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_PERIODO_CONTA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_CNS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VALIDA_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Number) RETURN Boolean IS
Pis     Varchar2(15);
  Resto Number;
  Dv       Number;
  Soma     Number;
  Resultado Varchar2(15);
Begin
  Pis := SubStr(NumCns,1,11);
  Soma := ( ( To_Number( SubStr( Pis,1 ,1  ) ) ) * 15 ) +
            ( ( To_Number( SubStr( Pis, 2,1  ) ) ) * 14 ) +
            ( ( To_Number( SubStr( Pis, 3,1  ) ) ) * 13 ) +
            ( ( To_Number( SubStr( Pis, 4,1  ) ) ) * 12 ) +
            ( ( To_Number( SubStr( Pis, 5,1  ) ) ) * 11 ) +
            ( ( To_Number( SubStr( Pis, 6,1  ) ) ) * 10 ) +
            ( ( To_Number( SubStr( Pis, 7,1  ) ) ) * 9  ) +
            ( ( To_Number( SubStr( Pis, 8,1  ) ) ) * 8  ) +
            ( ( To_Number( SubStr( Pis, 9,1  ) ) ) * 7  ) +
            ( ( To_Number( SubStr( Pis, 10,1 ) ) ) * 6  )+
          ( ( To_Number( SubStr( Pis, 11,1 ) ) ) * 5  );
  Resto := Mod(Soma ,11);
  Dv    := 11 - Resto;
  If Dv = 11 Then
    Dv := 0;
  End If;
  If Dv = 10 Then
    Soma := ( ( To_Number( SubStr( Pis, 1,1  ) ) ) * 15 ) +
              ( ( To_Number( SubStr( Pis, 2,1  ) ) ) * 14 ) +
              ( ( To_Number( SubStr( Pis, 3,1  ) ) ) * 13 ) +
              ( ( To_Number( SubStr( Pis, 4,1  ) ) ) * 12 ) +
              ( ( To_Number( SubStr( Pis, 5,1  ) ) ) * 11 ) +
              ( ( To_Number( SubStr( Pis, 6,1  ) ) ) * 10 ) +
              ( ( To_Number( SubStr( Pis, 7,1  ) ) ) * 9  ) +
              ( ( To_Number( SubStr( Pis, 8,1  ) ) ) * 8  ) +
              ( ( To_Number( SubStr( Pis, 9,1  ) ) ) * 7  ) +
              ( ( To_Number( SubStr( Pis, 10,1 ) ) ) * 6  ) +
            ( ( To_Number( SubStr( Pis, 11,1 ) ) ) * 5  ) + 2;
    Resto     := Mod(Soma, 11);
    Dv        := 11 - Resto;
    Resultado := Pis || '001' || To_Char( Dv );
  Else
    Resultado := Pis || '000' || To_Char( Dv );
  End If;
  If NumCns <> Resultado Then
    Return (False);
  Else
    Return (True);
  End If;
End;
FUNCTION F_VALIDA_CNS (in_params in Clob, out_params out Clob) RETURN Boolean IS
  xml PKG_XML.XmlContext;
  NumCns Number;
  result Boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    NumCns:= PKG_XML.GetNumber(xml, 'NumCns');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_E(xml) THEN
        result:= F_VALIDA_CNS(xml, NumCns);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_CNS_PROV</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VALIDA_CNS_PROV (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Varchar2) RETURN BOOLEAN IS
vSoma      NUMBER;
 vResto     NUMBER;
BEGIN
 vSoma := ( (TO_NUMBER( SUBSTR(NumCns,  1, 1) ) ) * 15 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  2, 1) ) ) * 14 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  3, 1) ) ) * 13 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  4, 1) ) ) * 12 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  5, 1) ) ) * 11 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  6, 1) ) ) * 10 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  7, 1) ) ) *  9 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  8, 1) ) ) *  8 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  9, 1) ) ) *  7 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 10, 1) ) ) *  6 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 11, 1) ) ) *  5 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 12, 1) ) ) *  4 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 13, 1) ) ) *  3 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 14, 1) ) ) *  2 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 15, 1) ) ) *  1 );
 vResto := MOD(vSoma, 11);
 IF NVL(vResto,1) <> 0 THEN
  RETURN (FALSE);
 ELSE
  RETURN (TRUE);
 END IF;
END;
FUNCTION F_VALIDA_CNS_PROV (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  NumCns Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    NumCns:= PKG_XML.GetVarchar2(xml, 'NumCns');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_PROV_E(xml) THEN
        result:= F_VALIDA_CNS_PROV(xml, NumCns);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_PROV_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VERIFICA_QTD_ABERTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_VERIFICA_QTD_ABERTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                              nAtend   in number) RETURN NUMBER IS
nQtd number := 0;
begin
   SELECT nvl(count(*),0)
     INTO nQtd
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_MULTI_EMPRESA = nEmpresa
      AND reg_fat.CD_ATENDIMENTO   = nAtend
      AND reg_fat.SN_FECHADA       = 'N';
   return(nQtd);
exception
   when NO_DATA_FOUND then
        return(0);
END;
FUNCTION F_VERIFICA_QTD_ABERTA (in_params in Clob, out_params out Clob) RETURN NUMBER IS
  xml PKG_XML.XmlContext;
  nEmpresa number;
  nAtend number;
  result NUMBER;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nEmpresa:= PKG_XML.Getnumber(xml, 'nEmpresa');
    nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VERIFICA_QTD_ABERTA_E(xml) THEN
        result:= F_VERIFICA_QTD_ABERTA(xml, nEmpresa, nAtend);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_VERIFICA_QTD_ABERTA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_GRU_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
--OP 35293 inicio
FUNCTION F_DEFINE_GRU_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompetencia IN Date) RETURN Number IS --OP 35293
Cursor cGRUFAT(pCompet IN DATE) Is
  Select d.Cd_Gru_Pro, g.cd_gru_fat
    From dbamv.Procedimento_Detalhe_vigencia d
     , dbamv.Gru_Pro g
   Where d.Cd_Procedimento = pProcedimento
     AND pCompet BETWEEN d.dt_validade_inicial AND Nvl(d.dt_validade_final, pCompet)
   AND d.cd_gru_pro = g.cd_gru_pro(+);

  nGruPro       Gru_Pro.Cd_Gru_Pro%Type;
  nGruFat       Gru_Fat.Cd_Gru_fat%Type;
  Saida         Exception;
  Erro          Exception;
  bEXISTE       Boolean;
  dCOMPET       Date;
  vMSG          VARCHAR2(2000);

Begin
  If pProcedimento Is Null Then
    raise Saida;
  End If;

  dCOMPET:= TRUNC(NVL(pCompetencia, sysdate), 'MM');
  nGruPro:= NULL;
  nGruFat:= NULL;

  Open cGRUFAT(dCOMPET);
  Fetch cGRUFAT Into nGruPro, nGruFat;
  bEXISTE:= cGRUFAT%FOUND;
  Close cGRUFAT;
  IF NOT bEXISTE THEN
    vMSG:= 'Não foi encontrado detalhe do procedimento '||pProcedimento||' na competência '||dCOMPET||
         '. Verificar em FFIS > Tabelas > Procedimentos > Procedimentos.';
  RAISE Erro;
  END IF;

  IF nGruPro IS NULL THEN
    vMSG:= 'Procedimento '||pProcedimento||' na competência'||dCOMPET||
         ' está sem grupo de procedimentos de internação. Verificar em FFIS > Tabelas > Procedimentos > Procedimentos.';
  RAISE Erro;
  END IF;

  IF nGruFat IS NULL THEN
    vMSG:= 'Grupo de procedimento '||nGruPro||' do procedimento '||pProcedimento||' na competência '||dCOMPET|| ' está sem grupo de faturamento cadastrado.'||
         '. Verificar em Fat. Convênios > Tabelas > Gerais > Grupos de Procedimentos.';
  RAISE Erro;
  END IF;

 Return(nGruFat);
Exception
/*
  When NO_DATA_FOUND Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_4)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_4', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Grupo de faturamento não cadastrado para procedimento realizado: %s.', arg_list(pProcedimento)),TRUE);
  */
  When Erro Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:',vMSG ,TRUE);

  When Saida Then
    Return null;
End;
FUNCTION F_DEFINE_GRU_FAT (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pCompetencia DATE; --OP 35293
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCompetencia := PKG_XML.GetDate(xml, 'pCompetencia'); --OP 35293
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_GRU_FAT_E(xml) THEN
        result:= F_DEFINE_GRU_FAT(xml, pProcedimento, pCompetencia);  --OP 35293
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_GRU_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
--OP 35293 fim
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_PRC_DIARIA_ACOMPANHANTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2 IS
nIdade    Number;
  bSN_Parto Boolean;
  Saida     Exception;
BEGIN
  -- Retorna TRUE se o procedimento é de parto.
  bSN_Parto:= Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PARTO(xml, Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat));
  -- Retorna a idade do paciente.
  nIdade:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_IDADE_PACIENTE(xml, pRegFat);
  If nIdade > 12
      And bSN_Parto Then
      -- DIARIA DE ACOMPANHANTE DE GESTANTE C/ PERNOITE
      Return('0802010032');
  End If;
  If bSN_Parto Then
      Raise Saida;
  End If;
  If nIdade >= 18 And nIdade < 60 Then
      -- DIARIA DE ACOMPANHANTE ADULTO (COM PERNOITE)
      Return('0802010016');
  ElsIf  nIdade >= 60 Then
    -- Quando não houver configuração será lançado o procedimento abaixo.
    -- DIARIA DE ACOMPANHANTE DE IDOSOS C/ PERNOITE
    Return Nvl(Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_DIARIA_IDOSO(xml),'0802010040');
  ElsIf nIdade < 18 Then
  -- DIARIA DE ACOMPANHANTE CRIANCA/ADOLESCENTE C/PERNOITE
    Return('0802010024');
  End If;
  Raise Saida;
Exception
  When Saida Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_5)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_5', 'PKG_FFIS_M_LACTO_AIH_P321', 'Aviso: Problema na definição do procedimento da diária de acompanhante.'),false);
      Return(Null);
END;
FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PRC_DIARIA_ACOMPAN_E(xml) THEN
        result:= F_DEFINE_PRC_DIARIA_ACOMPAN(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PRC_DIARIA_ACOMPAN_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>OBRIGA_CBO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_OBRIGA_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento Varchar2) RETURN BOOLEAN IS
nAchou Number;
BEGIN
  Select Count(*)
    Into nAchou
    From Procedimento_SUS_CBO
   Where Cd_Procedimento = pProcedimento
     And Cd_CBOS Not In ('000001','000002')
     And SN_Ativo = 'S';
  If nAchou > 0 then
      Return(True);
  Else
      Return(False);
  End If;
END;
FUNCTION F_OBRIGA_CBO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_OBRIGA_CBO_E(xml) THEN
        result:= F_OBRIGA_CBO(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_OBRIGA_CBO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_INTERCORRENCIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_INTERCORRENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLancamento In Number) RETURN Boolean IS
nSN_Intercorrencia Number;
BEGIN
  Select Count(*)
       Into nSN_Intercorrencia
    From Reg_Fat
       , ItReg_Fat
       , Procedimento_SUS_Detalhe pDetal
   Where ItReg_Fat.Cd_Procedimento = pDetal.Cd_Procedimento
     And Reg_Fat.Cd_Reg_Fat = ItReg_Fat.Cd_Reg_Fat
     And pDetal.SN_AIH_Principal = 'S'
     And ItReg_Fat.SN_Proced_Realizado = 'N'
     And Reg_Fat.Cd_Reg_Fat      = pRegFat
     And ItReg_Fat.Cd_Lancamento = pLancamento;
        If nSN_Intercorrencia > 0 Then
            Return True;
        Else
            Return False;
        End If;
END;
FUNCTION F_INTERCORRENCIA (in_params in Clob, out_params out Clob) RETURN Boolean IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLancamento Number;
  result Boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLancamento:= PKG_XML.GetNumber(xml, 'pLancamento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_INTERCORRENCIA_E(xml) THEN
        result:= F_INTERCORRENCIA(xml, pRegFat, pLancamento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_INTERCORRENCIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_LANCA_APURAR_VALOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_LANCA_APURAR_VALOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in number) RETURN Number IS
Cursor cPrestador is select Nr_CNES
                            , SN_Cessao_Credito
                            , Tp_Vinculo
                            , Fnc_FFIS_Define_Tipo_Vinculo(Cd_Prestador) Cd_Tipo_Vinculo
                         From Prestador
                        Where Cd_Prestador = pPrestador;
  rPrestador cPrestador%RowType;
  nCredito   Number;
  Saida      Exception;
  Begin
  If pPrestador is Null Then
      Raise Saida;
  End If;
    Open  cPrestador;
    Fetch cPrestador into rPrestador;
  Close cPrestador;
  If rPrestador.Cd_Tipo_Vinculo in (1, 2) Then
    nCredito := 3;
  ELSIf rPrestador.Cd_Tipo_Vinculo = 3 Then
       IF rPrestador.Tp_Vinculo = 'J' THEN
       nCredito := 2;
       END IF;
       IF rPrestador.Tp_Vinculo <> 'J' THEN
            IF rPrestador.Nr_CNES IS NOT NULL THEN
                 nCredito := 4;
            ELSE
                 nCredito := 1;
            END IF;
       END IF;
  ELSE
       nCredito := NULL;
  END IF;
  If rPrestador.Tp_Vinculo = 'J' Then
      If rPrestador.Cd_Tipo_Vinculo not in (1,3) and rPrestador.NR_CNES is null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_6)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_6', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Atenção: Prestador %s, não possui Número de CNES em seu cadastro. Favor providenciar a referida informação.', arg_list(pPrestador)),true);
      End If;
  End if;
  Return nCredito;
Exception
      When Saida Then
        Return Null;
End;
FUNCTION F_LANCA_APURAR_VALOR (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pPrestador number;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pPrestador:= PKG_XML.Getnumber(xml, 'pPrestador');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_LANCA_APURAR_VALOR_E(xml) THEN
        result:= F_LANCA_APURAR_VALOR(xml, pPrestador);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_LANCA_APURAR_VALOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_DIAS_DIFERENCA_UNIFICACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pnCdRegFat    In Number) RETURN Number IS
Cursor cDiasDiferenca is
    Select qt_retirar
      From conta_unificada
     where cd_reg_fat = pnCdRegFat;
  nQtdRetirar        Itreg_fat.qt_lancamento%type;
BEGIN
  Open  cDiasDiferenca;
  Fetch cDiasDiferenca Into nQtdRetirar;
  Close cDiasDiferenca;
  Return nvl(nQtdRetirar, 0);
END;
FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pnCdRegFat Number;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pnCdRegFat:= PKG_XML.GetNumber(xml, 'pnCdRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DIAS_DIFERENCA_UNIFICACAO_E(xml) THEN
        result:= F_DIAS_DIFERENCA_UNIFICACAO(xml, pnCdRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DIAS_DIFERENCA_UNIFICACAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_RETORNA_DETAL_GESTOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_RETORNA_DETAL_GESTOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Number, pId_Critica Varchar2) RETURN Varchar2 IS
Cursor cP_Menor Is Select p.cd_procedimento                            cd_procedimento
                          , p.nr_dias_internacao                         nr_dias_internacao
                          , trunc(r.dt_final) - trunc(r.dt_inicio)       nr_dias_conta
                          , trunc(p.nr_dias_internacao/2)                nr_media_procedimento
                          , r.cd_mot_alt                                 cd_mot_alt
                          , p.ds_procedimento                            ds_procedimento
                          , m.ds_motivo                                  ds_mot_alt
                       From ItReg_Fat           i
                          , Reg_Fat             r
                          , Procedimento_SUS    p
                          , Motivo_Cobranca_SUS m
                          , (Select p.cd_procedimento
                                  , Max(p.nr_dias_internacao) nr_dias_internacao
                               From ItReg_Fat i
                                  , Procedimento_SUS p
                              Where i.cd_procedimento     = p.cd_procedimento
                                and i.cd_reg_fat          = pReg_Fat
                                and i.sn_proced_realizado = 'S'
                                and i.sn_pertence_pacote  = 'N'
                              Group By p.Cd_Procedimento) MxDias
                     Where i.cd_procedimento        = p.cd_procedimento
                       and r.cd_reg_fat             = i.cd_reg_fat
                       and r.cd_mot_alt             = m.cd_motivo
                       and MxDias.Cd_Procedimento   = p.Cd_Procedimento
                       and i.cd_reg_fat             = pReg_Fat
                       and i.sn_proced_realizado    = 'S'
                       and i.sn_pertence_pacote     = 'N'
                     Order By p.nr_dias_internacao desc;
  rP_Menor  cP_Menor%RowType;
  pMessage     Varchar2(2000);
  nI           Number;
  vPeriodo   Varchar2(20);
BEGIN
  Open cP_Menor;
    Fetch cP_Menor Into rP_Menor;
  Close cP_Menor;
  If pId_Critica In ('SN_ID_MAIOR','SN_ID_MENOR','SN_PERM_MENOR') Then
    pMessage:= 'crítica referente ao corpo da conta.'||Chr(10);
  Else
    pMessage:= 'crítica referente aos itens da conta.'||Chr(10);
  End If;
  If pId_Critica In ('SN_ID_MENOR','SN_ID_MAIOR') Then
    for rIdMimMax in (select i.cd_procedimento                            cd_procedimento
                           , s.ds_procedimento                            ds_procedimento
                           , trunc((r.dt_inicio-p.dt_nascimento)/365,0)   idade
                           , s.nr_idade_minima                            nr_idade_minima
                           , s.nr_idade_maxima                            nr_idade_maxima
                        from itreg_fat        i
                           , procedimento_sus s
                           , reg_fat          r
                           , atendime         a
                           , paciente         p
                       where i.cd_procedimento     = s.cd_procedimento
                         and r.cd_reg_fat          = i.cd_reg_fat
                         and a.cd_atendimento      = r.cd_atendimento
                         and p.cd_paciente         = a.cd_paciente
                         and i.sn_proced_realizado = 'S'
                         and i.sn_pertence_pacote  = 'N'
                         and r.cd_multi_empresa    = xml.multiEmpresa
                         and a.cd_multi_empresa    = r.cd_multi_empresa
                         and i.cd_reg_fat          = pReg_Fat) loop
      If pId_Critica = 'SN_ID_MENOR' And rIdMimMax.idade < rIdMimMax.nr_idade_minima Then
        If rIdMimMax.nr_idade_minima = 0 Then
             vPeriodo:= '12 meses';
        Else
             vPeriodo:= rIdMimMax.nr_idade_minima ||' anos';
        End If;
        pMessage:= pMessage||Chr(10)||
                   'Idade do paciente ('||rIdMimMax.Idade||' anos) inferior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Procedimento||' '||rIdMimMax.ds_procedimento||'), mínimo: '||vPeriodo||'.'||Chr(10);
      End If;
      If pId_Critica = 'SN_ID_MAIOR' And rIdMimMax.idade > rIdMimMax.nr_idade_maxima Then
        If rIdMimMax.nr_idade_maxima = 0 Then
             vPeriodo:= '12 meses';
        Else
             vPeriodo:= rIdMimMax.nr_idade_maxima ||' anos';
        End If;
        pMessage:= pMessage||Chr(10)||
                   'Idade do paciente ('||rIdMimMax.Idade||' anos) superior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Procedimento||' '||rIdMimMax.ds_procedimento||'), máximo: '||vPeriodo||'.'||Chr(10);
      End If;
    End Loop;
  End If;
--|Referente ao realizado 0415020026|-------------------------------------------------------------------------------------
  If pId_Critica In ('SN_ID_MENOR','SN_ID_MAIOR') And Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pReg_Fat) = '0415020026' Then
    for rIdMimMax in (Select trunc((r.dt_inicio-p.dt_nascimento)/365,0)   idade
                           , r.cd_procedimento_realizado                  cd_realizado
                           , e.nr_idade_minima                            nr_idade_min_exc
                           , e.nr_idade_maxima                            nr_idade_max_exc
                           , e.ds_procedimento                            ds_realizado
                        from procedimento_sus e
                           , reg_fat          r
                           , atendime         a
                           , paciente         p
                       where a.cd_atendimento      = r.cd_atendimento
                         and p.cd_paciente         = a.cd_paciente
                         and e.cd_procedimento     = r.cd_procedimento_realizado
                         and r.cd_multi_empresa    = xml.multiEmpresa
                         and a.cd_multi_empresa    = r.cd_multi_empresa
                         and r.cd_reg_fat          = pReg_Fat) loop
        If pId_Critica = 'SN_ID_MENOR' And rIdMimMax.idade < rIdMimMax.nr_idade_min_exc Then
          If rIdMimMax.nr_idade_min_exc = 0 Then
               vPeriodo:= '12 meses';
          Else
               vPeriodo:= rIdMimMax.nr_idade_min_exc ||' anos';
          End If;
          pMessage:= pMessage||Chr(10)||
                     'Idade do paciente ('||rIdMimMax.Idade||' anos) inferior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Realizado||' '||rIdMimMax.Ds_Realizado||'), mínimo: '||vPeriodo||'.'||Chr(10);
      End If;
        If pId_Critica = 'SN_ID_MAIOR' And rIdMimMax.idade > rIdMimMax.nr_idade_max_exc Then
          If rIdMimMax.nr_idade_max_exc = 0 Then
               vPeriodo:= '12 meses';
          Else
                vPeriodo:= rIdMimMax.nr_idade_max_exc ||' anos';
          End If;
          pMessage:= pMessage||Chr(10)||
                     'Idade do paciente ('||rIdMimMax.Idade||' anos) superior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Realizado||' '||rIdMimMax.Ds_Realizado||'), máximo: '||vPeriodo||'.'||Chr(10);
        End If;
    End Loop;
  End If;
--|Fim|---------------------------------------------------------------------------------------------------------------------
  If pId_Critica = 'SN_PERM_MENOR' Then
    -- Soma-se o dia da alta para o motivos de permanência e transferência
    If Substr(rP_Menor.Cd_Mot_Alt, 1, 1) in ('2','3') Then
      rP_Menor.nr_dias_conta := rP_Menor.nr_dias_conta + 1;
    End If;
    If rP_Menor.nr_dias_conta = 0 Then
      rP_Menor.nr_dias_conta := 1;
    End If;
    pMessage:= pMessage||Chr(10)||
               'Permanência da conta ('||rP_Menor.nr_dias_conta||' dia(s)) não atingiu o mímimo de dias necessário para o procedimento ('||rP_Menor.cd_procedimento||' '||rP_Menor.ds_procedimento||').'
               ||' mínimo de dias exigido: '||rP_Menor.nr_media_procedimento||' dia(s).'
               ||Chr(10)||Chr(10)
               ||'Motivo de alta da conta: '||rP_Menor.cd_mot_alt||'-'||rP_Menor.ds_mot_alt||'.'||Chr(10);
  End If;
  If pId_Critica = 'SN_QTD' Then
    pMessage:= pMessage||Chr(10)||
               'Quantidade do(s) procedimento(s) listado(s) abaixo excede a quantidade máxima permitido pelo(s) mesmo(s):'||Chr(10)||Chr(10);
    pMessage:= pMessage||'  Procedimento  DESCRIÇÃO                        QtMax   QtLacto'||Chr(10);
    pMessage:= pMessage||'  --------------------------------------------------------------'||Chr(10);
    Begin
      nI:= 0;
      for rQtd in (select i.cd_procedimento
                          , decode(p.qt_maxima,Null,1,0,1,p.qt_maxima) qt_maxima
                          , p.ds_procedimento
                          , sum(i.qt_lancamento) total_lacto
                       from itreg_fat                i
                          , procedimento_sus_detalhe d
                          , procedimento_sus         p
                      where d.cd_procedimento           = i.cd_procedimento
                        and p.cd_procedimento           = d.cd_procedimento
                        and p.cd_procedimento           = i.cd_procedimento
                        and d.sn_pode_execede_qt_maxima = 'S'
                        and i.cd_reg_fat                = pReg_fat
                        and p.cd_procedimento not in ('0801010047')
                        and nvl(p.qt_maxima,0) > 0
                        and ( d.sn_aih_especial           = 'S' or
                              d.sn_aih_secundario         = 'S'
                             OR (d.SN_AIH_Principal    = 'S' AND
                                 d.SN_Proced_Cirurgico = 'N' AND
                                 d.SN_Pago_Por_Dia     = 'N'
                                )
                            )
                      group by i.cd_procedimento
                             , p.qt_maxima
                             , p.ds_procedimento
                        having sum(i.qt_lancamento) > decode(p.qt_maxima,Null,1,0,1,p.qt_maxima)) loop
        nI:= nI+1;
        pMessage:= pMessage||'  '||nI||' '|| rQtd.cd_procedimento ||'  '||Rpad(Substr(rQtd.Ds_Procedimento,1,30),30,' ')||'      '||lpad(rQtd.qt_maxima,2,0)||'        '||lpad(rQtd.total_lacto,2,0)||Chr(10);
      end loop;
    End;
  End If;
  If pId_Critica = 'SN_CBO' Then
    pMessage:= pMessage||Chr(10)||
              'Existe(m) lançamento(s) de CBO(s) incompatível(is) com procedimento, verifique a lista abaixo:'||Chr(10)||Chr(10);
    pMessage:= pMessage||'  Procedimento  DESCRIÇÃO                                CBO    '||Chr(10);
    pMessage:= pMessage||'  --------------------------------------------------------------'||Chr(10);
    Declare
      Cursor cDadosCirurgiao (p1 Number)Is Select Cd_Prestador
                                                , Cd_CBO_Prestador
                                             From ItLan_Med
                                            Where Cd_Reg_Fat    = pReg_Fat
                                              And Cd_Lancamento = p1
                                              And Cd_Ati_Med    = '01';
      nControle       Number;
      nContNaoAC         Number;
      nSN_ADMITE_QUALQUER_CBO Number;
      rDadosCirurgiao cDadosCirurgiao%RowType;
      nI Number:=0;
      dCompetencia date; -- pda 458216
      P_message  VARCHAR2(500);
    Begin
      for rCBO in (select i.cd_lancamento                              cd_lancamento
                            , i.cd_procedimento                          cd_procedimento
                            , p.cd_prestador                             cd_prestador
                            , Decode(Nvl(i.cd_ati_med,m.cd_ati_med)
                              ,'01', Nvl(i.cd_ati_med,m.cd_ati_med)
                              ,'02', m.cd_ati_med
                              ,'03', m.cd_ati_med
                              ,'04', m.cd_ati_med
                              ,'05', m.cd_ati_med
                              ,'06', m.cd_ati_med,null) cd_ati_med
                            , Nvl(i.cd_cbo_prestador,m.cd_cbo_prestador) cd_cbo_prestador
                            , d.sn_exige_equipe_medica
                            , a.ds_procedimento
                            , r.nr_identificacao
                            , r.dt_inicio
                            , r.dt_final
                            , i.dt_lancamento
                         from itreg_fat i
                            , reg_fat r
                            , itlan_med m
                            , procedimento_detalhe_vigencia d
                            , prestador p
                            , procedimento_sus a
                        where i.cd_reg_fat      = m.cd_reg_fat(+)
                          and i.cd_lancamento   = m.cd_lancamento(+)
                          and p.cd_prestador    = decode(i.cd_prestador,null,m.cd_prestador
                                                        ,decode(fnc_ffis_prestador_exportacao(i.cd_reg_fat,i.cd_lancamento),0
                                                        ,i.cd_prestador,fnc_ffis_prestador_exportacao(i.cd_reg_fat,i.cd_lancamento)))
                          and i.cd_procedimento = d.cd_procedimento
                          and dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(r.nr_identificacao, r.dt_inicio, r.dt_final, i.dt_lancamento)
                              between d.dt_validade_inicial
                              and nvl(d.dt_validade_final, dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(r.nr_identificacao, r.dt_inicio, r.dt_final, i.dt_lancamento))
                          and a.cd_procedimento = d.cd_procedimento
                          and i.sn_pertence_pacote = 'N'
                          and d.sn_exige_cpf_cbo   = 'S'
                          and i.cd_reg_fat         = r.cd_reg_fat
                          and i.cd_reg_fat         = pReg_Fat) loop
        -- Procedimento x CBO
        nControle:= 0;
        --
        dCompetencia := dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(rCBO.nr_identificacao, rCBO.dt_inicio, rCBO.dt_final, rCBO.dt_lancamento);
        select Count(*)
          into nControle
          from dbamv.procedimento_cbo_vigencia
         where cd_procedimento = rCBO.cd_procedimento
           and cd_cbo          = rCBO.cd_cbo_prestador
           and trunc(dCompetencia, 'MM') between dt_validade_inicial
                                         and nvl(dt_validade_final, trunc(dCompetencia, 'MM'));
/*
        select Count(*)
          into nControle
          from procedimento_sus_cbo
         where cd_procedimento = rCBO.cd_procedimento
           and cd_cbos         = rCBO.cd_cbo_prestador
           and sn_ativo        = 'S';
*/
        -- Aplico um no controle quando a atividade for anestesista e CBO 223104 ------------------------------
        if nvl(rCBO.cd_cbo_prestador,'0') IN ('223104','225151') and Nvl(rCBO.cd_ati_med,'00') = '06' then
          nControle:= 1;
        end if;
        -------------------------------------------------------------------------------------------------------
        -- Aplico um no controle quando a atividade for auxiliares e CBO iniciar pelos quatro -----------------
        -- dígitos do CBO do cirurgião
        if rCBO.sn_exige_equipe_medica = 'S' and Nvl(rCBO.cd_ati_med,'00') in ('02','03','04','05') then
        --[ início PDA 460989 ]
        /*open cDadosCirurgiao(record.cd_lancamento);
          fetch cDadosCirurgiao into rDadosCirurgiao;
        close cDadosCirurgiao;
        if substr(nvl(record.cd_cbo_prestador,'0'),1,4) = substr(nvl(rDadosCirurgiao.cd_cbo_prestador,'0'),1,4) then
            nControle:= 1;
        end if;
        */
        P_message := null;
        dbamv.pkg_sus_regra_cbo.p_valida_ato_medico_cbo_aux( rCBO.cd_ati_med
                                                           , pReg_Fat
                                                           , rCBO.cd_lancamento
                                                           , rCBO.cd_procedimento
                                                           , rCBO.cd_cbo_prestador
                                                           , Trunc(dCompetencia, 'MM')
                                                           , P_message );
        if P_message is null then
            nControle:= 1;
        end if;
        --[ Fim PDA 460989 ]
      end if;
        ---------------------------------------------------------------------------------------------------------
        if nControle = 0 and rCBO.cd_cbo_prestador is not null Then
          select count(procedimento_sus_complexidade.cd_procedimento)
            into nContNaoAC
            from procedimento_sus_complexidade
           where procedimento_sus_complexidade.cd_procedimento = rCBO.cd_procedimento
             and procedimento_sus_complexidade.sn_ativo = 'S'
             and procedimento_sus_complexidade.tp_complexidade_procedimento <> 'AC';
          select count(procedimento_sus_detalhe.cd_procedimento)
            into nSN_ADMITE_QUALQUER_CBO
            from procedimento_sus_detalhe
           where procedimento_sus_detalhe.sn_admite_qualquer_cbo = 'S'
             and procedimento_sus_detalhe.cd_procedimento = rCBO.cd_procedimento;
          -- Se o procedimento não for da alta complexidade e não admite qualquer CBO
          if ( nContNaoAC > 0 ) and ( nSN_ADMITE_QUALQUER_CBO = 0 ) then
            nI:= nI+1;
            pMessage:= pMessage||'  '||nI||' '|| rCBO.cd_procedimento ||'  '||Rpad(Substr(rCBO.Ds_Procedimento,1,39),39,' ')||'  '||rCBO.Cd_CBO_Prestador||Chr(10);
          end if;
        end if;
      End Loop;
    End;
  End If;
  pMessage:= pMessage||Chr(10)||'Verifique a possibilidade de inconsistências no lançamento dos dados antes de autorizar.';
  Return(pMessage);
END;
FUNCTION F_RETORNA_DETAL_GESTOR (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
  xml PKG_XML.XmlContext;
  pReg_Fat Number;
  pId_Critica Varchar2(4000);
  result Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pReg_Fat:= PKG_XML.GetNumber(xml, 'pReg_Fat');
    pId_Critica:= PKG_XML.GetVarchar2(xml, 'pId_Critica');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_RETORNA_DETAL_GESTOR_E(xml) THEN
        result:= F_RETORNA_DETAL_GESTOR(xml, pReg_Fat, pId_Critica);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_RETORNA_DETAL_GESTOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN Number IS
nDiasUTI Number;
BEGIN
         Select Sum(Qt_Lancada) Qt_Lancamento
          Into nDiasUTI
          From Diaria_UTI_SUS
         Where Cd_Reg_Fat = pRegFat;
  Return Nvl(nDiasUTI,0);
END;
FUNCTION F_GET_DIAS_UTI (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_UTI_E(xml) THEN
        result:= F_GET_DIAS_UTI(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_UTI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_CLINICO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_CLINICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pNrIdentificacao in varchar2,pDtInicio in date, pDtFinal in date) RETURN Number IS
Cursor cDiasClinico Is Select Sum(nvl(it.qt_lancamento,0))
                           from itreg_fat it
                              , procedimento_detalhe_vigencia pd
                          where pd.cd_procedimento = it.cd_procedimento
                            and dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(pNrIdentificacao, pDtInicio, pDtFinal, it.dt_lancamento)
                                BETWEEN pd.dt_validade_inicial
                                AND Nvl(pd.dt_validade_final, dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(pNrIdentificacao, pDtInicio, pDtFinal, it.dt_lancamento))
                            and pd.sn_proced_cirurgico     = 'N'
                            And it.sn_proced_realizado = 'S'
                            and it.cd_reg_fat          = pRegFat;
  nQtd_cli Number;
BEGIN
  Open cDiasClinico;
    Fetch cDiasClinico Into nQtd_cli;
  Close cDiasClinico;
  Return nvl(nQtd_cli,1);
END;
FUNCTION F_GET_DIAS_CLINICO (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pNrIdentificacao varchar2(1);
  pdtInicio date;
  pDtFinal date;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pNrIdentificacao:= PKG_XML.GetVarchar2(xml, 'pNrIdentificacao');
    pDtInicio := PKG_XML.GetDate(xml, 'pDtInicio');
    pDtFinal := PKG_XML.GetDate(xml, 'pDtFinal');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_CLINICO_E(xml) THEN
        result:= F_GET_DIAS_CLINICO(xml, pRegFat,pNrIdentificacao,pDtInicio,pDtFinal);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_CLINICO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_INTERNACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
FUNCTION F_GET_DIAS_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pTipo In Varchar2 Default 'C', reg_fat IN OUT NOCOPY REG_FATRec) RETURN Number IS
CURSOR cDados Is
  SELECT TRUNC(Dt_Inicio)       Dt_Inicio
       , TRUNC(Dt_Final)        Dt_Final
       , Cd_Mot_Alt             Cd_Motivo
       , tp_modalidade_atendimento
     , Cd_Procedimento_Realizado
    FROM Reg_Fat
   WHERE Cd_Reg_Fat = pRegFat;

   rDados          cDados%RowType;
   nDias_Cobranca  Number;
   nDias_Periodo   Number;
   nDias_Unificado Number;
   vProcedimento   Varchar2(10);
   bPgDIA          Boolean;
   bPgDIA_Util     Boolean;
  /*Tipo do calculo****************************************************/
  /*  pTipo = 'N' Retorna o calculo normal.                           */
  /*  pTipo = 'C' Considera o motivo e soma um dia quando necessário. */
  /*  pTipo = 'U' Calculo especifico para os dias de UTI.             */
  /*  pTipo = 'D' Calculo especifico para DA                          */
  /*  pTipo = 'P' Calculo especifico para PM                          */ -- OP: 3622 início/Fim.
  /* ******************************************************************/
BEGIN
   Open  cDados;
   Fetch cDados Into rDados;
   Close cDados;
   IF rDados.Dt_Final IS NOT NULL THEN
    nDias_Periodo   := rDados.Dt_Final - rDados.Dt_Inicio;
    nDias_Unificado := Pkg_ffis_M_LACTO_AIH_P321.F_DIAS_DIFERENCA_UNIFICACAO(xml, REG_FAT.CD_REG_FAT);
    If rDados.Cd_Motivo is Null Or pTipo = 'N' then
        Return nDias_Periodo - nDias_Unificado;
    -- PDA 550328 início.
    Elsif pTipo in ('D') Then
      If  Substr(rDados.Cd_Motivo,1,1) In ('2','3','4')    OR
          NVL(rDados.tp_modalidade_atendimento, ' ') = 'H' OR
      DBAMV.FNC_FFIS_CHECA_REGRA_SUS('10036', rDados.Cd_Procedimento_Realizado,TRUNC(rDados.Dt_Final, 'MM')) = 'S' Then -- OP 30932
        nDias_Cobranca := ((nDias_Periodo) + 1 ) - nDias_Unificado;
      Else
        nDias_Cobranca := nDias_Periodo - nDias_Unificado;
      End If;
      Return nDias_Cobranca;
    -- OP: 3622 início.
    Elsif pTipo in ('P') Then
      If  (Substr(rDados.Cd_Motivo,1,1) In ('2','3','4') OR rDados.Cd_Motivo in ('65', '66','67')) Then
        nDias_Cobranca := ((nDias_Periodo) + 1 ) - nDias_Unificado;
      Else
        nDias_Cobranca := nDias_Periodo - nDias_Unificado;
      End If;
      Return nDias_Cobranca;
   -- OP: 3622 Fim.
    Elsif pTipo in ('U') Then
     If  (rDados.Cd_Motivo In ('27','25') Or Substr(rDados.Cd_Motivo,1,1) In ('3','4')) Then
       nDias_Cobranca := ((nDias_Periodo) + 1 ) - nDias_Unificado;
     Else
       nDias_Cobranca := nDias_Periodo - nDias_Unificado;
     End If;
     Return nDias_Cobranca;
   -- PDA 550328 Fim.
    Elsif pTipo = 'C' Then
      vProcedimento:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat);
      bPgDIA      := Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PAGO_POR_DIA(xml, vProcedimento);
      bPgDIA_Util := Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PAGO_POR_DIA_UTIL(xml, vProcedimento);
      --If (pkg_ffis_m_lacto_aih_p321.f_f_sn_pago_por_dia(xml,vProcedimento)) Then
      If bPgDIA_Util Then
         nDias_Periodo:=  dbamv.Pack_SUS.Fnc_SUS_Dias_Do_Periodo(rDados.Dt_Inicio, rDados.Dt_Final, TRUE); -- pda 532349
         IF to_char(rDados.Dt_Final, 'D') NOT IN ('1','7') THEN
           nDias_Periodo := nDias_Periodo + 1; -- adiciona último dia
         END IF;
      --Else
      ElsIf Not bPgDIA_Util And bPgDIA Then
         nDias_Periodo:=  dbamv.Pack_SUS.Fnc_SUS_Dias_Do_Periodo(rDados.Dt_Inicio, rDados.Dt_Final, FALSE); -- pda 532349
         If Substr(rDados.Cd_Motivo,1,1) In ('2','3','4') Then
           nDias_Periodo := nDias_Periodo + 1; -- adiciona último dia
         END IF;
      Else
         nDias_Periodo := 1;
      End If;
      nDias_Cobranca := (nDias_Periodo) - nDias_Unificado;
      If nDias_Cobranca < 1 Then
         nDias_Cobranca := 1;
      End if;
      Return nDias_Cobranca;
    Else
      Return nDias_Periodo;
    End if;
  ELSE
    RETURN 0;
  END IF;
END;
FUNCTION F_GET_DIAS_INTERNACAO (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pTipo Varchar2(4000);
  reg_fat REG_FATRec;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pTipo:= PKG_XML.GetVarchar2(xml, 'pTipo');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_INTERNACAO_E(xml) THEN
        result:= F_GET_DIAS_INTERNACAO(xml, pRegFat, pTipo, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_INTERNACAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_DEFINE_ATI_MED_ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_ATI_MED_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompet in Date) RETURN Varchar2 IS
BEGIN
 --------------------------------------------------------------------------
 -- Carrega atividade médica 01 quando o procedimento exigir equipe médica
 -- sem anestesista e prestadores auxiliares.
 -- Saulo Rocha - PDA 289672 - 28/05/2009
 --------------------------------------------------------------------------
  for record in (select nvl(d.sn_exige_equipe_medica,'N') sn_equipe
                      , nvl(d.nr_auxiliar,0)              nr_auxiliar
                      , nvl(p.sn_ato_anestesico,'N')      sn_ato_anestesico
                   from procedimento_sus         p
                      , procedimento_detalhe_vigencia d
                  where p.cd_procedimento                 = d.cd_procedimento
                    and p.cd_procedimento                 = pProcedimento
                    and nvl(d.nr_auxiliar,0)              = 0
                    and nvl(p.sn_ato_anestesico,'N')      = 'N'
                    and pCompet BETWEEN d.dt_validade_inicial
                                    AND Nvl(d.dt_validade_final, pCompet)
                    and nvl(d.sn_exige_equipe_medica,'N') = 'S') loop
    Return '01';
  end loop;
  Return '';
END;
FUNCTION F_DEFINE_ATI_MED_ITEM (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result Varchar2(4000);
  pCompet Date;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCompet := PKG_XML.GetVarchar2(xml, 'pCompet');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_ATI_MED_ITEM_E(xml) THEN
        result:= F_DEFINE_ATI_MED_ITEM(xml, pProcedimento, pCompet);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_ATI_MED_ITEM_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_ITEM_CENTRO_CIRURGICO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_ITEM_CENTRO_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento in Varchar2) RETURN Boolean IS
nAchou Number;
BEGIN
    Select Count(*)
     Into nAchou
     From itreg_Fat
    Where Cd_Procedimento = pProcedimento
      And cd_mvto is not null
      And tp_mvto = 'Cirurgia'
      And cd_reg_fat = pRegFat;
   If nvl(nAchou,0) > 0  Then
        Return True;
   End If;
   Return False;
END;
FUNCTION F_ITEM_CENTRO_CIRURGICO (in_params in Clob, out_params out Clob) RETURN Boolean IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento Varchar2(4000);
  result Boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_ITEM_CENTRO_CIRURGICO_E(xml) THEN
        result:= F_ITEM_CENTRO_CIRURGICO(xml, pRegFat, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_ITEM_CENTRO_CIRURGICO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_CONTA_CIR_MULTIPLA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_CONTA_CIR_MULTIPLA (xml IN OUT NOCOPY PKG_XML.XmlContext
                                    ,pProcedimento In Varchar2 Default ''
                                    ,pCompet in Date) RETURN Boolean IS
Cursor cDadosProc Is Select SN_Cirurgia_Multipla
                           From Procedimento_Detalhe_vigencia pd
                          Where pd.Cd_Procedimento = pProcedimento
                            AND pCompet BETWEEN pd.dt_validade_inicial
                                            AND Nvl(pd.dt_validade_final, pCompet);
  vSN_Multipla Varchar2(1);
BEGIN
  -- Se for passado algum procedimento o teste será feito em cima dele
  -- se o procedimento for de cir. multipla, retorna TRUE.
  If pProcedimento Is Not Null Then
    Open cDadosProc;
      Fetch cDadosProc Into vSN_Multipla;
    Close cDadosProc;
      If vSN_Multipla = 'S' AND pProcedimento <> '0308010043' Then
          Return True;
      End if;
  End If;
  Return False;
END;
FUNCTION F_F_CONTA_CIR_MULTIPLA (in_params in Clob, out_params out Clob) RETURN Boolean IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento Varchar2(4000);
  pCompet date;
  result Boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCompet:= PKG_XML.GetDate(xml, 'pCompet');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_CONTA_CIR_MULTIPLA_E(xml) THEN
        result:= F_F_CONTA_CIR_MULTIPLA(xml, pProcedimento,pCompet);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_CONTA_CIR_MULTIPLA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PROC_PACOTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PROC_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Varchar2 IS
Cursor cPct Is Select SN_Procedimento_Faturado
                   From Procedimento_SUS_Detalhe
                  Where Cd_Procedimento = pProcedimento;
  vSN_P_Faturado Varchar2(1);
BEGIN
    Open cPct;
      Fetch cPct Into vSN_P_Faturado;
    Close cPct;
  If pProcedimento Is Not Null And Nvl(vSN_P_Faturado,'S') = 'N' Then
    Return 'S';
  Else
    Return 'N';
  End if;
END;
FUNCTION F_GET_PROC_PACOTE (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_PACOTE_E(xml) THEN
        result:= F_GET_PROC_PACOTE(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_PACOTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN IS
Cursor cSN_UTI Is Select SN_Diaria_UTI
                        From Procedimento_SUS_Detalhe
                       WHere Cd_Procedimento = pProcedimento;
  vSN_UTI Varchar2(1);
BEGIN
  Open cSN_UTI;
    Fetch cSN_UTI Into vSN_UTI;
  Close cSN_UTI;
  If vSN_UTI = 'S' Then
    Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_SN_UTI (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_UTI_E(xml) THEN
        result:= F_F_SN_UTI(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_UTI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_OPM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean IS
Cursor cOPM Is Select Nvl(pDetal.SN_Ortese_Protese,'N')       SN_OPM
                   From Procedimento_SUS                  pSUS
                      , Procedimento_SUS_Detalhe          pDetal
                  Where pSUS.Cd_Procedimento = pDetal.Cd_Procedimento
                    And pSUS.Cd_Procedimento = pProcedimento;
  vOPM Varchar2(1);
BEGIN
  Open  cOPM;
    Fetch cOPM Into vOPM;
  Close cOPM;
  If vOPM = 'S' Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_OPM (in_params in Clob, out_params out Clob) RETURN Boolean IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result Boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_OPM_E(xml) THEN
        result:= F_F_SN_OPM(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_OPM_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_ABRE_EQUIPE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_ABRE_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean IS
vSN_ExgEquipe   Varchar2(1);
  nAuxiliares     Varchar2(1);
  vSN_Anestesista Varchar2(1);
BEGIN
  Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, pProcedimento
                       ,vSN_ExgEquipe
                       ,nAuxiliares
                       ,vSN_Anestesista);
  If vSN_ExgEquipe = 'S' Then
    If nAuxiliares > 0 Or  vSN_Anestesista = 'S' Then
      Return True;
    End If;
  End If;
  Return False;
END;
FUNCTION F_F_SN_ABRE_EQUIPE (in_params in Clob, out_params out Clob) RETURN Boolean IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result Boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ABRE_EQUIPE_E(xml) THEN
        result:= F_F_SN_ABRE_EQUIPE(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ABRE_EQUIPE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_PROC_CIRURGICO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_PROC_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN IS
Cursor cDadosProc Is Select Nvl(SN_Proced_Cirurgico,'N') SN_Proced_Cirurgico
                         From Procedimento_SUS_Detalhe
                        Where Cd_Procedimento = pProcedimento;
  vSNProcCir    varchar(1);
BEGIN
    Open cDadosProc;
      Fetch cDadosProc Into vSNProcCir;
    Close cDadosProc;
  If vSNProcCir = 'S' Then
      Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_SN_PROC_CIRURGICO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PROC_CIRURGICO_E(xml) THEN
        result:= F_F_SN_PROC_CIRURGICO(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PROC_CIRURGICO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_DEFINE_VINCULO_CREDITO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_DEFINE_VINCULO_CREDITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pData in Date, pPrestador in Number,pTpCredito in Number) RETURN Number IS
cursor cPrestador is select nr_cnes
                            , sn_cessao_credito
                            , tp_vinculo
                            , nr_cpf_cgc
                         from prestador
                        where cd_prestador = pPrestador;
  Cursor cDadosProc Is Select SN_Hemoterapia
                         From Procedimento_Detalhe_Vigencia -- PDA 551096
                        Where Cd_Procedimento = pProcedimento
                          And TRUNC(pData, 'MM') BETWEEN dt_validade_inicial AND NVL(dt_validade_final, TRUNC(pData, 'MM'));
  rDadosProc  cDadosProc%RowType;
  rPrestador  cPrestador%RowType;
  Saida       Exception;
  nCdVinculo  Number;
Begin
    If pProcedimento Is Null Then
        Raise Saida;
    End If;
    Open  cPrestador;
      Fetch cPrestador Into rPrestador;
    Close cPrestador;
    Open cDadosProc;
      Fetch cDadosProc Into rDadosProc;
  Close cDadosProc;
/*
-- Recupera o valor vigente do procedimento -------------------------
  Dbamv.Prc_SUS_Valor_Vigente (pProcedimento
                              ,pData
                              ,'I'
                              ,nQtPtos
                              ,nVlSH
                              ,nVlSP
                              ,nVlSA
                              ,nVlTotal);
  ---------------------------------------------------------------------
*/
    If pTpCredito = 1 Then
        If length(rPrestador.Nr_Cpf_Cgc) > 11 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_7)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_7', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não possui um CPF em seu cadastro.%sAção: Verifique o cadastro dos prestadores.', arg_list(chr(10))),true);
        Else
            nCdVinculo:= 3;
        End if;
      If rDadosProc.SN_Hemoterapia = 'S' And Length(rPrestador.Nr_Cpf_Cgc) <= 11 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_8)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_8', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimentos de Hemoterapia não podem ser apurado para pessoa física.'),true);
      End If;
    End if;
    --
    If pTpCredito = 2 Then
        If rPrestador.Tp_Vinculo <> 'J' Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_9)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_9', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado como Pessoa Juridica.'),true);
        Elsif rPrestador.NR_CNES is null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_10)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_10', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não possui CNES em seu cadastro.'),true);
        Else
            nCdVinculo:= 3;
        End if;
  End if;
  --
    If pTpCredito = 3 And Fnc_FFIS_Define_Tipo_Vinculo(pPrestador) <> 1 Then
    nCdVinculo:= 2;
    End If;
    If pTpCredito = 3 And Fnc_FFIS_Define_Tipo_Vinculo(pPrestador) = 1 Then
    nCdVinculo:= 1;
    End If;
    If pTpCredito = 4 Then
      If rPrestador.NR_CNES is null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_10)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_10', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não possui CNES em seu cadastro.'),true);
      Else
        nCdVinculo:= 3;
      End if;
    End if;
    --
    If (dbamv.pkg_ffis_calc_aih.fnc_sus_max_valor_sp(pProcedimento,nvl(pData,sysdate)) = 0
        And dbamv.pkg_ffis_calc_aih.fnc_sus_max_valor_pontos(pProcedimento,nvl(pData,sysdate)) =0)
        And pTpCredito = 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_11)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_11', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento (%s) não permite apurar valor para o Profissional.', arg_list(pProcedimento)),true);
    End if;
  Return nCdVinculo;
End;
FUNCTION F_DEFINE_VINCULO_CREDITO (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pData Date;
  pPrestador Number;
  pTpCredito Number;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pData:= PKG_XML.GetDate(xml, 'pData');
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    pTpCredito:= PKG_XML.GetNumber(xml, 'pTpCredito');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_VINCULO_CREDITO_E(xml) THEN
        result:= F_DEFINE_VINCULO_CREDITO(xml, pProcedimento, pData, pPrestador, pTpCredito);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_VINCULO_CREDITO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_LAQUEADURA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_LAQUEADURA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN IS
Cursor cLaqueadura is    Select Nvl(SN_Laqueadura,'N') SN_Laqueadura
                          From Procedimento_SUS_Detalhe
                         Where Cd_Procedimento = pProcedimento;
    vSnLaqueadura varchar2(1);
Begin
    Open cLaqueadura;
      Fetch cLaqueadura Into vSnLaqueadura;
    Close cLaqueadura;
  If vSnLaqueadura = 'S' Then
      Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_LAQUEADURA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_LAQUEADURA_E(xml) THEN
        result:= F_F_LAQUEADURA(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_LAQUEADURA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_TOTAL_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_TOTAL_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number) RETURN Number IS
nQtUTI Number;
BEGIN
  Select Sum(Nvl(Qt_Lancada,0))
    Into nQtUTI
    From Diaria_UTI_SUS
   Where Cd_Reg_Fat    = pRegFat
    And Cd_Lancamento = pLacto;
  Return nQtUTI;
Exception
    When NO_DATA_FOUND Then
    Return 0;
END;
FUNCTION F_F_TOTAL_UTI (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLacto Number;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_TOTAL_UTI_E(xml) THEN
        result:= F_F_TOTAL_UTI(xml, pRegFat, pLacto);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_TOTAL_UTI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_TP_COMPLEXIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_TP_COMPLEXIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pModo In Varchar2) RETURN VARCHAR2 IS
Cursor cComplexidade Is
    select tp_complexidade_procedimento
      from procedimento_sus_complexidade
     where cd_procedimento = pProcedimento
       and sn_ativo = 'S';
  vDs Varchar2(200);
BEGIN
  Open cComplexidade;
    Fetch cComplexidade Into vDs;
  Close cComplexidade;
    -- Descritivo
    If pModo = 'D' Then
      If vDs = 'MC' Then
        vDs:= 'Mídia Complexidade';
      ElsIf vDs = 'AC' Then
        vDs:= 'Alta Complexidade';
    Else
      vDs:= 'não se aplica';
    End If;
    Return vDs;
    Else
      Return vDs;
    End If;
END;
FUNCTION F_GET_TP_COMPLEXIDADE (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pModo Varchar2(4000);
  result VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pModo:= PKG_XML.GetVarchar2(xml, 'pModo');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_TP_COMPLEXIDADE_E(xml) THEN
        result:= F_GET_TP_COMPLEXIDADE(xml, pProcedimento, pModo);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_TP_COMPLEXIDADE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_RET_INCREMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_RET_INCREMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pDate in Date) RETURN NUMBER IS
Cursor cIncremento Is
     Select Procedimento_SUS_Habilitacao.Vl_Percentual_SH
       From Procedimento_SUS_Habilitacao
          , Empresa_Habilitacoes_SUS
          , (Select PHAB.Cd_Procedimento               Cd_Procedimento
                  , Max(PHAB.Nr_Percentual_Incremento) Nr_Percentual_Incremento
               From Procedimento_SUS_Habilitacao PHAB
                  , Empresa_Habilitacoes_SUS     EHAB
              Where PHAB.Cd_Habilitacao      = EHAB.Cd_Habilitacao
                And PHAB.SN_Incremento       = 'S'
              Group By PHAB.Cd_Procedimento) Max_Incremento
      Where Empresa_Habilitacoes_SUS.Cd_Habilitacao      = Procedimento_SUS_Habilitacao.Cd_Habilitacao
        And Empresa_Habilitacoes_SUS.Cd_Multi_Empresa    = xml.multiEmpresa
        And Max_Incremento.Cd_Procedimento               = Procedimento_SUS_Habilitacao.Cd_Procedimento
        And Max_Incremento.Nr_Percentual_Incremento      = Procedimento_SUS_Habilitacao.Nr_Percentual_Incremento
        And Procedimento_SUS_Habilitacao.SN_Incremento   = 'S'
        And Procedimento_SUS_Habilitacao.Cd_Procedimento = pProcedimento
        And Trunc(pDate,'MM') < Trunc(Nvl(Empresa_Habilitacoes_SUS.Dt_Validade_Final,Sysdate),'MM');
  nPerc Number;
BEGIN
  Open cIncremento;
    Fetch cIncremento Into nPerc;
  Close cIncremento;
  Return nPerc;
END;
FUNCTION F_RET_INCREMENTO (in_params in Clob, out_params out Clob) RETURN NUMBER IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pDate Date;
  result NUMBER;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pDate:= PKG_XML.GetDate(xml, 'pDate');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_INCREMENTO_E(xml) THEN
        result:= F_RET_INCREMENTO(xml, pProcedimento, pDate);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_INCREMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>FNC_RET_TIPO_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_RET_TIPO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pCompet in Date) RETURN VARCHAR2 IS
Cursor cTpPrestador Is
     select  decode(sn_exige_cpf_cbo,'S','CPF/CBO'
             ,decode(sn_exige_cnes_hosp,'S','CNES/HOSP',decode(sn_exige_cnes,'S','CNES/CNPJ'
             ,decode(sn_ortese_protese,'S','CNPJ',null)))) PREST
--         , tp_complexidade_procedimento
      from dbamv.procedimento_detalhe_vigencia
     where (nvl(sn_aih_principal, 'N') = 'S' or nvl(sn_aih_secundario, 'N') = 'S' or nvl(sn_aih_especial, 'N') = 'S')
       and nvl(sn_cirurgia_multipla, 'N') = 'N'
       and cd_procedimento = pProcedimento
       and trunc(pCompet, 'MM') between dt_validade_inicial
                             and nvl(dt_validade_final, trunc(pCompet, 'MM'));
  vTipo Varchar2(200);
BEGIN
  Open cTpPrestador;
    Fetch cTpPrestador Into vTipo;
  Close cTpPrestador;
  Return vTipo;
END;
FUNCTION F_RET_TIPO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pCompet Date;
  result VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
      pCompet:= PKG_XML.GetDate(xml, 'pCompet');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_TIPO_PRESTADOR_E(xml) THEN
        result:= F_RET_TIPO_PRESTADOR(xml, pProcedimento, pCompet);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_TIPO_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_ULTIMA_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_ULTIMA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number IS
nRegFat number;
begin
   SELECT max(reg_fat.CD_REG_FAT) REG_FAT
     into nRegFat
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_ATENDIMENTO   = nAtend;
   return(nRegFat);
end;
FUNCTION F_GET_ULTIMA_CONTA (in_params in Clob, out_params out Clob) RETURN number IS
  xml PKG_XML.XmlContext;
  nAtend number;
  result number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ULTIMA_CONTA_E(xml) THEN
        result:= F_GET_ULTIMA_CONTA(xml, nAtend);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ULTIMA_CONTA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_IDADE_PACIENTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
FUNCTION F_GET_IDADE_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN NUMBER IS
  Cursor cIdadePaciente Is Select Atendime.cd_paciente, Reg_Fat.Dt_Inicio
                             From Atendime
                                , Reg_Fat
                            Where Atendime.Cd_Atendimento = Reg_Fat.Cd_Atendimento
                              And Reg_Fat.Cd_Reg_Fat = pRegFat;
  rIdadePaciente cIdadePaciente%ROWTYPE;
BEGIN
  Open cIdadePaciente;
    Fetch cIdadePaciente Into rIdadePaciente;
  Close cIdadePaciente;
  Return dbamv.PKG_SUS_REGRA_PACIENTE.F_PACIENTE_IDADE(rIdadePaciente.cd_paciente, rIdadePaciente.Dt_Inicio); -- PDA 516516
END;
FUNCTION F_GET_IDADE_PACIENTE (in_params in Clob, out_params out Clob) RETURN NUMBER IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result NUMBER;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_IDADE_PACIENTE_E(xml) THEN
        result:= F_GET_IDADE_PACIENTE(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_IDADE_PACIENTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In VARCHAR2) RETURN BOOLEAN IS
Cursor cParto Is Select Nvl(SN_Parto,'N')
                     From Procedimento_SUS_Detalhe
                    Where Cd_Procedimento = pProcedimento;
  vSN_Parto Varchar2(1);
BEGIN
  Open cParto;
    Fetch cParto Into vSN_Parto;
  Close cParto;
  If vSN_Parto = 'S' Then
      Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_SN_PARTO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento VARCHAR2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVARCHAR2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PARTO_E(xml) THEN
        result:= F_F_SN_PARTO(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PARTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PROC_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PROC_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2 IS
Cursor cRealizado Is Select Cd_Procedimento_Realizado
                         From Reg_Fat
                        Where Cd_Reg_Fat = pRegFat;
  vRealizado Procedimento_SUS.Cd_Procedimento%Type;
BEGIN
  Open cRealizado;
    Fetch cRealizado Into vRealizado;
  Close cRealizado;
  Return vRealizado;
END;
FUNCTION F_GET_PROC_REALIZADO (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_REALIZADO_E(xml) THEN
        result:= F_GET_PROC_REALIZADO(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_REALIZADO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PROC_DIARIA_IDOSO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PROC_DIARIA_IDOSO (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN Varchar2 IS
Cursor cProcDiaria Is Select Valor
                          From Configuracao
                         Where Cd_Sistema = 'FFIS'
                           And Chave = 'CD_PROC_DIARIA_IDOSO'
                           And Cd_Multi_Empresa = xml.multiEmpresa;
  vProcDiaria Procedimento_SUS.Cd_Procedimento%Type;
BEGIN
    Open cProcDiaria;
      Fetch cProcDiaria Into vProcDiaria;
  Close cProcDiaria;
  Return vProcDiaria;
END;
FUNCTION F_GET_PROC_DIARIA_IDOSO (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
  xml PKG_XML.XmlContext;
  result Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_DIARIA_IDOSO_E(xml) THEN
        result:= F_GET_PROC_DIARIA_IDOSO(xml);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_DIARIA_IDOSO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_SETOR_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_SETOR_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN Number IS
Cursor cSetor Is Select Cd_Setor
                     From ItReg_Fat
                    Where Cd_Reg_Fat = pRegFat
                      And SN_Proced_Realizado = 'S';
  nSetor Number;
BEGIN
  Open cSetor;
    Fetch cSetor Into nSetor;
  Close cSetor;
  Return nSetor;
END;
FUNCTION F_GET_SETOR_REALIZADO (in_params in Clob, out_params out Clob) RETURN Number IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_SETOR_REALIZADO_E(xml) THEN
        result:= F_GET_SETOR_REALIZADO(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_SETOR_REALIZADO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_PRESTADOR_AIH</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_PRESTADOR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN NUMBER IS
Cursor cPrestador Is Select Cd_Prestador_AIH
                         From Multi_Empresas
                        Where Cd_Multi_Empresa = xml.multiEmpresa;
  nPrestador Number;
BEGIN
  Open cPrestador;
    Fetch cPrestador Into nPrestador;
  Close cPrestador;
  Return nPrestador;
END;
FUNCTION F_GET_PRESTADOR_AIH (in_params in Clob, out_params out Clob) RETURN NUMBER IS
  xml PKG_XML.XmlContext;
  result NUMBER;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRESTADOR_AIH_E(xml) THEN
        result:= F_GET_PRESTADOR_AIH(xml);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRESTADOR_AIH_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DIAS_AIH_5</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DIAS_AIH_5 (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pTipo In Varchar2 Default 'C') RETURN NUMBER IS
Cursor cDados Is Select To_Number(To_Char(Dt_Final,'DD'))-1
                        , Cd_Mot_Alt
                     From Reg_Fat
                    Where Cd_Reg_Fat = pRegFat;
  nDias   Number;
  nMotivo Number;
BEGIN
  Open cDados;
    Fetch cDados Into nDias,nMotivo;
  Close cDados;
  If pTipo = 'C' Then
    If nMotivo = 27 Or Substr(nMotivo,1,1) In ('2','3','4') Then
      nDias:= nDias + 1;
    End if;
  End IF;
  Return nDias;
END;
FUNCTION F_GET_DIAS_AIH_5 (in_params in Clob, out_params out Clob) RETURN NUMBER IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pTipo Varchar2(4000);
  result NUMBER;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pTipo:= PKG_XML.GetVarchar2(xml, 'pTipo');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_AIH_5_E(xml) THEN
        result:= F_GET_DIAS_AIH_5(xml, pRegFat, pTipo);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_AIH_5_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_DT_INTERNACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_DT_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE IS
Cursor cDtInt Is Select Dt_Inicio
                     From Reg_Fat
                    Where Cd_Reg_Fat = pRegFat;
  dDate Date;
BEGIN
    Open cDtInt;
      Fetch cDtInt Into dDate;
    Close cDtInt;
  Return Trunc(dDate);
END;
FUNCTION F_GET_DT_INTERNACAO (in_params in Clob, out_params out Clob) RETURN DATE IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result DATE;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DT_INTERNACAO_E(xml) THEN
        result:= F_GET_DT_INTERNACAO(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DT_INTERNACAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_FECHADA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_FECHADA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN BOOLEAN IS
Cursor C Is Select SN_Fechada
                From Reg_Fat
               Where Cd_Reg_Fat = pRegFat;
  vSN Varchar2(1);
BEGIN
    Open C;
      Fetch C Into vSN;
  Close C;
  If vSN = 'S' Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_FECHADA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_FECHADA_E(xml) THEN
        result:= F_F_SN_FECHADA(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_FECHADA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>GET_CBO_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_GET_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number, pProcedimento in Varchar2, pCompet in Date) RETURN Varchar2 IS
    Cursor cCboPrest is
      Select distinct cbo.Cd_CBOS
--           , cbo.Ds_CBOS
        From Dbamv.CBO
           , Dbamv.Multi_Empresas_CBO
           , Dbamv.prestador_cbo
           , Dbamv.Procedimento_Cbo_Vigencia pcv
       Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
         And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
         And Multi_Empresas_Cbo.cd_cbo           = pcv.cd_cbo
         And prestador_cbo.cd_multi_empresa      = Multi_Empresas_Cbo.cd_multi_empresa
         And pcv.cd_procedimento = pProcedimento
         and pCompet between pcv.dt_validade_inicial
                      and nvl(pcv.dt_validade_final, pCompet)
         And prestador_cbo.cd_prestador          = pPrestador
         And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
         And Multi_Empresas_CBO.SN_Ativo         = 'S'
         and prestador_cbo.sn_regra_vinculo  = 'S'
         -- Op 5624
         and pCompet between prestador_cbo.dt_validade_inicial
                      and nvl(prestador_cbo.dt_validade_final, pCompet);
/*
   Select distinct cbo.Cd_CBOS
      From Dbamv.CBO
         , Dbamv.Multi_Empresas_CBO
         , Dbamv.prestador_cbo
         , Dbamv.Procedimento_Sus_Cbo
     Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
       And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
       And Multi_Empresas_Cbo.cd_cbo           = procedimento_sus_cbo.cd_cbos
       And procedimento_sus_cbo.cd_procedimento = pProcedimento
       And prestador_cbo.cd_prestador          = pPrestador
       And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
       And Multi_Empresas_CBO.SN_Ativo         = 'S'
       And prestador_cbo.sn_ativo              = 'S'  -- PDA 348791
       And procedimento_sus_cbo.sn_ativo       = 'S'  -- PDA 348791
       And CBO.Cd_CBOS Not In ('000001','000002');
*/
 --[ início PDA 368158 ]
  Cursor cQualquerCbo is
    Select distinct cbo.Cd_CBOS
      From Dbamv.CBO
         , Dbamv.Multi_Empresas_CBO
         , Dbamv.prestador_cbo
         , Dbamv.Procedimento_cbo_vigencia pcv
     Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
       And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
       And Multi_Empresas_Cbo.cd_cbo           = pcv.cd_cbo
       and pCompet between pcv.dt_validade_inicial and nvl(pcv.dt_validade_final, pCompet)
       And prestador_cbo.cd_prestador          = pPrestador
       And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
       And Multi_Empresas_CBO.SN_Ativo         = 'S'
       And prestador_cbo.sn_ativo              = 'S'
       And CBO.Cd_CBOS Not In ('000001','000002');
/*
    Select distinct cbo.Cd_CBOS
      From Dbamv.CBO
         , Dbamv.Multi_Empresas_CBO
         , Dbamv.prestador_cbo
         , Dbamv.Procedimento_Sus_Cbo
     Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
       And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
       And Multi_Empresas_Cbo.cd_cbo           = procedimento_sus_cbo.cd_cbos
       And prestador_cbo.cd_prestador          = pPrestador
       And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
       And Multi_Empresas_CBO.SN_Ativo         = 'S'
       And prestador_cbo.sn_ativo              = 'S'
       And procedimento_sus_cbo.sn_ativo       = 'S'
       And CBO.Cd_CBOS Not In ('000001','000002');
*/
  -- [ Fim PDA 368158 ]
  Cursor cCboObriga is
    Select nvl(SN_Exige_CPF_CBO, 'N')
      From procedimento_detalhe_vigencia
     where cd_procedimento = pProcedimento
       and pCompet between dt_validade_inicial and nvl(dt_validade_final, pCompet);
  --
  vSnObriga        Varchar2(1);
  vCBO        CBO.Cd_CBOS%Type;
  --
BEGIN
      Open  cCboObriga;
        Fetch cCboObriga Into vSnObriga;
      Close cCboObriga;
      If vSnObriga = 'S' And FNC_FFIS_Define_Tipo_Vinculo(pPrestador) <> 1 then
        If pProcedimento = '0802020011' Then
          Open  cQualquerCbo;
            Fetch cQualquerCbo into vCBO;
          Close cQualquerCbo;
          Return vCBO;
        End If;
        Open  cCboPrest;
          Fetch cCboPrest into vCBO;
        Close cCboPrest;
        Return vCBO;
      Else
          Return Null;
      End if;
END;
FUNCTION F_GET_CBO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
  xml PKG_XML.XmlContext;
  pPrestador Number;
  pProcedimento Varchar2(4000);
  pCompet Date;
  result Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCompet:= PKG_XML.GetDate(xml, 'pCompet');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_CBO_PRESTADOR_E(xml) THEN
        result:= F_GET_CBO_PRESTADOR(xml, pPrestador, pProcedimento, pCompet);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_CBO_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_PAGO_POR_DIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
FUNCTION F_F_SN_PAGO_POR_DIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN IS
Cursor cProcedimento Is Select Nvl(SN_Pago_Por_Dia,'N') SN_Pago_Por_Dia -- PDA 554017 (início/Fim).
                            From Procedimento_SUS_Detalhe
                           Where Cd_Procedimento = pProcedimento;
  vSN Varchar2(1);
BEGIN
    Open cProcedimento;
      Fetch cProcedimento Into vSN;
    Close cProcedimento;
    If vSN = 'S' Then
    Return True;
    Else
    Return False;
    End If;
END;
FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN IS
Cursor cProcedimento Is Select Nvl(SN_Pago_Por_Dia_Util,'N') SN_Pago_Por_Dia -- PDA 554017 (início/Fim).
                            From Procedimento_SUS_Detalhe
                           Where Cd_Procedimento = pProcedimento;
  vSN Varchar2(1);
BEGIN
    Open cProcedimento;
      Fetch cProcedimento Into vSN;
    Close cProcedimento;
    If vSN = 'S' Then
    Return True;
    Else
    Return False;
    End If;
END;
FUNCTION F_F_SN_PAGO_POR_DIA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_E(xml) THEN
        result:= F_F_SN_PAGO_POR_DIA(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_UTIL_E(xml) THEN
        result:= F_F_SN_PAGO_POR_DIA_UTIL(xml, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_UTIL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_AIH_CONTINUACAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_AIH_CONTINUACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In NUmber) RETURN BOOLEAN IS
Cursor cReg Is Select Decode(Nr_Identificacao,'5','S','N') Nr_Identificacao
                   From Reg_Fat
                  Where Cd_Reg_Fat = pRegFat;
  vSN Varchar2(1);
BEGIN
    Open cReg;
      Fetch cReg Into vSN;
    Close cReg;
  If vSN = 'S' Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_AIH_CONTINUACAO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pRegFat NUmber;
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNUmber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_AIH_CONTINUACAO_E(xml) THEN
        result:= F_F_AIH_CONTINUACAO(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_AIH_CONTINUACAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_COMPET_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_COMPET_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE IS
Cursor cCompet Is Select ft.Dt_Competencia
                     From Remessa_Fatura re
                        , Fatura ft
                        , Reg_Fat rg
                    Where re.Cd_Remessa = rg.Cd_Remessa
                      And re.Cd_Fatura  = ft.Cd_Fatura
                      And rg.Cd_Reg_Fat = pRegFat;
  dCompet Date;
BEGIN
     Open cCompet;
       Fetch cCompet into dCompet;
     Close cCompet;
     If dCompet Is Null Then
          Return Null;
     Else
          Return dCompet;
     End If;
END;
FUNCTION F_F_COMPET_CONTA (in_params in Clob, out_params out Clob) RETURN DATE IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result DATE;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_COMPET_CONTA_E(xml) THEN
        result:= F_F_COMPET_CONTA(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_COMPET_CONTA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_TEM_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_TEM_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN IS
nAchou_DA Number;
BEGIN
  Select Count(*)
    Into nAchou_DA
    From ItReg_Fat it
       , Procedimento_detalhe_vigencia pd
   Where it.cd_reg_fat = pRegFat
     and pd.cd_procedimento = it.cd_procedimento
     and trunc(it.dt_lancamento) between pd.dt_validade_inicial
                                 and nvl(pd.dt_validade_final,it.dt_lancamento)
     and pd.sn_diaria_acompanhante = 'S';
  If nAchou_DA > 0 Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_TEM_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_TEM_DA_E(xml) THEN
        result:= F_F_SN_TEM_DA(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_TEM_DA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>F_SN_ATUALIZA_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  FUNCTION F_F_SN_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN IS
Cursor cDA Is Select Nvl(Nr_Diaria_Acompanhante,0) Nr_Diaria_Acompanhante
                     , Sum(Qt_Lancamento) Qt_Lancamento
                  From Reg_Fat r
                     , ItReg_Fat i
                 Where r.Cd_Reg_Fat = i.Cd_Reg_Fat
                   And r.Cd_Reg_Fat = pRegFat
                   And i.Cd_Procedimento In (Select Cd_Procedimento
                                               From Procedimento_SUS_Detalhe
                                              Where SN_Diaria_Acompanhante = 'S')
                 Group By Nr_Diaria_Acompanhante;
  nConta   Number;
  nTotalIT Number;
BEGIN
  Open cDA;
    Fetch cDa Into nConta,nTotalIT;
  Close cDA;
  If nTotalIT <> nConta Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_ATUALIZA_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  result BOOLEAN;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ATUALIZA_DA_E(xml) THEN
        result:= F_F_SN_ATUALIZA_DA(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ATUALIZA_DA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
   return result;
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_NR_AIH</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_NR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext, P_REG_FAT   NUMBER,
                         PNR_AIH     VARCHAR2,
                         PTIPO_AIH   VARCHAR2,
                         PGUIA_ANT   VARCHAR2,
                         PGUIA_POS   VARCHAR2) IS
Cursor cGuia Is select a.cd_atendimento
                    from reg_fat r
                       , reg_fat espelho
                       , atendime a
                       , atendime a_espelho
                       , responsa
                       , paciente p
                    where r.cd_reg_fat = P_REG_FAT
                      and r.nr_aih_posterior = espelho.nr_guia
                      and r.cd_atendimento = a.cd_atendimento
                      and espelho.cd_atendimento = a_espelho.cd_atendimento
                      and responsa.cd_atendimento(+) = espelho.cd_atendimento
                      and p.cd_paciente = a.cd_paciente
                      and a.cd_atendimento <> a_espelho.cd_atendimento
                      and a.cd_paciente <> a_espelho.cd_paciente
                      and p.nm_paciente <> nvl(responsa.nm_responsavel,p.nm_paciente) ;
  vAtendimento   atendime.cd_atendimento%type;
begin
   if    ptipo_aih = 'P' then
       Open cGuia;
         Fetch cGuia Into vAtendimento;
       Close cGuia;
    If vAtendimento Is Not Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_12)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_12', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: O numero da AIH já consta em outro atendimento, para outro paciente! (ATENDIMENTO %s).', arg_list(to_char(vAtendimento))),True);
    End If;
    if PGUIA_POS IS NOT NULL AND PNR_AIH IS NOT NULL then
      if PNR_AIH = PGUIA_POS then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_13)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_13', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número de AIH Posterior não pode ser igual ao Número da guia AIH.'),True);
      end if;
    end if;
  end if;
  If PTIPO_AIH = 'A' Then
      if PGUIA_ANT IS NOT NULL AND PNR_AIH IS NOT NULL then
      if PNR_AIH = PGUIA_ANT then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_14)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_14', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número de AIH Anterior não pode ser igual ao Número da AIH.'),True);
      end if;
    end if;
  End If;
end;
PROCEDURE P_VALIDA_NR_AIH (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  P_REG_FAT NUMBER;
  PNR_AIH VARCHAR2(4000);
  PTIPO_AIH VARCHAR2(4000);
  PGUIA_ANT VARCHAR2(4000);
  PGUIA_POS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    P_REG_FAT:= PKG_XML.GetNUMBER(xml, 'P_REG_FAT');
    PNR_AIH:= PKG_XML.GetVARCHAR2(xml, 'PNR_AIH');
    PTIPO_AIH:= PKG_XML.GetVARCHAR2(xml, 'PTIPO_AIH');
    PGUIA_ANT:= PKG_XML.GetVARCHAR2(xml, 'PGUIA_ANT');
    PGUIA_POS:= PKG_XML.GetVARCHAR2(xml, 'PGUIA_POS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_AIH_E(xml) THEN
        P_VALIDA_NR_AIH(xml, P_REG_FAT, PNR_AIH, PTIPO_AIH, PGUIA_ANT, PGUIA_POS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_AIH_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>HABILITA_DADOS_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_HABILITA_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, vProcedimento in varchar2) IS
Cursor cParto (pnCdProc In Varchar2) Is
      Select nvl(SN_PARTO, 'N')
        From procedimento_sus_detalhe
       Where cd_procedimento = pnCdProc;
   vParto      procedimento_sus_detalhe.SN_PARTO%type;
lParto boolean;
begin
     Open cParto(vProcedimento);
     Fetch cParto into vParto;
     Close cParto;
   if Nvl(vParto,'N') = 'S' then
      lParto := True;
   else
      lParto := False;
   end if;
   if lParto then
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','UPDATE_ALLOWED',true);
   else
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','ENABLED',false);
   end if;
end;
PROCEDURE P_HABILITA_DADOS_PARTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  vProcedimento varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    vProcedimento:= PKG_XML.Getvarchar2(xml, 'vProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DADOS_PARTO_E(xml) THEN
        P_HABILITA_DADOS_PARTO(xml, vProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DADOS_PARTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_DIA_ACOMPANHANTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDiarias in Number, cg$ctrl IN OUT NOCOPY CG$CTRLRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
  nDias   Number;     -- Numero de Dias de  Internacao
  nUti    Number;     -- Total de UTI/UCI
  nTotal  Number;     -- Total de Diarias
BEGIN
  -- Calcula os dias do período
  -- PDA 550328 início.
  -- nDias:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT);
  nDias:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT, pTipo => 'D');
  -- PDA 550328 Fim.
  -- Retorna o lançamento de UTI/UCI
  nUti:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
  -- Calcula os dias da conta para cobrança
  -- PDA 550328 início.
  -- nTotal := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT) - Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
  nTotal := nDias - nUti;
  -- PDA 550328 Fim.
  -- Limita em 99 dias caso ultrapasse -----
  If nTotal > 99 Then
    nTotal:= 99;
  Elsif Nvl(nTotal,0) < 0 Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_15', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: cobrança de diárias de UTI superior ao permitido aos dias de Internação da conta.%sAção: Verifique a possibilidade de existir duplicidade nos lançamentos.'
    , arg_list(chr(10))),false);
    nTotal:= 0;
  End If;
  ------------------------------------------
  if  pDiarias > nTotal then
    CG$CTRL.GO_ACOMPANHANTE := 'S';
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'), pkg_rmi_traducao.extrair_pkg_msg(
  'MSG_16', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Quantidade de diárias de acompanhante superior ao permitido.%sMotivo: lançamento de D.A: %s | lançamento de UTI: %s | Máx. Permitido: %s.%sAção: Recalcular a quantidade de diárias de acompanhante.'
  , arg_list(chr(10), pDiarias, nUTI, nTotal, chr(10))),True);
  end if;
END;
PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pDiarias Number;
  cg$ctrl CG$CTRLRec;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pDiarias:= PKG_XML.GetNumber(xml, 'pDiarias');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    CG$CTRL.GO_ACOMPANHANTE:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DIA_ACOMPANHANTE_E(xml) THEN
        P_VALIDA_DIA_ACOMPANHANTE(xml, pRegFat, pDiarias, CG$CTRL, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DIA_ACOMPANHANTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE', CG$CTRL.GO_ACOMPANHANTE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_PONTO_PROFISSIONAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
   if REG_FAT.CD_PROCEDIMENTO_REALIZADO is null or
      REG_FAT.DT_FINAL             is null or
      REG_FAT.CD_MOT_ALT           is null then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_17)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_17', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não foi possível Efetuar Cálculo de Pontos Profissionais.%sMotivo: não existem dados suficientes para o calculo.', arg_list(chr(10))),FALSE);
   end if;
END;
PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
    REG_FAT.CD_MOT_ALT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_MOT_ALT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PONTO_PROFISSIONAL_E(xml) THEN
        P_VALIDA_PONTO_PROFISSIONAL(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PONTO_PROFISSIONAL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_MOT_ALT', REG_FAT.CD_MOT_ALT);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Define_Prestador_Auto</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_PRESTADOR_AUTO (XML IN OUT NOCOPY PKG_XML.XMLCONTEXT
                                      ,NCDSETOR      IN      NUMBER
                                      ,NCDPRESTADOR  IN OUT  NOCOPY NUMBER
                                      ,PPROCEDIMENTO IN      VARCHAR2
                                      ,PCBO          IN OUT  VARCHAR2) IS
  CURSOR C_AUTO1(P_PROCEDIMENTO VARCHAR2) IS
      SELECT CD_PRESTADOR
        FROM AUTOMATIZA_LANCAMENTO_AIH ALAIH
       WHERE CD_GRUPO_PROCEDIMENTO          = SUBSTR(P_PROCEDIMENTO,1,2)
         AND CD_SUB_GRUPO_PROCEDIMENTO      = SUBSTR(P_PROCEDIMENTO,3,2)
         AND CD_ORGANIZA_GRUPO_PROCEDIMENTO = SUBSTR(P_PROCEDIMENTO,5,2)
         AND CD_PROCEDIMENTO                IS NULL
         AND CD_MULTI_EMPRESA               = DBAMV.PKG_MV2000.LE_EMPRESA;
    CURSOR C_AUTO2(P_PROCEDIMENTO VARCHAR2) IS
      SELECT CD_PRESTADOR,
             CD_CBO_PRESTADOR
        FROM DBAMV.AUTOMATIZA_LANCAMENTO_AIH ALAIH
       WHERE CD_PROCEDIMENTO                = P_PROCEDIMENTO
         AND CD_MULTI_EMPRESA               = DBAMV.PKG_MV2000.LE_EMPRESA;
 N_PRESTADOR        NUMBER;
 V_CBO_PRESTADOR    VARCHAR2(6);
 ESAIDA             EXCEPTION;
BEGIN
     IF PKG_MV2000.LE_CLIENTE = 406 THEN
      SELECT DISTINCT SET_EXA.CD_PRESTADOR
        INTO NCDPRESTADOR
        FROM SET_EXA SET_EXA
       WHERE SET_EXA.CD_SETOR = NCDSETOR;
   ELSE
      OPEN C_AUTO2(PPROCEDIMENTO);
        FETCH C_AUTO2 INTO N_PRESTADOR,V_CBO_PRESTADOR;
      CLOSE C_AUTO2;
      IF NVL(N_PRESTADOR,0) = 0 THEN
        OPEN C_AUTO1(PPROCEDIMENTO);
          FETCH C_AUTO1 INTO N_PRESTADOR;
        CLOSE C_AUTO1;
      END IF;
      IF NVL(N_PRESTADOR,0) = 0 THEN
        RAISE ESAIDA;
      END IF;
      NCDPRESTADOR:= N_PRESTADOR;
      PCBO:= V_CBO_PRESTADOR;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        NULL;
   WHEN ESAIDA THEN
        NULL;
END;
PROCEDURE P_DEFINE_PRESTADOR_AUTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  nCdSetor number;
  nCdPrestador number;
  pProcedimento Varchar2(4000);
  pCbo Varchar2(6);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nCdSetor:= PKG_XML.Getnumber(xml, 'nCdSetor');
    nCdPrestador:= PKG_XML.Getnumber(xml, 'nCdPrestador');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCbo:= PKG_XML.GetVarchar2(xml, 'pCbo');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUTO_E(xml) THEN
        P_DEFINE_PRESTADOR_AUTO(xml, nCdSetor, nCdPrestador, pProcedimento,pCbo);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.Setnumber(xml, 'nCdPrestador', nCdPrestador);
    PKG_XML.SetVarchar2(xml, 'pCbo', pCbo);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CONTA_CLOSED</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CONTA_CLOSED (xml IN OUT NOCOPY PKG_XML.XmlContext, vClosed in varchar2, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec) IS
BEGIN
    if vClosed = 'S' then
         Pkg_ffis_M_LACTO_AIH_P321.P_STATUS_LOCK(xml, 'BLC', CG$CTRL);   -- Define Lock de Bloco
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_ESPEC_SUS','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_CARATER_ATENDIMENTO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_REALIZADO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_SOLICITADO','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.TP_MODALIDADE_ATENDIMENTO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_IDENTIFICACAO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_SEQAIH5','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_REMESSA','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_INICIO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_FINAL','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_MOT_ALT','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_EMISSAO_LAUDO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_ANTERIOR','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_POSTERIOR','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_PRINCIPAL','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_SECUNDARIO','UPDATE_ALLOWED',false);
     PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_CAUSAS_ASSOCIADAS','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_RESPONSAVEL','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_AUDITOR','UPDATE_ALLOWED',false);
       if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','ENABLED') = 'TRUE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','UPDATE_ALLOWED',false);
       end if;
       PKG_XML.SetPropBoolean(xml, 'BLOCK','REG_FAT','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','DELETE_ALLOWED',false);
    else
         Pkg_ffis_M_LACTO_AIH_P321.P_STATUS_LOCK(xml, Null, CG$CTRL);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_ESPEC_SUS','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_CARATER_ATENDIMENTO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_REALIZADO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_SOLICITADO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.TP_MODALIDADE_ATENDIMENTO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_IDENTIFICACAO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_SEQAIH5','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_REMESSA','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_INICIO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_FINAL','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_MOT_ALT','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_EMISSAO_LAUDO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_ANTERIOR','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_POSTERIOR','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_PRINCIPAL','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_SECUNDARIO','UPDATE_ALLOWED',true);
     PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_CAUSAS_ASSOCIADAS','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_RESPONSAVEL','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_AUDITOR','UPDATE_ALLOWED',true);
       if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','ENABLED') = 'TRUE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','UPDATE_ALLOWED',true);
       end if;
       PKG_XML.SetPropBoolean(xml, 'BLOCK','REG_FAT','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','DELETE_ALLOWED',true);
    end if;
      -- PDA 155918(início) - Habilita/Desabilita o campo nr_guia de acordo com a configuração "Mutirão"
      --                      da remessa SUS
      Pkg_ffis_M_LACTO_AIH_P321.P_HABILITA_DESABILITA_GUIA(xml, pbLimpaCampo => false, reg_fat => REG_FAT);
       -- PDA 155918(Fim)
END;
PROCEDURE P_CONTA_CLOSED (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  vClosed varchar2(4000);
  reg_fat REG_FATRec;
  cg$ctrl CG$CTRLRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    vClosed:= PKG_XML.Getvarchar2(xml, 'vClosed');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.SN_FECHADA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.SN_FECHADA');
    CG$CTRL.STATUS_LOCK:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CONTA_CLOSED_E(xml) THEN
        P_CONTA_CLOSED(xml, vClosed, REG_FAT, CG$CTRL);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CONTA_CLOSED_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.SN_FECHADA', REG_FAT.SN_FECHADA);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK', CG$CTRL.STATUS_LOCK);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DADOS_PARTO_DEFAULT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DADOS_PARTO_DEFAULT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number
                              ,pProcedimento in varchar2, it_parto IN OUT NOCOPY IT_PARTORec) IS
Cursor cParto Is Select Nvl(SN_Parto,'N')
                     From Procedimento_SUS_Detalhe
                    Where Cd_Procedimento = pProcedimento;
  nRegFat   number := 0;
  vSN_Parto Varchar2(1);
  nResult   Number :=0;
begin
  Open cParto;
    Fetch cParto Into vSN_Parto;
  Close cParto;
  SELECT COUNT(*)
    INTO nRegFat
    FROM IT_PARTO it_parto
   WHERE it_parto.CD_REG_FAT = pRegFat;
  nResult:= Nvl(IT_PARTO.QT_RN_VIVO,0)
           +Nvl(IT_PARTO.QT_RN_MORTO,0)
           +Nvl(IT_PARTO.QT_RN_ALTA,0)
           +Nvl(IT_PARTO.QT_RN_TRANSFERIDO,0)
           +Nvl(IT_PARTO.QT_RN_OBITO,0);
  if nRegFat = 0 then
      If vSN_Parto = 'S' Then
        If nResult= 0 Then
          IT_PARTO.QT_RN_VIVO:= 1;
          IT_PARTO.QT_RN_ALTA:= 1;
            end if;
      end if;
    End If;
End;
PROCEDURE P_DADOS_PARTO_DEFAULT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento varchar2(4000);
  it_parto IT_PARTORec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.Getvarchar2(xml, 'pProcedimento');
    IT_PARTO.QT_RN_VIVO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_VIVO');
    IT_PARTO.QT_RN_MORTO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_MORTO');
    IT_PARTO.QT_RN_ALTA:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_ALTA');
    IT_PARTO.QT_RN_TRANSFERIDO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_TRANSFERIDO');
    IT_PARTO.QT_RN_OBITO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_OBITO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DADOS_PARTO_DEFAULT_E(xml) THEN
        P_DADOS_PARTO_DEFAULT(xml, pRegFat, pProcedimento, IT_PARTO);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DADOS_PARTO_DEFAULT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_VIVO', IT_PARTO.QT_RN_VIVO);
    PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_MORTO', IT_PARTO.QT_RN_MORTO);
    PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_ALTA', IT_PARTO.QT_RN_ALTA);
    PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_TRANSFERIDO', IT_PARTO.QT_RN_TRANSFERIDO);
    PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_OBITO', IT_PARTO.QT_RN_OBITO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Check_contas_remessa</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHECK_CONTAS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, nRemessa in number) IS
nCtsRems number :=0;
nCtsDig  number :=0;
eSaida   Exception;
BEGIN
  If nRemessa Is Null Then
    Raise eSaida;
  End If;
      SELECT count(*)
        into nCtsDig
        FROM REG_FAT reg_fat
       WHERE reg_fat.cd_remessa = nRemessa
       AND REG_FAT.CD_MULTI_EMPRESA = xml.multiEmpresa; -- PDA 118607/127754
      SELECT nvl(remessa_fatura.qt_contas_remessa,0)
        into nCtsRems
        FROM REMESSA_FATURA
       WHERE REMESSA_FATURA.cd_remessa = nRemessa;
      if nCtsRems < nCtsDig then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_18)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_18', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Quantidade de contas digitadas maior que o estimado para a remessa.'),False);
      end if;
EXCEPTION
   When no_data_found then
        Null;
  When eSaida Then
    Null;
END;
PROCEDURE P_CHECK_CONTAS_REMESSA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  nRemessa number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nRemessa:= PKG_XML.Getnumber(xml, 'nRemessa');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECK_CONTAS_REMESSA_E(xml) THEN
        P_CHECK_CONTAS_REMESSA(xml, nRemessa);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECK_CONTAS_REMESSA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DEFINE_PRESTADOR_AUDITOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
begin
   if REG_FAT.CD_PRESTADOR_AUDITOR is null then
        REG_FAT.CD_PRESTADOR_AUDITOR := REG_FAT.CD_PRESTADOR_RESPONSAVEL;
        REG_FAT.NM_PRESTADOR_AUDITOR := REG_FAT.NM_PRESTADOR_RESPONSAVEL;
   end if;
end;
PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.CD_PRESTADOR_RESPONSAVEL:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUDITOR_E(xml) THEN
        P_DEFINE_PRESTADOR_AUDITOR(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUDITOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL', REG_FAT.CD_PRESTADOR_RESPONSAVEL);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL', REG_FAT.NM_PRESTADOR_RESPONSAVEL);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>STATUS_LOCK</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_STATUS_LOCK (xml IN OUT NOCOPY PKG_XML.XmlContext, vModo in varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec) IS
begin
   if vModo is Null then
         CG$CTRL.STATUS_LOCK := 'AUT';
   else
         if     vModo = 'BLC'                                                     then
                 CG$CTRL.STATUS_LOCK := vModo;
         elsif    (vModo = 'REG' or vModo = 'SUS') and CG$CTRL.STATUS_LOCK  = 'BLC' then
                 Null;
         elsif    (vModo = 'REG' or vModo = 'SUS') and CG$CTRL.STATUS_LOCK <> 'BLC' then
                 CG$CTRL.STATUS_LOCK := vModo;
         else
            CG$CTRL.STATUS_LOCK := vModo;
         end if;
   end if;
end;
PROCEDURE P_STATUS_LOCK (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  vModo varchar2(4000);
  cg$ctrl CG$CTRLRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    vModo:= PKG_XML.Getvarchar2(xml, 'vModo');
    CG$CTRL.STATUS_LOCK:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_STATUS_LOCK_E(xml) THEN
        P_STATUS_LOCK(xml, vModo, CG$CTRL);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_STATUS_LOCK_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK', CG$CTRL.STATUS_LOCK);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_ATIVIDADE_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador In Number,pAtiMed In Varchar2,pProcedimento in Varchar2) IS
Cursor cPrestador Is Select Nvl(SN_Cirurgiao,'N')   SN_Cirurgiao
                            , Nvl(SN_Auxiliar,'N')    SN_Auxiliar
                            , Nvl(SN_Anestesista,'N') SN_Anestesista
                         From Prestador
                         Where Cd_Prestador = pPrestador;
  rPrestador       cPrestador%Rowtype;
  Saida            Exception;
  vSN_Equipe       Varchar2(1);
  vNr_Auxiliar     Varchar2(1);
  vSN_Anestesista  Varchar2(1);
Begin
  If pPrestador Is Null Then
      Raise Saida;
  End If;
  Open cPrestador;
    Fetch cPrestador Into rPrestador;
  Close cPrestador;
  Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, pProcedimento
                       ,vSN_Equipe
                       ,vNr_Auxiliar
                       ,vSN_Anestesista);
   IF pAtiMed = '01' And rPrestador.SN_Cirurgiao = 'N' THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_19)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_19', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado para cirurgião.'),true);
   END IF;
   IF pAtiMed in ('02','03','04','05') Then
        If rPrestador.SN_Auxiliar = 'N' THEN
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_20)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_20', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado para auxiliar.'),true);
     End If;
     If vNr_Auxiliar = 0 then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_21)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_21', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento não permite prestador auxiliar.'),true);
       End if;
   END IF;
   IF pAtiMed in ('06') Then
        If rPrestador.SN_Anestesista = 'N' THEN
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_22)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_22', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado para anestesista.'),true);
        End If;
        If vSN_Anestesista = 'N' Then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_23)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_23', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s não permite anestesista.', arg_list(pProcedimento)),true);
        End If;
   END IF;
   If to_number(pAtiMed) > 6 Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_24)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_24', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Atividade não compõe equipe médica.'),true);
   End If;
Exception
  When Saida Then
     Null;
End;
PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pPrestador Number;
  pAtiMed Varchar2(4000);
  pProcedimento Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    pAtiMed:= PKG_XML.GetVarchar2(xml, 'pAtiMed');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATIVIDADE_PRESTADOR_E(xml) THEN
        P_VALIDA_ATIVIDADE_PRESTADOR(xml, pPrestador, pAtiMed, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATIVIDADE_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CRIA_NOVA_REG_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CRIA_NOVA_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pdAlta in Date,pMotAlt in Number) IS
Cursor c_CapturaItens is
    Select itreg_fat.cd_reg_fat
               , itreg_fat.cd_lancamento
                 , itreg_fat.dt_lancamento
                 , itreg_fat.hr_lancamento
                 , itreg_fat.qt_lancamento
                 , itreg_fat.vl_percentual_multipla
                 , itreg_fat.vl_unitario
                 , itreg_fat.vl_filme_unitario
                 , itreg_fat.vl_acrescimo
                 , itreg_fat.vl_desconto
                 , itreg_fat.cd_gru_fat
                 , itreg_fat.cd_pro_fat
                 , itreg_fat.cd_prestador
                 , itreg_fat.nr_padrao
                 , itreg_fat.vl_honorario_unitario
                 , itreg_fat.vl_operacional_unitario
                 , itreg_fat.cd_pres_con
                 , itreg_fat.vl_percentual_paciente
                 , itreg_fat.vl_total_conta
                 , itreg_fat.cd_importa_reg_fat
                 , itreg_fat.cd_guia
                 , itreg_fat.sn_pertence_pacote
                 , itreg_fat.vl_base_repassado
                 , itreg_fat.cd_motivo_glosa
                 , itreg_fat.qt_ch_unitario
                 , itreg_fat.tp_pagamento
                 , itreg_fat.cd_setor_produziu
                 , itreg_fat.cd_setor
                 , itreg_fat.cd_padrao
                 , itreg_fat.sn_horario_especial
                 , itreg_fat.qt_pontos
                 , itreg_fat.sn_proced_autorizado
                 , itreg_fat.tp_alta_uti_neo
                 , itreg_fat.qt_peso_rn
                 , itreg_fat.qt_mes_gestacao
                 , itreg_fat.cd_tipo_vinculo
                 , itreg_fat.cd_ati_med
                 , itreg_fat.vl_sp
                 , itreg_fat.vl_sh
                 , itreg_fat.vl_sd
                 , itreg_fat.vl_ato
                 , itreg_fat.cd_reg_fat_pai
                 , itreg_fat.cd_lancamento_pai
                 , itreg_fat.sn_proced_realizado
                 , itreg_fat.cd_franquia
                 , itreg_fat.cd_regra_acoplamento
                 , itreg_fat.vl_perc_acoplamento
                 , itreg_fat.sn_paciente_paga
                 , itreg_fat.cd_regra_atendimento
                 , itreg_fat.cd_regra_atendimento_pro_fat
                 , itreg_fat.cd_reg_fat_rel
                 , itreg_fat.cd_lancamento_rel
                 , itreg_fat.cd_usuario
                 , itreg_fat.cd_mvto
                 , itreg_fat.tp_mvto
                 , itreg_fat.hr_lancamento_final
                 , itreg_fat.vl_desconto_conta
                 , itreg_fat.sn_repassou_virtual
                 , itreg_fat.vl_nota
                 , itreg_fat.sn_imp_laudo_alteracao
                 , itreg_fat.vl_ponto_repassado
                 , itreg_fat.cd_itmvto
                 , itreg_fat.sn_repassado
                 , itreg_fat.cd_procedimento
                 , itreg_fat.cd_cbo_prestador
                 , itreg_fat.tp_apurar_valor
                 , itreg_fat.tp_apurar_valor_origem
                 , procedimento_sus_detalhe.sn_parto
      From itreg_fat
         , procedimento_sus_detalhe
     Where cd_reg_fat           = pRegFat
       And itreg_fat.cd_procedimento = procedimento_sus_detalhe.cd_procedimento
       And trunc(dt_lancamento) >= (trunc(pdAlta) + 1 )
       And procedimento_sus_detalhe.sn_diaria_uti = 'N'
       And procedimento_sus_detalhe.sn_diaria_acompanhante = 'N';
  Cursor c_ExcluiItens is
    Select cd_reg_fat
         , cd_lancamento
      From itreg_fat
     Where cd_reg_fat    = pRegFat
       And trunc(dt_lancamento) > trunc(pdAlta);
  Cursor c_ItLan_Med ( nCdRegFat in Number
                                       , nCdLanc   in Number) is
    Select cd_reg_fat
         , cd_lancamento
            , cd_ati_med
         , cd_prestador
         , vl_ato
         , cd_pres_con
         , tp_pagamento
         , vl_base_repassado
         , qt_pontos
         , cd_tipo_vinculo
         , sn_paciente_paga
         , cd_itmvto
         , sn_repassou_virtual
         , vl_nota
         , vl_desconto
         , vl_acrescimo
         , vl_desconto_conta
         , vl_liquido
         , sn_repassado
         , cd_cbo_prestador
         , tp_apurar_valor
         , tp_apurar_valor_origem
      From itlan_med
     Where cd_reg_fat    = nCdRegFat
       And cd_lancamento = nCdLanc;
  Cursor c_ItCob_Pre ( nCdRegFat in Number
                                       , nCdLanc   in Number) is
    Select cd_reg_fat
           , cd_lancamento
           , nr_documento
           , vl_preco_unitario
           , vl_preco_total
           , ds_observacao
           , cd_fornecedor
           , nr_lote
           , nr_serie
           , nr_cnpj_fabricante
           , nr_registro_anvisa
      From itcob_pre
     Where cd_reg_fat    = nCdRegFat
       And cd_lancamento = nCdLanc;
  Cursor c_It_Parto ( nCdRegFat in Number) is
    Select cd_reg_fat
            , qt_rn_vivo
            , qt_rn_morto
            , qt_rn_alta
            , qt_rn_transferido
            , qt_rn_obito
            , qt_filhos
            , cd_cid
            , sn_gestacao_risco
            , cd_contraceptivo_anterior
            , cd_contraceptivo_atual
      From it_parto
     Where cd_reg_fat    = nCdRegFat;
  Cursor c_RegCivil ( nCdRegFat in Number
                                      , nCdLanc   in Number) is
    Select cd_reg_fat
             , cd_lancamento
             , nr_declaracao_nascido
             , nm_recem_nascido
             , cd_cartorio
             , nr_livro_rn
             , nr_folha_rn
             , nr_termo_rn
             , dt_emissao_rn
             , nr_matricula
      From registro_civil
     Where cd_reg_fat    = nCdRegFat
       And cd_lancamento = nCdLanc;
  Cursor cItensPrescricao ( nCdRegFat in Number
                                                  , nCdLanc        in Number) is
      Select cd_atendimento
           , cd_reg_fat
           , cd_lancamento
           , cd_pro_fat
           , dt_lancamento
           , hr_lancamento
           , qt_lancamento
           , cd_mvto
           , cd_itmvto
           , tp_mvto
           , cd_procedimento
        From itens_prescricao_sus
       Where cd_reg_fat    = nCdRegFat
         And cd_lancamento = nCdLanc;
  Cursor cRegFat Is Select Cd_Atendimento
                         , Cd_Convenio
                         , Cd_Multi_Empresa
                         , Cd_Regra
                         , Cd_Tip_Acom
                         , Cd_Con_Pla
                         , Cd_Prestador_Diretor
                         , Tp_Modalidade_Atendimento
                         , Cd_Carater_Atendimento
                         , Cd_Procedimento_Realizado
                         , cd_prestador_auditor  --OP 14332
                      From Reg_Fat
                     Where Cd_Reg_Fat = pRegFat;
  rRegFat       cRegFat%RowType;
  nNewRegFat    Number;
  vDtInicio     Date;
  nRegAnt       number;
BEGIN
   ----------------------------------- Captura Novo Numero de Conta ----------------------------------
   select SEQ_REG_FAT.NEXTVAL
     into nNewRegFat
     from SYS.DUAL;
   ---------------------------------------------------------------------------------------------------
   Open cRegFat;
     Fetch cRegFat Into rRegFat;
   Close cRegFat;
   if pMotAlt Not In ('27') or pMotAlt Not In ('3','4') then
     vDtInicio := pdAlta + 1;
   else
        vDtInicio := pdAlta;
   end if;
   Insert into reg_fat (cd_reg_fat,
                              sn_fechada,
                              cd_multi_empresa,
                              cd_atendimento,
                              cd_regra,
                              cd_tip_acom,
                              cd_con_pla,
                              cd_convenio,
                              sn_fatura_impressa,
                              sn_conta_calculada,
                              cd_guia,
                              dt_inicio,
                              cd_remessa,
                              nm_usuario,
                              sn_importa_auto,
                              cd_pro_fat_solicitado,
                              cd_mot_alt,
                              nr_identificacao,
                              NR_DIARIA_ACOMPANHANTE,
                              dt_final,
                              CD_PRESTADOR_DIRETOR,
                              CD_CARATER_INTERNACAO,
                              TP_MODALIDADE_ATENDIMENTO,
                              CD_CARATER_ATENDIMENTO,
                              CD_PROCEDIMENTO_SOLICITADO,
                              CD_PRESTADOR_AUDITOR)    --OP 14332
                      Values (nNewRegFat,
                              'N',
                              rRegFat.CD_MULTI_EMPRESA,
                              rRegFat.CD_ATENDIMENTO,
                              rRegFat.CD_REGRA,
                              rRegFat.CD_TIP_ACOM,
                              rRegFat.CD_CON_PLA,
                              rRegFat.CD_CONVENIO,
                              'N',
                              'N',
                              Null,
                              vDtInicio,
                              Null,
                              xml.usuario,
                              'S',
                              Null,
                              nvl(pMotAlt,12),
                              '1',
                              0,
                              Null,
                              rRegFat.CD_PRESTADOR_DIRETOR,
                              Null,
                              rRegFat.TP_MODALIDADE_ATENDIMENTO,
                              rRegFat.CD_CARATER_ATENDIMENTO,
                              rRegFat.CD_PROCEDIMENTO_REALIZADO,
                              rRegFat.CD_PRESTADOR_AUDITOR); --OP 14332
--------------------------------   Insere Itens na Nova Conta    --------------------------------
  For rec in c_CapturaItens Loop
   Insert Into itreg_fat( cd_reg_fat
                                                        , cd_lancamento
                                                        , dt_lancamento
                                                        , hr_lancamento
                                                        , qt_lancamento
                                                        , vl_percentual_multipla
                                                        , vl_unitario
                                                        , vl_filme_unitario
                                                        , vl_acrescimo
                                                        , vl_desconto
                                                        , cd_gru_fat
                                                        , cd_pro_fat
                                                        , cd_prestador
                                                        , nr_padrao
                                                        , vl_honorario_unitario
                                                        , vl_operacional_unitario
                                                        , cd_pres_con
                                                        , vl_percentual_paciente
                                                        , vl_total_conta
                                                        , cd_importa_reg_fat
                                                        , cd_guia
                                                        , sn_pertence_pacote
                                                        , vl_base_repassado
                                                        , cd_motivo_glosa
                                                        , qt_ch_unitario
                                                        , tp_pagamento
                                                        , cd_setor_produziu
                                                        , cd_setor
                                                        , cd_padrao
                                                        , sn_horario_especial
                                                        , qt_pontos
                                                        , sn_proced_autorizado
                                                        , tp_alta_uti_neo
                                                        , qt_peso_rn
                                                        , qt_mes_gestacao
                                                        , cd_tipo_vinculo
                                                        , cd_ati_med
                                                        , vl_sp
                                                        , vl_sh
                                                        , vl_sd
                                                        , vl_ato
                                                        , cd_reg_fat_pai
                                                        , cd_lancamento_pai
                                                        , sn_proced_realizado
                                                        , cd_franquia
                                                        , cd_regra_acoplamento
                                                        , vl_perc_acoplamento
                                                        , sn_paciente_paga
                                                        , cd_regra_atendimento
                                                        , cd_regra_atendimento_pro_fat
                                                        , cd_reg_fat_rel
                                                        , cd_lancamento_rel
                                                        , cd_usuario
                                                        , cd_mvto
                                                        , tp_mvto
                                                        , hr_lancamento_final
                                                        , vl_desconto_conta
                                                        , sn_repassou_virtual
                                                        , vl_nota
                                                        , sn_imp_laudo_alteracao
                                                        , vl_ponto_repassado
                                                        , cd_itmvto
                                                        , sn_repassado
                                    , cd_procedimento
                                      , cd_cbo_prestador
                                      , tp_apurar_valor
                                      , tp_apurar_valor_origem)
                      values ( nNewRegFat
                                         , rec.cd_lancamento
                                         , rec.dt_lancamento
                                         , rec.hr_lancamento
                                         , rec.qt_lancamento
                                         , rec.vl_percentual_multipla
                                         , rec.vl_unitario
                                         , rec.vl_filme_unitario
                                         , rec.vl_acrescimo
                                         , rec.vl_desconto
                                         , rec.cd_gru_fat
                                         , rec.cd_pro_fat
                                         , rec.cd_prestador
                                         , rec.nr_padrao
                                         , rec.vl_honorario_unitario
                                         , rec.vl_operacional_unitario
                                         , rec.cd_pres_con
                                         , rec.vl_percentual_paciente
                                         , rec.vl_total_conta
                                         , rec.cd_importa_reg_fat
                                         , rec.cd_guia
                                         , rec.sn_pertence_pacote
                                         , rec.vl_base_repassado
                                         , rec.cd_motivo_glosa
                                         , rec.qt_ch_unitario
                                         , rec.tp_pagamento
                                         , rec.cd_setor_produziu
                                         , rec.cd_setor
                                         , rec.cd_padrao
                                         , rec.sn_horario_especial
                                         , rec.qt_pontos
                                         , rec.sn_proced_autorizado
                                         , rec.tp_alta_uti_neo
                                         , rec.qt_peso_rn
                                         , rec.qt_mes_gestacao
                                         , rec.cd_tipo_vinculo
                                         , rec.cd_ati_med
                                         , rec.vl_sp
                                         , rec.vl_sh
                                         , rec.vl_sd
                                         , rec.vl_ato
                                         , rec.cd_reg_fat_pai
                                         , rec.cd_lancamento_pai
                                         , rec.sn_proced_realizado
                                         , rec.cd_franquia
                                         , rec.cd_regra_acoplamento
                                         , rec.vl_perc_acoplamento
                                         , rec.sn_paciente_paga
                                         , rec.cd_regra_atendimento
                                         , rec.cd_regra_atendimento_pro_fat
                                         , rec.cd_reg_fat_rel
                                         , rec.cd_lancamento_rel
                                         , rec.cd_usuario
                                         , rec.cd_mvto
                                         , rec.tp_mvto
                                         , rec.hr_lancamento_final
                                         , rec.vl_desconto_conta
                                         , rec.sn_repassou_virtual
                                         , rec.vl_nota
                                         , rec.sn_imp_laudo_alteracao
                                         , rec.vl_ponto_repassado
                                         , rec.cd_itmvto
                                         , rec.sn_repassado
                                   , rec.cd_procedimento
                                     , rec.cd_cbo_prestador
                                     , rec.tp_apurar_valor
                                     , rec.tp_apurar_valor_origem);
--------------- Insere os itens na tabela itlan_med relacionados ao item da conta ------------------
    For rec2 in c_ItLan_Med(rec.cd_reg_fat, rec.cd_lancamento) Loop
        Insert Into itlan_med (cd_reg_fat
                                                       , cd_lancamento
                                                       , cd_ati_med
                                                       , cd_prestador
                                                       , vl_ato
                                                       , cd_pres_con
                                                       , tp_pagamento
                                                       , vl_base_repassado
                                                       , qt_pontos
                                                       , cd_tipo_vinculo
                                                       , sn_paciente_paga
                                                       , cd_itmvto
                                                       , sn_repassou_virtual
                                                       , vl_nota
                                                       , vl_desconto
                                                       , vl_acrescimo
                                                       , vl_desconto_conta
                                                       , vl_liquido
                                                       , sn_repassado
                                 , cd_cbo_prestador
                                 , tp_apurar_valor
                                 , tp_apurar_valor_origem)
        Values ( nNewRegFat
               , rec2.cd_lancamento
               , rec2.cd_ati_med
               , rec2.cd_prestador
               , rec2.vl_ato
               , rec2.cd_pres_con
               , rec2.tp_pagamento
               , rec2.vl_base_repassado
               , rec2.qt_pontos
               , rec2.cd_tipo_vinculo
               , rec2.sn_paciente_paga
               , rec2.cd_itmvto
               , rec2.sn_repassou_virtual
               , rec2.vl_nota
               , rec2.vl_desconto
               , rec2.vl_acrescimo
               , rec2.vl_desconto_conta
               , rec2.vl_liquido
               , rec2.sn_repassado
             , rec2.cd_cbo_prestador
             , rec2.tp_apurar_valor
             , rec2.tp_apurar_valor_origem);
    End Loop;
--------------- Insere os itens na tabela itcob_pre relacionados ao item da conta ------------------
    For rec3 in c_ItCob_Pre(rec.cd_reg_fat, rec.cd_lancamento) Loop
        Insert into itcob_pre (
                           cd_reg_fat
                    , cd_lancamento
              , nr_documento
              , vl_preco_unitario
              , vl_preco_total
              , ds_observacao
              , cd_fornecedor
              , nr_lote
              , nr_serie
              , nr_cnpj_fabricante
              , nr_registro_anvisa)
        Values( nNewRegFat
              , rec3.cd_lancamento
              , rec3.nr_documento
              , rec3.vl_preco_unitario
              , rec3.vl_preco_total
              , rec3.ds_observacao
              , rec3.cd_fornecedor
              , rec3.nr_lote
              , rec3.nr_serie
              , rec3.nr_cnpj_fabricante
              , rec3.nr_registro_anvisa);
    End Loop;
--------------- Insere o Parto na tabela it_parto ------------------
    For rec4 in c_It_Parto (rec.cd_reg_fat) Loop
      if rec.sn_parto = 'S' then
            Insert into it_parto
             Values( nNewRegFat
                   , rec4.qt_rn_vivo
                   , rec4.qt_rn_morto
                   , rec4.qt_rn_alta
                   , rec4.qt_rn_transferido
                   , rec4.qt_rn_obito
                   , rec4.qt_filhos
                   , rec4.cd_cid
                   , rec4.sn_gestacao_risco
                   , rec4.cd_contraceptivo_anterior
                   , rec4.cd_contraceptivo_atual);
           End if;
    End Loop;
--------------- Insere os itens na tabela REGISTRO_CIVIL relacionados ao item da conta ------------------
      For rec5 in c_RegCivil(rec.cd_reg_fat, rec.cd_lancamento) Loop
          Insert Into registro_civil
          Values ( nNewRegFat
                 , rec5.cd_lancamento
                 , rec5.nr_declaracao_nascido
                 , rec5.nm_recem_nascido
                 , rec5.cd_cartorio
                 , rec5.nr_livro_rn
                 , rec5.nr_folha_rn
                 , rec5.nr_termo_rn
                 , rec5.dt_emissao_rn
                 , rec5.nr_matricula);
      End Loop;
-- PDA 187104 Inicio
------------ Insere os itens na tabela ITENS_PRESCRICAO_SUS relacionados ao item da conta ---------------
      For rec6 in cItensPrescricao(rec.cd_reg_fat, rec.cd_lancamento) Loop
          Insert Into itens_prescricao_sus
          (cd_atendimento
           , cd_reg_fat
           , cd_lancamento
           , cd_pro_fat
           , dt_lancamento
           , hr_lancamento
           , qt_lancamento
           , cd_mvto
           , cd_itmvto
           , tp_mvto
           , cd_procedimento)
          Values ( rec6.cd_atendimento
                 , nNewRegFat
                 , rec6.cd_lancamento
                 , rec6.cd_pro_fat
                 , rec6.dt_lancamento
                 , rec6.hr_lancamento
                 , rec6.qt_lancamento
                 , rec6.cd_mvto
                 , rec6.cd_itmvto
                 , rec6.tp_mvto
                 , rec6.cd_procedimento);
      End Loop;
-- PDA 187104 Fim
  End Loop;
---------------- Exclui os itens da REG_FAT anterior ------------------------
  For rec_exclui in c_ExcluiItens loop
       Delete
         From itens_prescricao_sus
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
       Delete
         From itlan_med
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
       Delete
         From itcob_pre
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
       Delete
         From it_parto
        Where cd_reg_fat    = rec_exclui.cd_reg_fat;
       Delete
         From registro_civil
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
      Delete
         From itreg_fat
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
  End Loop;
-------------------------------
Exception
  When no_data_found then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_25)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_25', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Problemas ao criar nova conta, entre em contato com a MV Sistemas.'),false);
  When Others Then
    raise form_trigger_failure;
END;
PROCEDURE P_CRIA_NOVA_REG_FAT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pdAlta Date;
  pMotAlt Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pdAlta:= PKG_XML.GetDate(xml, 'pdAlta');
    pMotAlt:= PKG_XML.GetNumber(xml, 'pMotAlt');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CRIA_NOVA_REG_FAT_E(xml) THEN
        P_CRIA_NOVA_REG_FAT(xml, pRegFat, pdAlta, pMotAlt);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CRIA_NOVA_REG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CPF_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pCdPrestador in number) IS
Cursor cPrestador (nCdPrest in number) is
        Select tp_vinculo
             , length(nr_cpf_cgc)
          From prestador
         Where cd_prestador = nCdPrest;
    vTpVinculo    prestador.tp_vinculo%type;
    nTamanho        Number;
BEGIN
  Open cPrestador (pCdPrestador);
    Fetch cPrestador into vTpVinculo, nTamanho;
  Close cPrestador;
  If vTpVinculo = 'J' or nTamanho > 11 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_26)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_26', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Campo só permite lançamento de prestador cadastrado com CPF.%sAção: Entre com um prestador Válido.', arg_list(chr(10))),TRUE);
  End if;
END;
PROCEDURE P_VALIDA_CPF_PRESTADOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCdPrestador number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCdPrestador:= PKG_XML.Getnumber(xml, 'pCdPrestador');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CPF_PRESTADOR_E(xml) THEN
        P_VALIDA_CPF_PRESTADOR(xml, pCdPrestador);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CPF_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>HABILITA_DT_AUT_HOMONIMO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
  IF REG_FAT.CD_PRESTADOR_AUDITOR IS NOT NULL THEN
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','ENABLED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','NAVIGABLE',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','UPDATE_ALLOWED',true);
  ELSE
        PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','ENABLED',false);
  END IF;
END;
PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DT_AUT_HOMONIMO_E(xml) THEN
        P_HABILITA_DT_AUT_HOMONIMO(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DT_AUT_HOMONIMO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_DT_AUT_HOMONIMO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
    IF TRUNC(REG_FAT.DT_INICIO) > TRUNC(REG_FAT.DT_AUT_HOMONIMO) THEN
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_27)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_27', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: A data Informada não Pode Ser Inferior a Data Inicial da Conta'),TRUE);
  END IF;
    DECLARE
         Cursor cCPF is
        Select Prestador.Nr_Cpf_Cgc
          From Prestador
         Where Prestador.Cd_Prestador  = Reg_Fat.Cd_Prestador_Auditor;
          vCPF Prestador.Nr_Cpf_Cgc%type;
    BEGIN
      Open cCPF;
      Fetch cCPF into vCPF;
      Close cCPF;
        IF REG_FAT.CD_GESTOR_AUTORIZOU IS NULL THEN
             IF REG_FAT.DT_AUT_HOMONIMO IS NOT NULL THEN
                 REG_FAT.NR_CPF_GESTOR := vCPF;
             ELSE
            REG_FAT.NR_CPF_GESTOR := '';
             END IF;
        END IF;
    END;
END;
PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.DT_AUT_HOMONIMO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO');
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.CD_GESTOR_AUTORIZOU:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_GESTOR_AUTORIZOU');
    REG_FAT.NR_CPF_GESTOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_CPF_GESTOR');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DT_AUT_HOMONIMO_E(xml) THEN
        P_VALIDA_DT_AUT_HOMONIMO(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DT_AUT_HOMONIMO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO', REG_FAT.DT_AUT_HOMONIMO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_GESTOR_AUTORIZOU', REG_FAT.CD_GESTOR_AUTORIZOU);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_CPF_GESTOR', REG_FAT.NR_CPF_GESTOR);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_GLOSA_TOTAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_GLOSA_TOTAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
Cursor cChecaGlosaTotal is
        Select cd_motivo_glosa_sus
          From glosas_sus
         Where cd_reg_fat = pRegFat;
  vTpMotGlosaSus        glosas_sus.cd_motivo_glosa_sus%type;
BEGIN
   vTpMotGlosaSus := null;
   Open  cChecaGlosaTotal;
     Fetch cChecaGlosaTotal into vTpMotGlosaSus;
   Close cChecaGlosaTotal;
   If vTpMotGlosaSus = 'T' Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_28)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_28', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Conta registrada como glosa TOTAL, não é possivel apresentá-la'),TRUE);
   End if;
END;
PROCEDURE P_VALIDA_GLOSA_TOTAL (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GLOSA_TOTAL_E(xml) THEN
        P_VALIDA_GLOSA_TOTAL(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GLOSA_TOTAL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>prc_habilita_desabilita_guia</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_HABILITA_DESABILITA_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pbLimpaCampo in boolean, reg_fat IN OUT NOCOPY REG_FATRec) IS
vSnMutirao remessa_fatura.sn_mutirao%type;
begin
  vSnMutirao := pack_sus.fnc_retorna_remessa_mutirao( pnCdMultiEmpresa => xml.multiEmpresa
                                                           ,pnCdRemessa      => reg_fat.cd_remessa );
  -- Desabilita o campo nr_guia pois o mesmo é preenchido automaticamente
    if vSnMutirao = 'S' then
      if pbLimpaCampo then
        reg_fat.nr_guia := null;
      end if;
        if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE') = 'TRUE' then
        PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE',false);
        end if;
      if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED') = 'TRUE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED',false);
       end if;
    -- Habilita o campo nr_guia pois o mesmo é preenchido manualmente
    elsif ( (vSnMutirao is null) or (vSnMutirao = 'N') ) and
            ( nvl(reg_fat.sn_fechada,'N') = 'N' )         then
        if pbLimpaCampo and
             length(reg_fat.nr_guia) < 13 then
            reg_fat.nr_guia := null;
        end if;
        if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE') = 'FALSE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE',true);
        end if;
    if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED') = 'FALSE' then
      PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED',true);
    end if;
    end if;
exception
  when others then
    RAISE;
END;
PROCEDURE P_HABILITA_DESABILITA_GUIA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pbLimpaCampo boolean;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pbLimpaCampo:= PKG_XML.Getboolean(xml, 'pbLimpaCampo');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.SN_FECHADA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.SN_FECHADA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DESABILITA_GUIA_E(xml) THEN
        P_HABILITA_DESABILITA_GUIA(xml, pbLimpaCampo, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DESABILITA_GUIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.SN_FECHADA', REG_FAT.SN_FECHADA);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Insere_ITREG_FAT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_INSERE_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat          in     number  ,
                             nLancto          IN OUT NOCOPY number  ,
                             vProcedimento    in     varchar2,
                             dDate            in     date    ,
                             nSetor           in     number  ,
                             pPrestador       in     number  ,
                             nQtd             in     number  ,
                             vSN_Realizado    in     varchar2,
                             vAtualizaIT      out    varchar2) IS
  Cursor cHora Is
     Select Decode(to_char(a.dt_alta,'dd/mm'), to_char(a.dt_atendimento, 'dd/mm'), a.hr_alta, Sysdate)
          , r.nr_identificacao
          , r.dt_inicio
          , r.dt_final
       From Atendime a
          , Reg_Fat r
      Where a.Cd_Atendimento = r.Cd_Atendimento
        And r.Cd_Reg_Fat     = pRegFat;
  vTpPagto       Varchar2(1);
  dHora                 Date;
  nCdTpVin       Tipo_Vinculo.Cd_Tipo_Vinculo%Type;
  nGruFat        Gru_Fat.Cd_Gru_Fat%Type;
  vAtiMed        Ati_Med.Cd_Ati_Med%Type;
  vCBO_Prestador CBO.Cd_CBOS%Type;
  nApurarValor   Number;
  Saida          Exception;
  Conta_Fechada  Exception;
  dCompet        date;
  vnr_identificacao varchar2(1);
  vdt_inicio     date;
  vdt_final      date;
begin
  -- Recupera a hora para inserção do procedimento
  Open cHora;
      Fetch cHora into dHora, vnr_identificacao, vdt_inicio, vdt_final;
  Close cHora;
  --dCompet := trunc(dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(vnr_identificacao, vdt_inicio, vdt_final, null),'MM');
  dCompet:= dbamv.PKG_SUS_REGRA_PROCEDIMENTO.F_DATA_AVALIACAO(vProcedimento, vdt_final); -- PDA 565313
  -- Abandona processo se a conta estiver fechada.
  If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_FECHADA(xml, pRegFat) Then
    Raise Conta_Fechada;
  End If;
  -- Caso o item já conste nos itens da conta oriundo do centro cirúrgico
  -- o processo é encerrado.
  If Pkg_ffis_M_LACTO_AIH_P321.F_ITEM_CENTRO_CIRURGICO(xml, pRegFat,vProcedimento) Then
    Raise Saida;
  End If;
    -- Caso o procedimento seja de cirurgia multipla o processo é cancelado
    If Pkg_ffis_M_LACTO_AIH_P321.F_F_CONTA_CIR_MULTIPLA(xml, vProcedimento,dCompet) Then
        Raise Saida;
    End If;
  -- Recupero o próximo lançamento (cd_lançamento)
  nLancto   := Pkg_ffis_M_LACTO_AIH_P321.F_PK_ITREG_FAT(xml, pRegFat);
  -- Recupero o próximo grupo de faturamento (cd_gru_fat)
  nGruFat := Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_GRU_FAT(xml, vProcedimento, dDate); --OP 35293
  -- Recupero a Atividade médica para os itens da conta (quando houver)
  vAtiMed:= Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_ATI_MED_ITEM(xml, vProcedimento,dCompet);
  -- Recupero os dados do prestador
  if pPrestador is not null then
    nCdTpVin := FNC_FFIS_DEFINE_TIPO_VINCULO(pPrestador);
    vTpPagto := Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_TIPO_PAGTO(xml, pPrestador);
    -- lançamento Automático do CBO relacionados com a Empresa, Procedimento e Prestador.
    vCBO_Prestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_CBO_PRESTADOR(xml, pPrestador,vProcedimento, dCompet);
    -- lançamento padrão da apurAção do valor para o prestador.
    nApurarValor:= Pkg_ffis_M_LACTO_AIH_P321.F_LANCA_APURAR_VALOR(xml, pPrestador);
  end if;
  -- Se o procedimento for de parto seráo inserido os dados padrões
  Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_DADOS_PARTO(xml, pRegFat,vProcedimento);
  -------------------------------------------------------
  INSERT INTO ITREG_FAT ( CD_GRU_FAT,
                                 CD_LANCAMENTO,
                                 CD_SUS,
                                 CD_PRO_FAT,
                                 CD_REG_FAT,
                                 CD_ATI_MED,
                                 CD_SETOR,
                                 CD_SETOR_PRODUZIU,
                                 CD_PRESTADOR,
                                 CD_TIPO_VINCULO,
                                 TP_PAGAMENTO,
                                 DT_LANCAMENTO,
                                 HR_LANCAMENTO,
                                 QT_LANCAMENTO,
                                 SN_PERTENCE_PACOTE,
                                 VL_PERCENTUAL_MULTIPLA,
                                 SN_PROCED_AUTORIZADO,
                                 SN_PROCED_REALIZADO,
                                 CD_PROCEDIMENTO,
                                 TP_APURAR_VALOR,
                                 CD_CBO_PRESTADOR)
                        VALUES ( Nvl(nGruFat,10),
                                 nLancto,
                                 '00000000',
                                 'X0000000',
                                 pRegFat,
                                 vAtiMed,
                                 nSetor,
                                 nSetor,
                                 pPrestador,
                                 nCdTpVin,
                                 vTpPagto,
                                 dDate,
                                 dHora,
                                 Decode(nQtd,0,1,nQtd),
                                 'N',
                                 1,
                                 'N',
                                 vSN_Realizado,
                                 vProcedimento,
                                 nApurarValor,
                                 vCBO_Prestador);
   -- Atualiza bloco de itens conta
   vAtualizaIT := 'S';
Exception
    When No_Data_Found Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_29)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_29', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Grupo de Faturamento não cadastrado para procedimento %s.%sAção: Entre em contato com o setor de informática e solicite atualização das tabelas.'
          , arg_list(vProcedimento, chr(10))),true);
  When Conta_Fechada Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_30)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_30', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é possível inserir registro com conta fechada!.'),False);
  When Saida Then
   -- não Atualiza bloco de itens conta
   vAtualizaIT := 'N';
end;
PROCEDURE P_INSERE_ITREG_FAT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat number;
  nLancto number;
  vProcedimento varchar2(4000);
  dDate date;
  nSetor number;
  pPrestador number;
  nQtd number;
  vSN_Realizado varchar2(4000);
  vAtualizaIT varchar2(4000);
  pnr_identificacao varchar2(1);
    pdt_inicio date;
    pdt_final date;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
    nLancto:= PKG_XML.Getnumber(xml, 'nLancto');
    vProcedimento:= PKG_XML.Getvarchar2(xml, 'vProcedimento');
    dDate:= PKG_XML.Getdate(xml, 'dDate');
    nSetor:= PKG_XML.Getnumber(xml, 'nSetor');
    pPrestador:= PKG_XML.Getnumber(xml, 'pPrestador');
    nQtd:= PKG_XML.Getnumber(xml, 'nQtd');
    vSN_Realizado:= PKG_XML.Getvarchar2(xml, 'vSN_Realizado');
    vAtualizaIT:= PKG_XML.Getvarchar2(xml, 'vAtualizaIT');
    pnr_identificacao:= PKG_XML.Getvarchar2(xml, 'pnr_identificacao');
        pdt_inicio:= PKG_XML.Getvarchar2(xml, 'pdt_inicio');
        pdt_final:= PKG_XML.Getvarchar2(xml, 'pdt_final');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_ITREG_FAT_E(xml) THEN
        P_INSERE_ITREG_FAT(xml, pRegFat, nLancto, vProcedimento, dDate, nSetor, pPrestador, nQtd, vSN_Realizado, vAtualizaIT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_ITREG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.Setnumber(xml, 'nLancto', nLancto);
    PKG_XML.Setvarchar2(xml, 'vAtualizaIT', vAtualizaIT);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>MONTAR_EQUIPE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_MONTAR_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat  in number,
                         nLancto  in number,
                         vProced  in Varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec) IS
Cursor cCirurgiaMultipla IS Select nvl(sn_cirurgia_multipla, 'N')
                                From procedimento_sus_detalhe
                               where cd_procedimento = vProced;
    vTpPagto       varchar2(1);
    vExigeEquipe     Varchar2(1);
  nNumeroAux         Number;
  vAtoAnest             Varchar2(1);
  vSnCirMult       Varchar2(1);
  nPrestador     Number;
  nVinculo       Number;
    Cancela_Equipe Exception;
begin
    Open  cCirurgiaMultipla;
      Fetch cCirurgiaMultipla Into vSnCirMult;
    Close cCirurgiaMultipla;
    If vSnCirMult = 'S' AND vProced <> '0308010043' Then
        return;
    End if;
  -- Verifica se o procedimento exige equipe médica, Anestesista e se tem Auxiliares
  Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, vProced
                       ,vExigeEquipe
                       ,nNumeroAux
                       ,vAtoAnest);
  If vExigeEquipe = 'S' then --and (nNumeroAux > 0 or vAtoAnest = 'S') Then   --OP 33984
      -------------------------- Analisa Remonte de Equipe Medica -----------------------------
        if global.vChange  = 'S' then
        global.vChange := 'N';
        DELETE FROM ITLAN_MED
         WHERE itlan_med.CD_REG_FAT    = nRegFat
           AND itlan_med.CD_LANCAMENTO = nLancto;
      else
        raise Cancela_Equipe;
      end if;
        -----------------------------------------------------------------------------------------
    nPrestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_PRESTADOR_AIH(xml);
    If nPrestador Is Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_31)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_31', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador padrão não cadastrado para esta empresa. '),TRUE);
    End If;
    vTpPagto := Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_TIPO_PAGTO(xml, nPrestador);
    nVinculo := FNC_FFIS_DEFINE_TIPO_VINCULO(nPrestador);
    -- não monta a equipe médica se o item for oriundo do FSCC
    If Pkg_ffis_M_LACTO_AIH_P321.F_ITEM_CENTRO_CIRURGICO(xml, nRegFat,vProced) Then
      Raise Cancela_Equipe;
    End If;
    -- VALORES FIXOS PARA EQUIPE
      ----------------------------
      -- 01 cirurgião
      -- 02 1. AUXILIAR
      -- 03 2. AUXILIAR
      -- 04 3. AUXILIAR
      -- 05 DEMAIS AUXILIARES
      -- 06 ANESTESISTA
    -- Lança um Cirurgiao na equipe
        vTpPagto   := 'F';
        insert into itlan_med (cd_reg_fat,
                                     cd_lancamento,
                                     cd_ati_med,
                                     cd_prestador,
                                     cd_tipo_vinculo,
                                     tp_pagamento)
               values               (nRegFat,
                                     nLancto,
                                     '01',
                                     nPrestador,
                                     nVinculo,
                                     vTpPagto );
      --
      if vAtoAnest = 'S' then
          insert into itlan_med (cd_reg_fat,
                                       cd_lancamento,
                                       cd_ati_med,
                                       cd_prestador,
                                       cd_tipo_vinculo,
                                       tp_pagamento)
                 values               (nRegFat,
                                       nLancto,
                                       '06',
                                       nPrestador,
                                       nVinculo,
                                       vTpPagto);
      End if;
    -- Lança Auxiliares na equipe
    if nNumeroAux > 0 then
      for i in 2 .. (nNumeroAux + 1) loop
        insert into itlan_med (cd_reg_fat,
                                     cd_lancamento,
                                     cd_ati_med,
                                     cd_prestador,
                                     cd_tipo_vinculo,
                                     tp_pagamento)
               values               (nRegFat,
                                     nLancto,
                                     '0'||to_char(i),
                                     nPrestador,
                                     nVinculo,
                                     vTpPagto);
      end loop;
      end if;
      CG$CTRL.REFRESH_ITLAN_MED := 'S';      -- Atualiza Bloco de Equipe Medica
  Else
      DELETE FROM ITLAN_MED
       WHERE itlan_med.CD_REG_FAT    = nRegFat
         AND itlan_med.CD_LANCAMENTO = nLancto;
  End if;
Exception
  when Cancela_Equipe then
    Null;
END;
PROCEDURE P_MONTAR_EQUIPE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  nRegFat number;
  nLancto number;
  vProced Varchar2(4000);
  cg$ctrl CG$CTRLRec;
  global GlobalsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nRegFat:= PKG_XML.Getnumber(xml, 'nRegFat');
    nLancto:= PKG_XML.Getnumber(xml, 'nLancto');
    vProced:= PKG_XML.GetVarchar2(xml, 'vProced');
    CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
    global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_EQUIPE_E(xml) THEN
        P_MONTAR_EQUIPE(xml, nRegFat, nLancto, vProced, CG$CTRL, global);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_EQUIPE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>chk_lcto_uti</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHK_LCTO_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat  In Number
                      ,pLcto    In Number
                      ,DtComp   In Date) IS
nAchou        Number;
BEGIN
  Select Count(*)
    Into nAchou
    From Diaria_UTI_SUS
   Where Cd_Reg_Fat                 = pRegFat
     And Cd_Lancamento              = pLcto
     And Trunc(Dt_Competencia,'MM') = Trunc(DtComp,'MM');
  If nAchou > 1 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_32)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_32', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Competência de UTI já informada, verifique!'),true);
  End If;
End;
PROCEDURE P_CHK_LCTO_UTI (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLcto Number;
  DtComp Date;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLcto:= PKG_XML.GetNumber(xml, 'pLcto');
    DtComp:= PKG_XML.GetDate(xml, 'DtComp');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_LCTO_UTI_E(xml) THEN
        P_CHK_LCTO_UTI(xml, pRegFat, pLcto, DtComp);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_LCTO_UTI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_MODALIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pModalidade In Varchar2) IS
nAchou Number;
  Saida Exception;
BEGIN
    If pProcedimento Is Null Then
        Raise Saida;
    End If;
 If pModalidade Is Null Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_33)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_33', 'PKG_FFIS_M_LACTO_AIH_P321', 'Aviso: Modalidade de atendimento da conta não informado, verifique!'),false);
 Else
    Select Count(*)
      Into nAchou
      From Procedimento_SUS_Modalidade
     Where Cd_Procedimento = pProcedimento
       And Tp_Modalidade_Atendimento = pModalidade;
   If nAchou = 0 Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_34)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_34', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Modalidade de atendimento informado inválido para procedimento realizado.'),false);
   End If;
  End If;
 Exception
      When Saida Then
        Null;
EnD;
PROCEDURE P_VALIDA_MODALIDADE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pModalidade Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pModalidade:= PKG_XML.GetVarchar2(xml, 'pModalidade');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_MODALIDADE_E(xml) THEN
        P_VALIDA_MODALIDADE(xml, pProcedimento, pModalidade);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_MODALIDADE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>VALIDA_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
/*  PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
nAchou Number;
BEGIN
  Select Count(*)
    Into nAchou
    From Procedimento_SUS_Espec_Leito
   Where Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
     And Cd_Espec_SUS    = Reg_Fat.Cd_Espec_SUS;
  If Reg_Fat.Cd_Espec_SUS Is Not Null And Reg_Fat.Cd_Procedimento_Realizado Is Not Null Then
    If nAchou < 1 Then
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                    ,'Atenção: Especialidade informada '||Reg_Fat.Cd_Espec_SUS||' inválida para procedimento realizado '||Reg_Fat.Cd_Procedimento_Realizado,false);
         Reg_Fat.Cd_Espec_SUS:= Null;
    ElsIf Reg_Fat.Cd_Espec_SUS Is Null And Reg_Fat.Cd_Procedimento_Realizado Is Not Null Then
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                    ,'Aviso: Especialidade não informada, verifique.',false);
    End If;
  End If;
END;
PROCEDURE P_VALIDA_ESPEC_SUS_REG_FAT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.CD_ESPEC_SUS:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_REG_FAT_E(xml) THEN
        P_VALIDA_ESPEC_SUS(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_REG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS', REG_FAT.CD_ESPEC_SUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
*/
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PROCEDIMENTO_HOSPITAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, formParams IN OUT NOCOPY FormParamsRec) IS
nPrestador Number;
BEGIN
  nPrestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_PRESTADOR_AIH(xml);
  For record in (Select itre.Cd_Procedimento
                   From ItReg_Fat  itre
                      , procedimento_sus_detalhe  prdt
                  Where itre.cd_procedimento = prdt.cd_procedimento
                    and itre.Cd_Reg_Fat = pRegFat
                    And (prdt.SN_DIARIA_ACOMPANHANTE = 'S'
                     Or  prdt.SN_DIARIA_UTI = 'S')
                    And itre.Cd_Prestador <> nPrestador) Loop
    If Nvl(dbamv.pkg_mv2000.le_cliente,0) <> 971 then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_35)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_35', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s só permite lançamento para prestador padrão do hospital (%s).', arg_list(record.Cd_Procedimento, nPrestador)),true);
    End if;
  End loop;
END;
PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
--    formParams.P_HOSPITAL:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_HOSPITAL');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PROCEDIMENTO_HOSPITAL_E(xml) THEN
        P_VAL_PROCEDIMENTO_HOSPITAL(xml, pRegFat, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PROCEDIMENTO_HOSPITAL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CHK_ATI_MED_06</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHK_ATI_MED_06 (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Reg_Fat Number, pCd_Lancamento Number) IS
Cursor cCBO_Ati01 Is Select Cd_Prestador
                            , Cd_CBO_Prestador
                         From ItLan_Med
                        Where Cd_Reg_Fat    = pCd_Reg_Fat
                          And Cd_Lancamento = pCd_Lancamento
                          And Cd_Ati_Med    = '01';
  Cursor cCBO_Ati06 Is Select Cd_Prestador
                            , Cd_CBO_Prestador
                         From ItLan_Med
                        Where Cd_Reg_Fat    = pCd_Reg_Fat
                          And Cd_Lancamento = pCd_Lancamento
                          And Cd_Ati_Med    = '06';
  rCBO_Ati01 cCBO_Ati01%RowType;
  rCBO_Ati06 cCBO_Ati06%RowType;
  vCboAnest Dbamv.CBOS.Cd_CBOS%Type;
Begin
  Open cCBO_Ati01;
    Fetch cCBO_Ati01 Into rCBO_Ati01;
  Close cCBO_Ati01;
  Open cCBO_Ati06;
    Fetch cCBO_Ati06 Into rCBO_Ati06;
  Close cCBO_Ati06;
  if F_GET_DT_INTERNACAO(xml,pCd_Reg_Fat) < to_date('01082011', 'ddmmyyyy') then
    vCboAnest := '223104';
  else
    vCboAnest := '225151';
  end if;
 If rCBO_Ati01.Cd_Prestador = rCBO_Ati06.Cd_Prestador And (Nvl(rCBO_Ati01.Cd_CBO_Prestador,'0') <> Nvl(rCBO_Ati06.Cd_CBO_Prestador,'0') And rCBO_Ati06.Cd_CBO_Prestador <> vCboAnest) Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_113)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_113', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro1: cirurgião mesmo que o Anestesista, lançar o CBO %s.', arg_list(rCBO_Ati01.Cd_CBO_Prestador)),true);
  ElsIf rCBO_Ati01.Cd_Prestador <> rCBO_Ati06.Cd_Prestador And rCBO_Ati06.Cd_CBO_Prestador <> vCboAnest Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_114)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_114', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro2: CBO não é Anestesiologia, por favor lançar o CBO %s.', arg_list(vCboAnest)),true); -- PDA 535088
 End If;
End;
PROCEDURE P_CHK_ATI_MED_06 (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCd_Reg_Fat Number;
  pCd_Lancamento Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCd_Reg_Fat:= PKG_XML.GetNumber(xml, 'pCd_Reg_Fat');
    pCd_Lancamento:= PKG_XML.GetNumber(xml, 'pCd_Lancamento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_ATI_MED_06_E(xml) THEN
        P_CHK_ATI_MED_06(xml, pCd_Reg_Fat, pCd_Lancamento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_ATI_MED_06_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_PACOTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) IS
BEGIN
  Update ItReg_fat
   Set SN_Pertence_Pacote = 'S'
 Where Cd_Reg_Fat = pRegFat
   And Cd_Procedimento In (Select Cd_Procedimento
                             From Procedimento_SUS_Detalhe
                            Where SN_Procedimento_Faturado = 'N')
  And Substr(Cd_Procedimento,1,2)= '99';
END;
PROCEDURE P_DEFINE_PACOTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PACOTE_E(xml) THEN
        P_DEFINE_PACOTE(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PACOTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_CORRIGE_LCTO_CBO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_CORRIGE_LCTO_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pCompet in Date, pAtualiza in out Varchar2) IS
      Cursor cExecRegrExp(P_PROCEDIMENTO varchar2) Is
    Select count(*)
          From DBAMV.EXCECAO_REGRA_EXPORTACAO
         Where CD_PROCEDIMENTO = P_PROCEDIMENTO
       And CD_MULTI_EMPRESA = PKG_MV2000.LE_EMPRESA;
    nExcecao number := 0;
    nControle number:= 0;
BEGIN
  For record In (Select i.Cd_Reg_Fat
                      , i.Cd_lancamento
                      , i.Cd_Procedimento
                      , v.sn_exige_cpf_cbo
                      ,Decode(dbamv.fnc_ffis_prestador_exportacao(i.Cd_Reg_Fat,i.Cd_Lancamento)
                              ,0,i.Cd_Prestador
                              ,Dbamv.Fnc_FFIS_Prestador_Exportacao(i.Cd_Reg_Fat,i.Cd_Lancamento)) cd_prestador
                   From dbamv.Reg_Fat r
                      , dbamv.ItReg_Fat i
                      , dbamv.procedimento_detalhe_vigencia v
                  Where r.Cd_Reg_Fat = i.Cd_Reg_Fat
                    and i.cd_procedimento = v.cd_procedimento
                    and pCompet BETWEEN v.dt_validade_inicial
                                    AND Nvl(v.dt_validade_final, pCompet)
                    And i.cd_prestador Is Not Null
                    And i.Cd_CBO_Prestador Is Not Null
                    And i.Cd_Tipo_Vinculo = 1
                    And r.Cd_Reg_Fat = pRegFat) Loop
    Open cExecRegrExp(record.cd_procedimento);
    Fetch cExecRegrExp Into nExcecao;
    Close cExecRegrExp;
    If nExcecao <= 0 Then
        select Count(*)
          into nControle
          from dbamv.procedimento_cbo_vigencia
         where cd_procedimento = record.cd_procedimento
           and Trunc(pCompet, 'MM') BETWEEN dt_validade_inicial
                                        AND Nvl(dt_validade_final, Trunc(pCompet, 'MM'));
        if nControle > 0 and record.sn_exige_cpf_cbo = 'S' Then
            PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:','Prestador ('||record.cd_prestador||') CNPJ com o procedimento ('||record.cd_procedimento||') que exige CNS/CBO.',true);
        END IF;
    END IF;
    Update ItReg_Fat
       Set Cd_CBO_Prestador = Null
     Where Cd_Reg_Fat       = record.Cd_Reg_Fat
       And Cd_lancamento    = record.Cd_lancamento
       And Cd_Procedimento  = record.Cd_Procedimento;
    pAtualiza := 'S';
  End Loop;
  For record In (Select ItReg_Fat.Cd_Reg_Fat
                      , ItReg_Fat.Cd_lancamento
                      , ItReg_Fat.Cd_Procedimento
                   From Reg_Fat
                      , ItReg_Fat
                  Where Reg_Fat.Cd_Reg_Fat = ItReg_Fat.Cd_Reg_Fat
                    And ItReg_Fat.cd_prestador Is Null
                    And ItReg_Fat.Cd_CBO_Prestador Is Not Null
                    And Reg_Fat.Cd_Reg_Fat = pRegFat) Loop
      Update ItReg_Fat
         Set Cd_CBO_Prestador = Null
       Where Cd_Reg_Fat       = record.Cd_Reg_Fat
         And Cd_lancamento    = record.Cd_lancamento
         And Cd_Procedimento  = record.Cd_Procedimento;
      pAtualiza := 'S';
  End Loop;
  Commit;
  if pAtualiza is null or pAtualiza = '' then
    pAtualiza := 'N';
  end if;
END;
PROCEDURE P_DML_CORRIGE_LCTO_CBO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
    pCompet DATE;
    pAtualiza char(1);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat := PKG_XML.GetNumber(xml, 'pRegFat');
        pCompet := PKG_XML.GetDate(xml, 'pCompet');
        pAtualiza := PKG_XML.GetVARCHAR2(xml, 'pAtualiza');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_LCTO_CBO_E(xml) THEN
        P_DML_CORRIGE_LCTO_CBO(xml, pRegFat, pCompet, pAtualiza);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_LCTO_CBO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Prc_Lanca_CBO_Prestador</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_LANCA_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
Cursor cCBO Is
    Select SN_Exige_CPF_CBO, trunc(dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(reg.nr_identificacao,reg.dt_inicio,reg.dt_final, null),'MM') compet
      From dbamv.Procedimento_detalhe_vigencia pdv
         , dbamv.reg_fat reg
         , dbamv.itreg_fat itr
     Where itr.cd_reg_fat = reg.cd_reg_fat
       and reg.cd_reg_fat = itreg_fat.CD_REG_FAT
       and pdv.Cd_Procedimento = itr.cd_procedimento
       and itr.cd_procedimento = itreg_fat.CD_PROCEDIMENTO
       and dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(reg.nr_identificacao,reg.dt_inicio,reg.dt_final, null)
           between pdv.dt_validade_inicial AND Nvl(pdv.dt_validade_final, dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(reg.nr_identificacao,reg.dt_inicio,reg.dt_final, null));
  Saida Exception;
      vSN Varchar2(1);
  pCompet date;
Begin
    Open cCBO;
      Fetch cCBO Into vSN, pCompet;
  Close cCBO;
    -- Aborta se já estiver preenchido e o procedimento obrigar
    If  ItReg_Fat.Cd_CBO_Prestador Is Not Null And vSN = 'S' Then
      Raise Saida;
    End If;
    -- Limpa o campo se o procedimento não obrigar
    If  ItReg_Fat.Cd_CBO_Prestador Is Not Null And vSN = 'N' Then
      ItReg_Fat.Cd_CBO_Prestador := null;
    End If;
  If ItReg_Fat.Cd_Tipo_Vinculo <> 1 Then
      If ItReg_Fat.Cd_CBO_Prestador Is Null Then
        ItReg_Fat.Cd_CBO_Prestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_CBO_PRESTADOR(xml,ITREG_FAT.CD_PRESTADOR,ITREG_FAT.CD_PROCEDIMENTO, pCompet);
      End If;
  Else
      If ItReg_Fat.Cd_CBO_Prestador is not null then
        ItReg_Fat.Cd_CBO_Prestador := null;
      end if;
  End if;
Exception
      When Saida Then
        Null;
End;
PROCEDURE P_LANCA_CBO_PRESTADOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itreg_fat ITREG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    ITREG_FAT.CD_CBO_PRESTADOR:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_CBO_PRESTADOR');
    ITREG_FAT.CD_TIPO_VINCULO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_TIPO_VINCULO');
    ITREG_FAT.CD_PRESTADOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_PRESTADOR');
    ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_CBO_PRESTADOR_E(xml) THEN
        P_LANCA_CBO_PRESTADOR(xml, ITREG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_CBO_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_CBO_PRESTADOR', ITREG_FAT.CD_CBO_PRESTADOR);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_TIPO_VINCULO', ITREG_FAT.CD_TIPO_VINCULO);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_PRESTADOR', ITREG_FAT.CD_PRESTADOR);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CHK_DIAS_PERIODO_VS_LACTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pProcedimento In Varchar2) IS
BEGIN
  If FNC_FFIS_VALIDA_CALC_AIH (pProcedimento) Then
    Declare
      Cursor cDados Is select decode(nr_identificacao, 1, nvl((trunc(reg_fat.dt_final) - trunc(reg_fat.dt_inicio)),0), (to_number(substr(to_char(dt_final,'DDMMYYYY'),1,2))-1)) Qt_Lancamento
                            , motivo_cobranca_sus.cd_motivo
                            , sn_pago_por_dia
                         from reg_fat reg_fat
                            , motivo_cobranca_sus
                            , procedimento_sus_detalhe pdetal
                        where reg_fat.cd_reg_fat       = pRegFat
                          and reg_fat.cd_procedimento_realizado = pdetal.cd_procedimento
                          and reg_fat.cd_mot_alt       = motivo_cobranca_sus.cd_motivo;
      rDados      cDados%RowType;
      nQtLancItem Number;
      nUTI        Number;
      nUnificada  Number;
    Begin
      Open cDados;
        Fetch cDados Into rDados;
      Close cDados;
      nUTI:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
      nUnificada:= Pkg_ffis_M_LACTO_AIH_P321.F_DIAS_DIFERENCA_UNIFICACAO(xml, pRegFat);
      If substr(rDados.Cd_motivo,1,1) in (2,3,4) then
        rDados.Qt_Lancamento:= (rDados.Qt_Lancamento + 1 ) - nUnificada - nUTI;
      End If;
      If rDados.Qt_Lancamento = 0 and rDados.SN_Pago_Por_Dia = 'S' Then
        rDados.Qt_Lancamento:= 1;
      End If;
      Select Sum(Qt_Lancamento) Qt_Lancamento
        Into nQtLancItem
        From ItReg_Fat
       Where ItReg_Fat.Cd_Reg_Fat = pRegFat
         And ItReg_Fat.Cd_Procedimento = pProcedimento;
      If rDados.Qt_Lancamento > nQtLancItem Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_38)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_38', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s com cobrança de dias (%s) inferior ao permitido pelo período da conta (%s) - Dias de UTI(%s).'
            , arg_list(pProcedimento, nQtLancItem, (rDados.Qt_Lancamento+nUTI), nUTI)),false);
      End If;
      If rDados.Qt_Lancamento < nQtLancItem  Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_39)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_39', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s com cobrança de dias (%s) superior ao permitido pelo período da conta (%s) - Dias de UTI(%s).'
            , arg_list(pProcedimento, nQtLancItem, (rDados.Qt_Lancamento+nUTI), nUTI)),true);
      End If;
    End;
  End If;
END;
PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_DIAS_PERIODO_VS_LACTO_E(xml) THEN
        P_CHK_DIAS_PERIODO_VS_LACTO(xml, pRegFat, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_DIAS_PERIODO_VS_LACTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_NR_GUIA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pAIH In Varchar2) IS
Cursor cNrGuia is
  Select Cd_reg_fat
       , Nr_Guia
       , Cd_Remessa
    From Reg_Fat
   Where Cd_Atendimento in (Select Cd_Atendimento
                              From Reg_fat
                             Where Cd_Reg_Fat = pRegFat)
     And Cd_Reg_Fat <> pRegFat;
  vNrGuia  cNrGuia%Rowtype;
  dCompet1 Date;
  dCompet2 Date;
  Saida    Exception;
BEGIN
    For Record in cNrGuia Loop
    dCompet1:=    Pkg_ffis_M_LACTO_AIH_P321.F_F_COMPET_CONTA(xml, pRegFat);
    dCompet2:=    Pkg_ffis_M_LACTO_AIH_P321.F_F_COMPET_CONTA(xml, record.Cd_Reg_Fat);
        if not Pkg_ffis_M_LACTO_AIH_P321.F_F_AIH_CONTINUACAO(xml, pRegFat) and to_char(dCompet1,'mm/rrrr') = to_char(dCompet2,'mm/rrrr') and pAIH = Record.nr_guia then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_40)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_40', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro:  Número de Guia já Existente, Favor Digitar Outro Número de Guia Válido.'),true);
        end if;
  End Loop;
END;
PROCEDURE P_VALIDA_NR_GUIA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pAIH Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pAIH:= PKG_XML.GetVarchar2(xml, 'pAIH');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_GUIA_E(xml) THEN
        P_VALIDA_NR_GUIA(xml, pRegFat, pAIH);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_GUIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_REG_CIVIL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_REG_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
BEGIN
  For record In (Select Sum(Nvl(Cd_Pai,0))   Cd_Pai
                      , Sum(Nvl(Cd_Filho,0)) Cd_Filho
                   From (Select Cd_Lancamento Cd_Pai, 0 Cd_Filho
                           From ItReg_Fat
                          Where Cd_Reg_Fat = pRegFat
                            And Cd_Procedimento = '0801010047'
                            And Rownum = 1
                          Union
                         Select 0 cd_Pai, Cd_Lancamento Cd_Filho
                           From Registro_Civil
                          Where Cd_Reg_Fat = pRegFat)) Loop
    If record.Cd_Pai <> record.Cd_Filho Then
      Update Registro_Civil
         Set Cd_Lancamento = record.Cd_Pai
       Where Cd_Reg_Fat = pRegFat
         And Cd_Lancamento = record.Cd_Filho;
    End If;
    If record.Cd_Pai = 0 And record.Cd_Filho > 0 Then
      Delete Registro_Civil
       Where Cd_Reg_Fat = pRegFat
         And Cd_Lancamento = record.Cd_Filho;
    End If;
  End Loop;
  Commit;
END;
PROCEDURE P_DML_REG_CIVIL (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REG_CIVIL_E(xml) THEN
        P_DML_REG_CIVIL(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REG_CIVIL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_DADOS_LAQVASEC</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_DADOS_LAQVASEC (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pProcedimento in Varchar2) IS
  Cursor cDadosRea Is Select nvl(pd.sn_vasectomia, 'N') sn_vasectomia
                                             , nvl(pd.sn_laqueadura, 'N') sn_laqueadura
                                             , nvl(pd.sn_parto, 'N') sn_parto
                                             , nvl(pd.sn_cirurgia_multipla, 'N') sn_cirurgia_multipla
                                           From Dbamv.Procedimento_SUS_Detalhe pd
                                          Where pd.Cd_Procedimento = pProcedimento;
  rDadosRea cDadosRea%RowType;
  --PDA 528216 AAAJ 11/07/2012 Hosp ABC
    cursor cLaqVas is
    select it.cd_procedimento
         , pd.sn_vasectomia
         , pd.sn_laqueadura
         , pd.sn_parto
      from itreg_fat it
         , Procedimento_Detalhe_vigencia pd
     Where pd.Cd_Procedimento = it.cd_procedimento
       and trunc(it.dt_lancamento) between pd.dt_validade_inicial
                                   and Nvl(pd.dt_validade_final, trunc(it.dt_lancamento))
       and it.cd_reg_fat = pRegFat
       and it.sn_pertence_pacote = 'N'
       and nvl(it.sn_proced_realizado, 'N') = 'S'
       and (nvl(pd.sn_vasectomia, 'N') = 'S' or
            nvl(pd.sn_laqueadura, 'N') = 'S');
  rLaqVas cLaqVas%RowType;
  nAchou    Number;
  vAcao     varchar2(1);
  v_sn_vasectomia VARCHAR2(1):= 'N';
  v_sn_laqueadura VARCHAR2(1):= 'N';
BEGIN
  --PDA 528216AAAJ 11/07/2012 Hosp ABC --------------------------------------------------
  If pProcedimento Is Not Null Then
    Open cDadosRea;
      Fetch cDadosRea Into rDadosRea;
    Close cDadosRea;
    if nvl(rDadosRea.sn_cirurgia_multipla, 'N') = 'S' then
     rDadosRea := null;
      Select Count('X')
        into nAchou
        From Dbamv.Procedimento_Detalhe_vigencia pd
           , Dbamv.itreg_fat it
       Where pd.Cd_Procedimento = it.cd_procedimento
         and trunc(it.dt_lancamento) between pd.dt_validade_inicial
                                     and Nvl(pd.dt_validade_final, trunc(it.dt_lancamento))
         and it.cd_reg_fat = pRegFat
         and it.sn_pertence_pacote = 'N'
         and nvl(it.sn_proced_realizado, 'N') = 'S'
         and nvl(pd.sn_parto, 'N') = 'S';
      If nAchou > 0 then
          rDadosRea.SN_Parto := 'S';
      Else
          rDadosRea.SN_Parto := 'N';
      End if;
      for record in cLaqVas loop
            if v_sn_vasectomia = 'N' and record.sn_vasectomia = 'S' then
              v_sn_vasectomia := 'S';
            end if;
            if v_sn_laqueadura = 'N' and record.sn_laqueadura = 'S' then
              v_sn_laqueadura := 'S';
            end if;
      end loop;
      If v_sn_vasectomia = 'N' And v_sn_laqueadura = 'N' And rDadosRea.SN_Parto = 'N' Then
        vAcao := 'D';
      Elsif (v_sn_vasectomia = 'N' And v_sn_laqueadura = 'N') Then
        vAcao := 'U';
      End If;
    end if;
    if vAcao = 'D' then
      Select Count(*)
        Into nAchou
        From It_Parto
       Where Cd_Reg_Fat = pRegFat;
      If nAchou > 0 Then
        Delete It_Parto
         Where Cd_Reg_Fat = pRegFat;
      End If;
    elsif vAcao = 'U' then
      Update It_Parto
         Set cd_cid = null
           , qt_filhos = null
           , sn_gestacao_risco = null
           , cd_contraceptivo_anterior = null
           , cd_contraceptivo_atual = null
       Where Cd_Reg_Fat = pRegFat;
    end if;
    Commit;
  End If;
  -------------------------------------------------------------
END;
PROCEDURE P_DML_DADOS_LAQVASEC (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DADOS_LAQVASEC_E(xml) THEN
        P_DML_DADOS_LAQVASEC(xml, pRegFat, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DADOS_LAQVASEC_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_GRUPO_PROC_PADRAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2) IS
BEGIN
    For rec in (Select cd_procedimento
                            From procedimento_sus_detalhe
                           where cd_gru_pro is null ) Loop
        Update procedimento_sus_detalhe
           set cd_gru_pro = 70
         where cd_procedimento = rec.cd_procedimento;
         Pkg_ffis_M_LACTO_AIH_P321.P_P_COMMIT_FORM(xml, FSV_BLOCK_STATUS, FSV_MESSAGE_LEVEL);
  End Loop;
END;
PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  FSV_BLOCK_STATUS VARCHAR2(4000);
  FSV_MESSAGE_LEVEL VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    FSV_MESSAGE_LEVEL:= PKG_XML.GetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_GRUPO_PROC_PADRAO_E(xml) THEN
        P_DEFINE_GRUPO_PROC_PADRAO(xml, FSV_BLOCK_STATUS, FSV_MESSAGE_LEVEL);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_GRUPO_PROC_PADRAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    PKG_XML.SetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL', FSV_MESSAGE_LEVEL);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_LANCAMENTO_PAI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_LANCAMENTO_PAI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
nAchou Number;
BEGIN
  -- Corrige a coluna de lançamento pai caso tenha perdido a referência.
  Select Count(*)
    Into nAchou
    From ITREG_FAT
   where CD_LANCAMENTO_PAI is not null;
   if nAchou > 0 then
     UPDATE ITREG_FAT
        SET CD_LANCAMENTO_PAI = NULL
      WHERE CD_REG_FAT = pRegFat
        AND CD_LANCAMENTO_PAI NOT IN (SELECT CD_LANCAMENTO
                                        FROM ITREG_FAT
                                       WHERE CD_REG_FAT = pRegFat);
   end if;
   Commit;
END;
PROCEDURE P_DML_LANCAMENTO_PAI (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_LANCAMENTO_PAI_E(xml) THEN
        P_DML_LANCAMENTO_PAI(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_LANCAMENTO_PAI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_DIARIA_ACOMPANHANTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_DIARIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDA_Acomp in Number) IS
Cursor cDA_Item Is Select SUM(Qt_Lancamento)
                       From ItReg_Fat
                      Where Cd_Reg_Fat = pRegFat
                        And Cd_Procedimento In (Select Cd_Procedimento
                                                  From Procedimento_SUS_Detalhe
                                                 Where SN_Diaria_Acompanhante = 'S');
  Cursor cDA_Conta Is Select Nr_Diaria_Acompanhante
                        From Reg_Fat
                       Where Cd_Reg_Fat = pRegFat;
  nQtDA_Reg   number;
  nQtDA_ItReg number;
  vMsg        VARCHAR2(2000); -- pda 534769
BEGIN
    Open cDA_Item;
      Fetch cDA_Item into nQtDA_ItReg;
    Close cDA_Item;
  Open cDA_Conta;
    Fetch cDA_Conta into nQtDA_Reg;
  Close cDA_Conta;
  -- Executo a exclusão da diária de acompanhante
  If nvl(pDA_AComp,0) =  0 then
    Delete Diaria_UTI_SUS
      Where Cd_Reg_Fat = pRegFat
        And Cd_Lancamento in (Select Cd_Lancamento
                                From itreg_Fat
                               Where cd_procedimento in (select cd_procedimento
                                                           from procedimento_sus_detalhe
                                                          where sn_diaria_acompanhante = 'S')
                                 and cd_reg_fat = pRegFat);
    Delete
      From Itreg_Fat
     Where Cd_procedimento in (select cd_procedimento
                                 from procedimento_sus_detalhe
                                where sn_diaria_acompanhante = 'S')
       and Cd_reg_fat = pRegFat;
  End if;
  -- Caso encontre divergência, o lançamento de diária é atualizado
  If nQtDA_Reg <> nQtDA_ItReg And nQtDA_ItReg <> Nvl(pDA_Acomp,0) then
    -- PDA 534769 INI
    DBAMV.PKG_FFIS_VALIDA_LANCAMENTO_AIH.PRC_LANCA_QTD_COMPETENCIA(pRegFat, 'A', 'ACOMP', pDA_Acomp, vMsg);
/*
        UPDATE ITREG_FAT
           SET ITREG_FAT.QT_LANCAMENTO = nQtDA_ItReg
         WHERE ITREG_FAT.CD_REG_FAT = pRegFat
       AND ITREG_FAT.CD_PROCEDIMENTO IN (select cd_procedimento
                                           from procedimento_sus_detalhe
                                          where sn_diaria_acompanhante = 'S');
*/
    -- PDA 534769 FIM
  end if;
  Commit;
END;
PROCEDURE P_DML_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pDA_Acomp Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pDA_Acomp:= PKG_XML.GetNumber(xml, 'pDA_Acomp');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DIARIA_ACOMPANHANTE_E(xml) THEN
        P_DML_DIARIA_ACOMPANHANTE(xml, pRegFat, pDA_Acomp);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DIARIA_ACOMPANHANTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_CEP_PACIENTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_CEP_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec) IS
Cursor cCEP1 Is  SELECT cep.NM_LOCALIDADE,
                          cep.CD_UF
                     FROM CEP_LOCALIDADES cep,
                          CIDADE cida
                    WHERE cep.NM_LOCALIDADE = cida.NM_CIDADE
                      AND cep.CD_UF         = cida.CD_UF
                      AND cep.NR_CEP        = PACIENTE.NR_CEP;
  Cursor cCEP2 Is SELECT cida.CD_UF,
                         cida.NM_CIDADE
                    FROM CIDADE cida,
                         CEP_LOCALIDADES loca,
                         CEP_LOGRADOUROS logr
                   WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
                     AND loca.CD_UF         = cida.CD_UF
                     AND loca.NM_LOCALIDADE = cida.NM_CIDADE
                     AND logr.NR_CEP        = PACIENTE.NR_CEP;
  Cursor cCEP3 Is SELECT muem.NR_CEP,
                         loca.NM_LOCALIDADE,
                         muem.CD_UF,
                         muem.CD_CIDADE
                    FROM MULTI_EMPRESAS muem,
                         CEP_LOCALIDADES loca
                   where muem.CD_MULTI_EMPRESA = xml.multiEmpresa
                     and muem.NR_CEP           = loca.NR_CEP;
  Cursor cCEP4 Is SELECT muem.NR_CEP,
                     cida.CD_UF,
                     cida.NM_CIDADE,
                     cida.CD_CIDADE
                FROM CEP_LOCALIDADES loca
                   , CIDADE cida
                   , CEP_LOGRADOUROS logr
                   , MULTI_EMPRESAS muem
               WHERE logr.CD_LOCALIDADE    = loca.CD_LOCALIDADE
                 AND loca.CD_UF            = cida.CD_UF
                 AND loca.NM_LOCALIDADE    = cida.NM_CIDADE
                 AND muem.CD_MULTI_EMPRESA = xml.multiEmpresa
                 AND muem.NR_CEP           = logr.NR_CEP;
  Cursor cCEP5 Is SELECT muem.NR_CEP,
                         cida.CD_UF,
                         cida.NM_CIDADE,
                         cida.CD_CIDADE
                    FROM CEP_LOCALIDADES loca
                       , CIDADE cida
                       , CEP_LOGRADOUROS logr
                       , MULTI_EMPRESAS muem
                   WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
                     AND loca.CD_UF         = cida.CD_UF
                     AND loca.NM_LOCALIDADE = cida.NM_CIDADE
                     AND muem.NR_CEP        = logr.NR_CEP;
  Cursor cCEP6 Is SELECT cep.NR_CEP,
                         cida.CD_CIDADE
                    FROM CEP_LOCALIDADES cep,
                         CIDADE cida
                   WHERE cep.NM_LOCALIDADE = PACIENTE.DSP_NM_CIDADE
                     and cep.CD_UF         = PACIENTE.DSP_CD_UF
                     and cep.NM_LOCALIDADE = cida.NM_CIDADE
                     and cep.CD_UF         = cida.CD_UF;
   vCidade   varchar2(50);
   vUF       varchar2(02);
   nCEP      number;
   nCdCidade number;
   CEP_Cidade_UF_Nao_Condiz exception;
   Digite_o_CEP             exception;
begin
   begin
   -- ------------- Informado CEP, Cidade e UF ----------------
      if PACIENTE.NR_CEP        is Not Null and
         PACIENTE.DSP_NM_CIDADE is Not Null and
         PACIENTE.DSP_CD_UF     is Not Null then
         OPEN cCEP1;
           FETCH cCEP1 INTO vCidade, vUF;
         CLOSE cCEP1;
         if vCidade <> PACIENTE.DSP_NM_CIDADE or
            vUF     <> PACIENTE.DSP_CD_UF     then
            raise CEP_Cidade_UF_Nao_Condiz;
         end if;
      end if;
   exception
      when NO_DATA_FOUND then
           begin
              OPEN cCEP2;
                FETCH cCEP2 INTO vCidade, vUF;
              CLOSE cCEP2;
              if vCidade <> PACIENTE.DSP_NM_CIDADE or
                 vUF     <> PACIENTE.DSP_CD_UF     then
                 raise CEP_Cidade_UF_Nao_Condiz;
              end if;
           exception
              when NO_DATA_FOUND then
                   raise NO_DATA_FOUND;
           end;
   end;
   -- ---------------------------------------------------------
   -- ------------------ Nada Informado -----------------------
   begin
      if PACIENTE.NR_CEP        is Null and
         PACIENTE.DSP_NM_CIDADE is Null and
         PACIENTE.DSP_CD_UF     is Null then
              OPEN cCEP3;
                FETCH cCEP3 INTO PACIENTE.NR_CEP,
                                 PACIENTE.DSP_NM_CIDADE,
                                 PACIENTE.DSP_CD_UF,
                                 PACIENTE.CD_CIDADE;
              CLOSE cCEP3;
      end if;
   exception
      when NO_DATA_FOUND then
           begin
              OPEN cCEP4;
                FETCH cCEP4 INTO PACIENTE.NR_CEP,
                                 PACIENTE.DSP_CD_UF,
                                 PACIENTE.DSP_NM_CIDADE,
                                 PACIENTE.CD_CIDADE;
              CLOSE cCEP4;
           exception
              when NO_DATA_FOUND then
                   raise NO_DATA_FOUND;
           end;
   end;
   -- ---------------------------------------------------------
   -- ------------ So Informado a Cidade ou Estado -------------
   declare
      vCep      varchar2(8);
      vUF       varchar2(2);
      nCdCidade number;
      vDsCidade varchar2(30);
   begin
      if PACIENTE.NR_CEP is Null then
              OPEN cCEP5;
                FETCH cCEP5 INTO vCep,
                                 vUF,
                                 vDsCidade,
                                 nCdCidade ;
              CLOSE cCEP5;
         if vDsCidade = PACIENTE.DSP_NM_CIDADE and vUF = PACIENTE.DSP_CD_UF then
            PACIENTE.NR_CEP        := vCep;
            PACIENTE.DSP_NM_CIDADE := vDsCidade;
            PACIENTE.DSP_CD_UF     := vUF;
            PACIENTE.CD_CIDADE     := nCdCidade;
         else
              OPEN cCEP6;
                FETCH cCEP6 INTO PACIENTE.NR_CEP,
                                 PACIENTE.CD_CIDADE;
              CLOSE cCEP6;
            if PACIENTE.NR_CEP is null then
               raise Digite_o_CEP;
            end if;
         end if;
      end if;
   exception
      when NO_DATA_FOUND then
           raise NO_DATA_FOUND;
   end;
   -- ---------------------------------------------------------
 Begin
   if PACIENTE.CD_PACIENTE is Null then
      select SEQ_PACIENTE.NEXTVAL
        into PACIENTE.CD_PACIENTE
        from SYS.DUAL;
   end if;
  Paciente.Cd_Multi_Empresa := formParams.P_Empresa;
  Exception
    when NO_DATA_FOUND then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_41)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_41', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro Interno: Nenhuma linha na tabela SYS.DUAL.'),TRUE);
  End;
exception
   when NO_DATA_FOUND then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_42)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_42', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CEP, Cidade ou UF  Nao Cadastrados.'),TRUE);
   when CEP_Cidade_UF_Nao_Condiz then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_43)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_43', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CEP, Cidade ou UF Incompatíveis.'),TRUE);
   when Digite_o_CEP then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_44)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_44', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CEP deve ser informado.'),TRUE);
END;
PROCEDURE P_VAL_CEP_PACIENTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.NR_CEP:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CEP');
    PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
    PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
    PACIENTE.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADE');
    PACIENTE.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_PACIENTE');
    PACIENTE.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_MULTI_EMPRESA');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CEP_PACIENTE_E(xml) THEN
        P_VAL_CEP_PACIENTE(xml, PACIENTE, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CEP_PACIENTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADE', PACIENTE.CD_CIDADE);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_PACIENTE', PACIENTE.CD_PACIENTE);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_MULTI_EMPRESA', PACIENTE.CD_MULTI_EMPRESA);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PREST_ATENDIMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PREST_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec) IS
  -- op 32400 incluido o alias atd pois o parametro atendime tinha o msm nome da tabela
Cursor cPrestador    Is Select atd.cd_prestador
                           From atendime atd
                          Where atd.cd_atendimento = Atendime.Cd_Atendimento;
    nCdPrestador     Number;
Begin
  Open cPrestador;
    Fetch cPrestador Into nCdPrestador;
  Close cPrestador;
    If nCdPrestador is not null then
        Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, nCdPrestador);
    Else
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_45)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_45', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador do atendimento deve ser informado.'),True);
    End if;
End;
PROCEDURE P_VAL_PREST_ATENDIMENTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_ATENDIMENTO_E(xml) THEN
        P_VAL_PREST_ATENDIMENTO(xml, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_ATENDIMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_FORNECEDOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_FORNECEDOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pFornecedor in number, itcob_pre IN OUT NOCOPY ITCOB_PRERec) IS
vLst_Param PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_Param     := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-FORNECEDOR');
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-FORNECEDOR-RETORNO');
  --
  -- Adicionando os parametros esperados pela procedure
  --
  pkg_parametro.pr_criar_parametro(vLst_Param,'CD_USUARIO'      , xml.usuario); -- Código do Usuario
  pkg_parametro.pr_criar_parametro(vLst_Param,'CD_MULTI_EMPRESA', xml.multiEmpresa); -- Codigo da MultiEmpresa
  pkg_parametro.pr_criar_parametro(vLst_Param,'SN_RAISE'        , TRUE ); -- será ou não levantada a Exceção - "Parar"
  pkg_parametro.pr_criar_parametro(vLst_Param,'SN_MSG'          , TRUE ); -- Mostra ou não a Mensagem
  --
  -- Chamada da Procedure
  --
  M_PKG_FNFI_FORNECEDOR.P_RETORNA_DADOS(xml, pFornecedor
                                                         ,xml.multiEmpresa
                                                 ,xml.usuario
                                                 ,True
                                                 ,True
                                                 ,vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'SN_COBRANCA_FORNEC', ITCOB_PRE.SN_Cobranca_Fornec, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'NR_CGC_CPF', ITCOB_PRE.Nr_CGC_CPF, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'SN_CESSAO_CREDITO', ITCOB_PRE.SN_Cessao_Credito, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'SN_FORNECE_OPM', ITCOB_PRE.SN_Fornece_OPM, True);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_Param);
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamRet);
  --
End;
PROCEDURE P_RETORNA_DADOS_FORNECEDOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pFornecedor number;
  itcob_pre ITCOB_PRERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pFornecedor:= PKG_XML.Getnumber(xml, 'pFornecedor');
    ITCOB_PRE.SN_COBRANCA_FORNEC:= PKG_XML.GetVARCHAR2(xml, 'ITCOB_PRE.SN_COBRANCA_FORNEC');
    ITCOB_PRE.NR_CGC_CPF:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.NR_CGC_CPF');
    ITCOB_PRE.SN_CESSAO_CREDITO:= PKG_XML.GetVARCHAR2(xml, 'ITCOB_PRE.SN_CESSAO_CREDITO');
    ITCOB_PRE.SN_FORNECE_OPM:= PKG_XML.GetVARCHAR2(xml, 'ITCOB_PRE.SN_FORNECE_OPM');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_FORNECEDOR_E(xml) THEN
        P_RETORNA_DADOS_FORNECEDOR(xml, pFornecedor, ITCOB_PRE);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_FORNECEDOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ITCOB_PRE.SN_COBRANCA_FORNEC', ITCOB_PRE.SN_COBRANCA_FORNEC);
    PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.NR_CGC_CPF', ITCOB_PRE.NR_CGC_CPF);
    PKG_XML.SetVARCHAR2(xml, 'ITCOB_PRE.SN_CESSAO_CREDITO', ITCOB_PRE.SN_CESSAO_CREDITO);
    PKG_XML.SetVARCHAR2(xml, 'ITCOB_PRE.SN_FORNECE_OPM', ITCOB_PRE.SN_FORNECE_OPM);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CID_SEXO_PACIENTE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pSexoPac In Varchar2) IS
nAchou Number:=0;
 eSaida Exception;
BEGIN
  Select Count(*)
    Into nAchou
    From CID
   Where Cd_CID = pCID
     And Tp_Sexo In(pSexoPac, 'A');
  If pCID Is Null Then
    raise eSaida;
  End If;
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_46)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_46', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CID não Cadastrado ou Incompatível com Sexo do Paciente'),TRUE);
  End IF;
Exception
  When eSaida Then
    Null;
END;
PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCID Varchar2(4000);
  pSexoPac Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCID:= PKG_XML.GetVarchar2(xml, 'pCID');
    pSexoPac:= PKG_XML.GetVarchar2(xml, 'pSexoPac');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_SEXO_PACIENTE_E(xml) THEN
        P_VALIDA_CID_SEXO_PACIENTE(xml, pCID, pSexoPac);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_SEXO_PACIENTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_MODALIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
Cursor cModalidade Is Select tp_modalidade_atendi
                          From MULTI_EMPRESAS_MOD_ATENDIMENTO ME
                             , PROCEDIMENTO_SUS_MODALIDADE MO
                         Where ME.tp_modalidade_atendi = MO.tp_modalidade_atendimento
                           And ME.cd_multi_empresa     = formParams.P_EMPRESA
                           And ME.sn_ativo             = 'S'
                           And MO.tp_modalidade_atendimento not In ('A')
                           And MO.CD_PROCEDIMENTO      = NVL(Reg_Fat.Cd_Procedimento_Realizado
                                                            ,Reg_Fat.Cd_Procedimento_Solicitado)
                         ORDER BY TP_MODALIDADE_ATENDI;
Begin
  If Reg_Fat.Tp_Modalidade_Atendimento Is Null Then
    Open cModalidade;
      Fetch cModalidade Into Reg_Fat.Tp_Modalidade_Atendimento;
    Close cModalidade;
  End if;
END;
PROCEDURE P_DEFINE_MODALIDADE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.CD_PROCEDIMENTO_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO');
    REG_FAT.TP_MODALIDADE_ATENDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.TP_MODALIDADE_ATENDIMENTO');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_MODALIDADE_E(xml) THEN
        P_DEFINE_MODALIDADE(xml, REG_FAT, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_MODALIDADE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO', REG_FAT.CD_PROCEDIMENTO_SOLICITADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.TP_MODALIDADE_ATENDIMENTO', REG_FAT.TP_MODALIDADE_ATENDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number,pSolicitado in varchar2,pRealizado in varchar2,pEsp IN OUT NOCOPY Varchar2) IS
cursor cEspec is select ESPEC_SUS.CD_ESPEC_SUS
                      from ESPEC_SUS
                          ,PROCEDIMENTO_SUS_ESPEC_LEITO
                      where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS    = ESPEC_SUS.CD_ESPEC_SUS
                        and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO        = 'S'
                        and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado)
                        and rownum = 1;
    nIdade Number;
    nAchou Number;
    vCdEsp Espec_SUS.Cd_Espec_SUS%Type;
Begin
  select Count(*)
    Into nAchou
    from ESPEC_SUS
       , PROCEDIMENTO_SUS_ESPEC_LEITO
   where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS = ESPEC_SUS.CD_ESPEC_SUS
     and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO = 'S'
     and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado);
  If nAchou = 1 Then
    Open cEspec;
      Fetch cEspec Into vCdEsp;
    Close cEspec;
  If vCdEsp <> Nvl(pEsp,'0') Then
      pEsp:= vCdEsp;
  End If;
  ElsIf nAchou > 1 Then
    select Count(*)
      Into nAchou
      from ESPEC_SUS
         , PROCEDIMENTO_SUS_ESPEC_LEITO
     where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS = ESPEC_SUS.CD_ESPEC_SUS
       and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO = 'S'
       and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado)
       and ESPEC_SUS.CD_ESPEC_SUS IN ('03','07');
    If nAchou = 2 Then
        nIdade:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_IDADE_PACIENTE(xml, pRegFat);
        If nIdade > 18 Then
          If '03' <> Nvl(pEsp,'0') Then
            pEsp:= '03';
        End If;
        Else
          If '07' <> Nvl(pEsp,'0') Then
            pEsp:= '07';
          End If;
          select Count(*)
            Into nAchou
            from DBAMV.ESPEC_SUS
               , DBAMV.PROCEDIMENTO_SUS_ESPEC_LEITO
           where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS = ESPEC_SUS.CD_ESPEC_SUS
             and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO = 'S'
             and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado)
             and ESPEC_SUS.CD_ESPEC_SUS = pEsp;
          If nAchou = 0 Then
            pEsp:= '';
          End If;
        End If;
    End if;
  End If;
End;
PROCEDURE P_DEFINE_ESPEC_SUS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat number;
  pSolicitado varchar2(4000);
  pRealizado varchar2(4000);
  pEsp Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
    pSolicitado:= PKG_XML.Getvarchar2(xml, 'pSolicitado');
    pRealizado:= PKG_XML.Getvarchar2(xml, 'pRealizado');
    pEsp:= PKG_XML.GetVarchar2(xml, 'pEsp');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ESPEC_SUS_E(xml) THEN
        P_DEFINE_ESPEC_SUS(xml, pRegFat, pSolicitado, pRealizado, pEsp);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ESPEC_SUS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVarchar2(xml, 'pEsp', pEsp);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>CHECA_CPF_PRESTADOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_CHECA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdPrestador number) IS
nCpf        varchar2(14) := null;
BEGIN
  Select nr_cpf_cgc
    Into nCpf
    From prestador
   Where cd_prestador = nCdPrestador;
  If nCpf is null then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_47)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_47', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Prestador %s sem a informação CPF/CNPJ', arg_list(nCdPrestador)),TRUE);
  End if;
END;
PROCEDURE P_CHECA_CPF_PRESTADOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  nCdPrestador number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    nCdPrestador:= PKG_XML.Getnumber(xml, 'nCdPrestador');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECA_CPF_PRESTADOR_E(xml) THEN
        P_CHECA_CPF_PRESTADOR(xml, nCdPrestador);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECA_CPF_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PREST_CONTA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PREST_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Varchar2) IS
Cursor cPrestador Is Select Cd_Prestador_Responsavel
                              , Cd_Prestador_Auditor
                         From Reg_Fat
                          Where Cd_Reg_Fat = pReg_Fat;
    nCdPrestResp     Number;
    nCdPrestAud     Number;
Begin
      Open cPrestador;
        Fetch cPrestador Into nCdPrestResp, nCdPrestAud;
    Close cPrestador;
    If nCdPrestResp is not null then
        Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, nCdPrestResp);
    End if;
    If nCdPrestAud is not null then
        Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, nCdPrestAud);
    End if;
End;
PROCEDURE P_VAL_PREST_CONTA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pReg_Fat Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pReg_Fat:= PKG_XML.GetVarchar2(xml, 'pReg_Fat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_CONTA_E(xml) THEN
        P_VAL_PREST_CONTA(xml, pReg_Fat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_CONTA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_INSERE_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_INSERE_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec) IS
Cursor cRealizado Is Select Cd_Lancamento
                            , Cd_Procedimento
                         From ItReg_Fat
                        Where Cd_Reg_Fat = pRegFat
                          And SN_Proced_Realizado = 'S';
   rRealizado cRealizado%RowType;
   vSN_Anestesista  Varchar2(1);
   vSN_ExgEquipe    Varchar2(1);
   nAuxiliares      Number:= 0;
   nNewLancamento   Number:= 0;
   nAchou_Realizado Number:= 0;
   nAchou_EqpMedica Number:= 0;
   Saida      Exception;
begin
  If global.vCtaFechada = 'S' Then
    Raise Saida;
  End If;
  -- Verifico se existe realizado na conta
  Select Count(*)
    Into nAchou_Realizado
    From ItReg_Fat
   Where SN_Proced_Realizado = 'S'
     And Cd_Reg_Fat          = pRegFat;
     -- Verifico se a conta estar aberta e se existe procedimento realizado nos itens da conta
     if nAchou_Realizado = 0 And Reg_Fat.Cd_Procedimento_Realizado Is Not Null Then
        -- Capturo atributos do procedimento para montagem da equipe médica
        Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, Reg_Fat.Cd_Procedimento_Realizado
                             ,vSN_ExgEquipe
                             ,nAuxiliares
                             ,vSN_Anestesista);
        --------- Caso Houve Mudanca de Realizado com equipe, limpa prestador Ant ---------
        If nAuxiliares > 0 Or vSN_Anestesista = 'S' Then
              CG$CTRL.CD_PRESTADOR_REA_ANT := Null;
        End If;
        -----------------------------------------------------------------------------------
        -- Insere nos itens da conta o realizado (caso o obg equipe médica o prestador fica em branco)
        Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_ITREG_FAT(xml, pRegFat,
                         nNewLancamento,
                         Reg_Fat.Cd_Procedimento_Realizado,
                         Reg_Fat.Dt_Inicio,
                         CG$CTRL.CD_SETOR_REA_ANT,
                         CG$CTRL.CD_PRESTADOR_REA_ANT,
                         1,
                         'S',
                         CG$CTRL.REFRESH_ITREG_FAT);
        -- Aqui começa a montagem da equipe médica
        if  vSN_ExgEquipe = 'S' then --And (nAuxiliares > 0 Or vSN_Anestesista = 'S') Then
           -- Verifico se já existe lançamentos na itlan_med para o realizado
           Select Count(*)
             Into nAchou_EqpMedica
             From ItLan_Med
            Where Cd_reg_fat    = Reg_Fat.Cd_Reg_Fat
              And Cd_lancamento = nNewLancamento;
           if nAchou_EqpMedica = 0 then
                 global.vChange := 'S';
              Pkg_ffis_M_LACTO_AIH_P321.P_MONTAR_EQUIPE(xml, pRegFat,
                             nNewLancamento,
                             Reg_Fat.Cd_Procedimento_Realizado, CG$CTRL, global);
           end if;
        end if;
   ElsIf nAchou_Realizado = 1 And Reg_Fat.Cd_Procedimento_Realizado Is Not Null And NOT(F_F_CONTA_CIR_MULTIPLA(xml,Reg_Fat.Cd_Procedimento_Realizado,Reg_fat.DT_INICIO)) Then
     Open cRealizado;
       Fetch cRealizado Into rRealizado;
     Close cRealizado;
     -- Verifico a existência de mudança de procedimento
     If rRealizado.Cd_Procedimento <> Reg_Fat.Cd_Procedimento_Realizado Then
       -- Capturo atributos do procedimento para montar a equipe médica
       Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, Reg_Fat.Cd_Procedimento_Realizado
                            ,vSN_ExgEquipe
                            ,nAuxiliares
                            ,vSN_Anestesista);
       -- Executo a mudança de procedimento
       Update ItReg_Fat
          Set Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
        Where Cd_Reg_Fat = pRegFat
          And Cd_Lancamento = rRealizado.Cd_Lancamento;
       -- Se o procedimento for de parto seráo inserido os dados padrões
       Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_DADOS_PARTO(xml, pRegFat,Reg_Fat.Cd_Procedimento_Realizado);
       -- Atualizo os itens da conta.
       CG$CTRL.REFRESH_ITREG_FAT:= 'S';
       -- Procuro equipe médica para o procedimento antigo
       Select Count(*)
         Into nAchou_EqpMedica
         From ItLan_Med
        Where Cd_Reg_Fat = pRegFat
          And Cd_Lancamento = rRealizado.Cd_Lancamento;
       -- Caso o novo procedimento não permita equipe médica, faço a exclusão
       If nAchou_EqpMedica > 0 And vSN_ExgEquipe = 'N' Then
          Delete ItLan_Med
              Where Cd_Reg_Fat = pRegFat
                And Cd_Lancamento = rRealizado.Cd_Lancamento;
       -- Caso o novo procedimento permita Ato Cirúrgico '01', faço a exclusão.
        ElsIf nAchou_EqpMedica > 0 And (vSN_ExgEquipe = 'S' And vSN_Anestesista = 'N' And nAuxiliares = 0) Then
             Delete ItLan_Med
              Where Cd_Reg_Fat = pRegFat
                And Cd_Lancamento = rRealizado.Cd_Lancamento;
        -- Caso o novo procedimento permita equipe médica, aqui começa a montagem
--        ElsIf nAchou_EqpMedica = 0 And (vSN_ExgEquipe = 'S' And (vSN_Anestesista = 'S' Or nAuxiliares > 0)) Then
        ElsIf nAchou_EqpMedica = 0 And vSN_ExgEquipe = 'S'  Then
                 global.vChange := 'S';
              Pkg_ffis_M_LACTO_AIH_P321.P_MONTAR_EQUIPE(xml, pRegFat,
                             rRealizado.Cd_Lancamento,
                             Reg_Fat.Cd_Procedimento_Realizado, CG$CTRL, global);
        End if;
     End If;
   End if;
Exception
  When Saida Then
    Null;
END;
PROCEDURE P_INSERE_REALIZADO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  reg_fat REG_FATRec;
  cg$ctrl CG$CTRLRec;
  global GlobalsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    CG$CTRL.CD_PRESTADOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT');
    CG$CTRL.CD_SETOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT');
    CG$CTRL.REFRESH_ITREG_FAT:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITREG_FAT');
    CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
    global.VCTAFECHADA:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCTAFECHADA');
    global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_REALIZADO_E(xml) THEN
        P_INSERE_REALIZADO(xml, pRegFat, REG_FAT, CG$CTRL, global);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_REALIZADO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT', CG$CTRL.CD_PRESTADOR_REA_ANT);
    PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT', CG$CTRL.CD_SETOR_REA_ANT);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITREG_FAT', CG$CTRL.REFRESH_ITREG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCTAFECHADA', global.VCTAFECHADA);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CONTA_ANTERIOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CONTA_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat Number) IS
Cursor cDadosConta (pReg Number) Is Select Trunc(Dt_Inicio) Dt_Inicio
                                         , Trunc(Dt_Final)  Dt_Final
                                         , Cd_Mot_Alt       Cd_Mot_Alt
                                         , Cd_Atendimento   Cd_Atendimento
                                      From Reg_Fat
                                     Where Cd_Reg_Fat = pReg;
  Cursor cMaxReg(pAtendimento Varchar2) Is Select Max(Cd_Reg_Fat)
                                             From Reg_Fat r
                                                , Atendime a
                                            Where a.Cd_Atendimento = r.Cd_Atendimento
                                              And nvl(r.SN_Fechada,'N') = 'N'
                                              And r.Cd_Reg_Fat          < pRegFat
                                              And r.Cd_Atendimento      = pAtendimento
                                              And r.Cd_Reg_Fat_Glosa Is Null;
  nRegAnt     Number;
  rDadosConta cDadosConta%RowType;
  rDadosFat   cDadosConta%RowType;
Begin
   Open cDadosConta(pRegFat);
     Fetch cDadosConta Into rDadosFat;
   Close cDadosConta;
    Open cMaxReg(rDadosFat.Cd_Atendimento);
      Fetch cMaxReg Into nRegAnt;
    Close cMaxReg;
  if nRegAnt <> nvl(pRegFat,0) then
       Open cDadosConta(nRegAnt);
         Fetch cDadosConta Into rDadosConta;
        Close cDadosConta;
     if rDadosConta.Dt_Final is null then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_48)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_48', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Conta Anterior Sem Data de Alta.'),TRUE);
     end if;
     if rDadosConta.Cd_Mot_Alt is null then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_49)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_49', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Conta Anterior Sem Motivo de Alta.'),TRUE);
     end if;
  end if;
End;
PROCEDURE P_VALIDA_CONTA_ANTERIOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CONTA_ANTERIOR_E(xml) THEN
        P_VALIDA_CONTA_ANTERIOR(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CONTA_ANTERIOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_DATA_INICIO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_DATA_INICIO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
  if REG_FAT.DT_INICIO is null  then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_50)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_50', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data Internação não pode está em branco'),TRUE);
  end if;
  if REG_FAT.DT_INICIO < REG_FAT.DT_ATENDIMENTO then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_51)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_51', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data de Internação da conta anterior a data do Atendimento'),TRUE);
  end if;
  if REG_FAT.DT_ALTA is not null and
    REG_FAT.DT_INICIO > REG_FAT.DT_ALTA then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_52)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_52', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data de Internação após a data de alta.'),TRUE);
  end if;
  if not Pkg_ffis_M_LACTO_AIH_P321.F_VALIDA_PERIODO_CONTA(xml, reg_fat.cd_reg_fat,trunc(REG_FAT.DT_inicio),trunc(REG_FAT.DT_FINAL)) then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_53)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_53', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: A conta possui itens com data de lançamento fora do novo período.'),TRUE);
  end if;
END;
PROCEDURE P_VALIDA_DATA_INICIO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.DT_ATENDIMENTO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_ATENDIMENTO');
    REG_FAT.DT_ALTA:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_ALTA');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
--    formParams.P_HOSPITAL:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_HOSPITAL');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DATA_INICIO_E(xml) THEN
        P_VALIDA_DATA_INICIO(xml, REG_FAT, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DATA_INICIO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_ATENDIMENTO', REG_FAT.DT_ATENDIMENTO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_ALTA', REG_FAT.DT_ALTA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_EXCLUI_DIARIAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_EXCLUI_DIARIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number
                                ,pDtAlta In Date) IS
BEGIN
  If pDtAlta is null Then
    Delete ItReg_Fat
     Where Cd_Reg_Fat = pRegFat
       And Cd_Procedimento In (Select Cd_Procedimento
                                 From Procedimento_SUS_Detalhe
                                Where SN_Diaria_UTI = 'S'
                                   Or SN_Diaria_Acompanhante = 'S'
                                   Or SN_Permanencia_Maior = 'S');
  Commit;
  End if;
END;
PROCEDURE P_DML_EXCLUI_DIARIAS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pDtAlta Date;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pDtAlta:= PKG_XML.GetDate(xml, 'pDtAlta');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_EXCLUI_DIARIAS_E(xml) THEN
        P_DML_EXCLUI_DIARIAS(xml, pRegFat, pDtAlta);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_EXCLUI_DIARIAS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                              ,pEspec_SUS    In Varchar2) IS
nAchou  Number;
  nAchou2    Number;
Begin
  If pProcedimento Is Not Null And pEspec_SUS Is Not Null Then
        Select Count(*)
          Into nAchou
          From Procedimento_SUS_Espec_Leito
         Where Cd_Procedimento = pProcedimento
           And SN_Ativo        = 'S';
    If nAchou > 0 Then
        Select Count(*)
          Into nAchou2
          From Procedimento_SUS_Espec_Leito
         Where Cd_Procedimento = pProcedimento
           And Cd_Espec_SUS    = pEspec_SUS
           And SN_Ativo        = 'S';
         If nAchou2 < 1 Then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_54)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_54', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Especialidade informada incompatível com o procedimento realizado.'),true);
         End If;
    End If;
  ElsIf pEspec_SUS Is Null And pProcedimento Is Not Null Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml,pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_55)
                                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_55', 'PKG_FFIS_M_LACTO_AIH_P321', 'Aviso: Especialidade não informada, verifique.'),false);
  End If;
End;
PROCEDURE P_VALIDA_ESPEC_SUS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pEspec_SUS Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pEspec_SUS:= PKG_XML.GetVarchar2(xml, 'pEspec_SUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_E(xml) THEN
        P_VALIDA_ESPEC_SUS(xml, pProcedimento, pEspec_SUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_GUIAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_GUIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento In Number, pReg_Fat In Number, pNr_Guia In Varchar2) IS
vMens varchar2(500);
begin
     if pNr_Guia is not null then
      pack_sus.VALIDA_GUIA_SUS ( xml.multiEmpresa
                                     , pAtendimento
                                     , pReg_Fat
                                     , pNr_Guia
                                     , 'I'
                                     , False
                                     , vMens );
      if vMens is not null then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_56)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_56', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s', arg_list(vMens)),TRUE);
      end if;
   end if;
end;
PROCEDURE P_VALIDA_GUIAS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pAtendimento Number;
  pReg_Fat Number;
  pNr_Guia Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pAtendimento:= PKG_XML.GetNumber(xml, 'pAtendimento');
    pReg_Fat:= PKG_XML.GetNumber(xml, 'pReg_Fat');
    pNr_Guia:= PKG_XML.GetVarchar2(xml, 'pNr_Guia');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GUIAS_E(xml) THEN
        P_VALIDA_GUIAS(xml, pAtendimento, pReg_Fat, pNr_Guia);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GUIAS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_SOL_REALIZADO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_SOL_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProc_Sol In Varchar2
                                                                           ,pProc_Rea In Varchar2) IS
        Cursor cProcedimento  Is Select Detal.SN_Solicitado_Igual_Realizado
                                      , Detal.SN_Admite_Mudanca_Procedimento
                                   From dbamv.Procedimento_SUS Proc
                                      , dbamv.procedimento_detalhe_vigencia  Detal    -- #OP:44246 // LPDO
                                  Where Proc.Cd_Procedimento = Detal.Cd_Procedimento
                                    And Proc.Cd_Procedimento = pProc_Sol;
    rProcedimento cProcedimento%RowType;
Begin
    Open cProcedimento;
      Fetch cProcedimento Into rProcedimento;
    Close cProcedimento;
    If rProcedimento.SN_Solicitado_Igual_Realizado = 'S' And pProc_Sol <> pProc_Rea Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_57)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_57', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento solicitado não admite cobrança de realizado diferente de %s.', arg_list(pProc_Sol)),TRUE);
    End if;
       If rProcedimento.SN_Admite_Mudanca_Procedimento = 'N'
           And Nvl(pProc_Rea, '0') <> Nvl(pProc_Sol,'0') Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_58)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_58', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento solicitado %s não admite mudanca de procedimento.', arg_list(pProc_Sol)),TRUE);
       End if;
End;
PROCEDURE P_VALIDA_SOL_REALIZADO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProc_Sol Varchar2(4000);
  pProc_Rea Varchar2(4000);
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProc_Sol:= PKG_XML.GetVarchar2(xml, 'pProc_Sol');
    pProc_Rea:= PKG_XML.GetVarchar2(xml, 'pProc_Rea');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SOL_REALIZADO_E(xml) THEN
        P_VALIDA_SOL_REALIZADO(xml, pProc_Sol, pProc_Rea);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SOL_REALIZADO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_CID_PADRAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_CID_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec) IS
    Cursor cProcedimento(pProcedimento Varchar2) Is
        Select SN_Cirurgia_Multipla
          From Dbamv.Procedimento_SUS_Detalhe
         Where Cd_Procedimento = pProcedimento;
     rProcSUS cProcedimento%RowType;
    Cursor cCID_Padrao Is Select CID.Cd_CID
                               , CID.Ds_CID
                            From Procedimento_SUS_CID
                               , CID
                         Where Procedimento_SUS_CID.Cd_CID = CID.Cd_CID
                           And Procedimento_SUS_CID.Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
                           And Procedimento_SUS_CID.SN_Padrao = 'S';
    Cursor cCID_Compat Is Select CID.Cd_CID
                               , CID.Ds_CID
                            From Procedimento_SUS_CID
                               , CID
                         Where Procedimento_SUS_CID.Cd_CID          = CID.Cd_CID
                           And Procedimento_SUS_CID.Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
                           And Procedimento_SUS_CID.Cd_CID          = Atendime.Cd_CID
                           And Procedimento_SUS_CID.SN_Ativo        = 'S';
  NO_CID Exception;
  eSaida Exception;
  Begin
  Open cProcedimento(Reg_Fat.Cd_Procedimento_Realizado);
    Fetch cProcedimento Into rProcSUS;
  Close cProcedimento;
  -- Caso haja alteração de procedimento, o CID fica em branco para novo lançamento
  If Reg_Fat.Cd_Procedimento_Realizado <> Reg_Fat.Cd_Procedimento_Realizado_OLD Then
    Reg_Fat.Cd_CID_Principal:= '';
  End If;
  If  Nvl(rProcSUS.SN_Cirurgia_Multipla,'N') = 'S' Then
    Raise eSaida;
  End If;
    If Reg_Fat.Cd_CID_Principal Is Null Then
        If Nvl(dbamv.pkg_mv2000.le_cliente,0) = (1715) Then
          Open cCID_Padrao;
            Fetch cCID_Padrao Into Reg_Fat.Cd_CID_Principal
                                 , Reg_Fat.Dsp_Ds_Cid_Principal;
      If cCID_Padrao%NotFound Then
        Close cCID_Padrao;
        Raise NO_CID;
      Else
        Close cCID_Padrao;
      End If;
    Else
        Open cCID_Compat;
             Fetch cCID_Compat Into Reg_Fat.Cd_CID_Principal
                               , Reg_Fat.Dsp_Ds_Cid_Principal;
        If cCID_Compat%NotFound Then
            --
            Open cCID_Padrao;
              Fetch cCID_Padrao Into Reg_Fat.Cd_CID_Principal
                                   , Reg_Fat.Dsp_Ds_Cid_Principal;
            If cCID_Padrao%NotFound Then
              Close cCID_Padrao;
              Close cCID_Compat;
              Raise NO_CID;
            Else
              Close cCID_Padrao;
              --
              Close cCID_Compat;
            End If;
      End If;
        End If;
  End If;
    Exception
        When NO_CID Then
        --PKG_XML_MGS.msg_alert(xml,'Aviso: não existe CID padrão definido para este procedimento '||Reg_Fat.Cd_Procedimento_Realizado||'.','I',false);
        Reg_Fat.Cd_CID_Principal:= '';
        Reg_Fat.Dsp_Ds_Cid_Principal:='';
      When eSaida Then
        Null;
End;
PROCEDURE P_DEFINE_CID_PADRAO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  atendime ATENDIMERec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_CID:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.CD_CID');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD');
    REG_FAT.CD_CID_PRINCIPAL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_CID_PRINCIPAL');
    REG_FAT.DSP_DS_CID_PRINCIPAL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_DS_CID_PRINCIPAL');
--    formParams.P_HOSPITAL:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_HOSPITAL');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_CID_PADRAO_E(xml) THEN
        P_DEFINE_CID_PADRAO(xml, REG_FAT, ATENDIME, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_CID_PADRAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.CD_CID', ATENDIME.CD_CID);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD', REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_CID_PRINCIPAL', REG_FAT.CD_CID_PRINCIPAL);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_DS_CID_PRINCIPAL', REG_FAT.DSP_DS_CID_PRINCIPAL);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_REMESSA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, reg_fat IN OUT NOCOPY REG_FATRec) IS
Cursor cRemessa Is Select Cd_Remessa
                          , Ds_Remessa
                       From Remessa_Fatura
                      Where SN_Fechada = 'N'
                      and trunc(sysdate) between trunc(DT_ABERTURA,'mm') and trunc(nvl(DT_FECHAMENTO, trunc(sysdate)),'mm')   -- OP 16983 - 01/04/2014 - Diego Almeida
                        And Tp_Complexidade_Procedimento In (Select Tp_Complexidade_Procedimento
                                                               From Procedimento_SUS_Complexidade
                                                              Where Cd_Procedimento = pProcedimento
                                                                And SN_Ativo = 'S'
                                                             )
                      ORDER BY DT_ABERTURA DESC;
BEGIN
  If Reg_Fat.Cd_Remessa Is Null And pProcedimento Is Not Null Then
    Open cRemessa;
      Fetch cRemessa Into Reg_Fat.Cd_Remessa
                        , Reg_Fat.Dsp_Ds_Remessa;
    Close cRemessa;
  End If;
END;
PROCEDURE P_DEFINE_REMESSA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.DSP_DS_REMESSA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_REMESSA_E(xml) THEN
        P_DEFINE_REMESSA(xml, pProcedimento, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_REMESSA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA', REG_FAT.DSP_DS_REMESSA);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_CID_SECUNDARIO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_CID_SECUNDARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pCID_Pri In Varchar2 ,pCID_Sec In Varchar2,pSexPac In Varchar2) IS
Cursor cCidValid Is Select SubCat
                        From CID
                       Where Cd_CID In (Select Cd_SGru_CID
                                          From CID
                                         Where SubCat = 'S'
                                           And cd_cid = pCID_Sec
                                           And cd_cid <> Cd_SGru_CID);
  Cursor cCID Is Select Procedimento_SUS_CID.Cd_CID
                      , CID.TP_Sexo
                   From Procedimento_SUS_CID
                      , CID
                  Where Procedimento_SUS_CID.Cd_CID = CID.Cd_CID
                    And Procedimento_SUS_CID.SN_Secundario = 'S'
                    And Procedimento_SUS_CID.Cd_Procedimento = pProcedimento
                    And CID.Cd_CID = pCID_Pri;
vCID     CID.Cd_CID%Type;
vSubCat  CID.SubCat%Type;
vTpSexo  CID.Tp_Sexo%Type;
nAchou   Number;
Saida    Exception;
Begin
  If pCID_Sec Is Null Then
    Raise Saida;
  End If;
  Open  cCidValid;
    Fetch cCidValid  Into vSubCat;
  Close cCidValid;
  Open cCID;
    Fetch cCID Into vCID,vTpSexo;
  Close cCID;
/* PDA 367832
  If Nvl(vSubCat,'N') = 'S' Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                  ,'Erro: O CID informado é inválido para Internação SUS!',true);
  End If;
*/
  If vTpSexo Not In (pSexPac,'A') Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_59)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_59', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CID Secundário incompatível com sexo do paciente.!'),true);
  End If;
  Select Count(*)
    Into nAchou
    From Procedimento_SUS_CID
       , CID
   Where Procedimento_SUS_CID.Cd_CID = CID.Cd_CID
     And Procedimento_SUS_CID.SN_Secundario = 'S'
     And Procedimento_SUS_CID.Cd_Procedimento = pProcedimento;
  If Substr(pCID_Pri,1,1) not in ('S','T') Then
    If vCID Is Null And nAchou >= 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_60)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_60', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CID incompatível com o procedimento realizado. Consulte a lista de valores.'),true);
    End If;
  End If;
  If Substr(pCID_Pri,1,1) in ('S','T')
    and Substr(pCID_Sec,1,1) not in ( 'V', 'X', 'W', 'Y', 'Z' ) then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_61)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_61', 'PKG_FFIS_M_LACTO_AIH_P321', 'CID Secundário deve ser de causas externas(CID iniciado por V-X-W-Y-Z).'),true);
  End if;
Exception
     When Saida Then
       Null;
End;
PROCEDURE P_VAL_CID_SECUNDARIO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pCID_Pri Varchar2(4000);
  pCID_Sec Varchar2(4000);
  pSexPac Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCID_Pri:= PKG_XML.GetVarchar2(xml, 'pCID_Pri');
    pCID_Sec:= PKG_XML.GetVarchar2(xml, 'pCID_Sec');
    pSexPac:= PKG_XML.GetVarchar2(xml, 'pSexPac');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CID_SECUNDARIO_E(xml) THEN
        P_VAL_CID_SECUNDARIO(xml, pProcedimento, pCID_Pri, pCID_Sec, pSexPac);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CID_SECUNDARIO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_EXIGENCIA_CID_PRINCIPAL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pProcedimento In Varchar2,pCID In Varchar2) IS
Cursor cProcedimento Is Select SN_Cirurgia_Multipla
                            From Procedimento_SUS_Detalhe
                           Where Cd_Procedimento = pProcedimento;
  nAchou Number;
  vSN_Multiplo Procedimento_SUS_Detalhe.SN_Cirurgia_Multipla%Type;
  Saida Exception;
Begin
   If pCID Is Not Null Then
     Raise Saida;
   End If;
   Open cProcedimento;
     Fetch cProcedimento Into vSN_Multiplo;
   Close cProcedimento;
    If vSN_Multiplo = 'N' Then
      Select Count(*)
        Into nAchou
        From Procedimento_SUS_CID
       Where Cd_Procedimento = pProcedimento
         And SN_Ativo = 'S';
    Else
      Select Count(*)
        Into nAchou
        From Procedimento_SUS_CID
       Where Cd_Procedimento In (Select Cd_Procedimento
                                   From ItReg_Fat
                                  Where Cd_Reg_Fat = pRegFat
                                    And SN_Proced_Realizado = 'S')
         And SN_Ativo = 'S';
    End If;
    If nAchou > 0 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_62)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_62', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CID Principal deve ser informado, consulte lista de valores para obter CIDs Válidos.'),true);
    End If;
Exception
     When Saida Then
       Null;
End;
PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento Varchar2(4000);
  pCID Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pCID:= PKG_XML.GetVarchar2(xml, 'pCID');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_EXIGENCIA_CID_PRINCIPAL_E(xml) THEN
        P_EXIGENCIA_CID_PRINCIPAL(xml, pRegFat, pProcedimento, pCID);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_EXIGENCIA_CID_PRINCIPAL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_EQP_MEDICA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_EQP_MEDICA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                               ,pSN_Equipe      Out Varchar2
                               ,pNr_Auxiliar    Out Number
                               ,pSN_Anestesista Out Varchar2) IS
Cursor cProcedimento Is Select SN_Exige_Equipe_Medica
                               , Nr_Auxiliar
                               , SN_Ato_Anestesico
                            From Procedimento_SUS p
                               , Procedimento_SUS_Detalhe d
                           Where p.Cd_Procedimento = d.Cd_Procedimento
                             And p.Cd_Procedimento = pProcedimento;
BEGIN
  Open cProcedimento;
    Fetch cProcedimento Into pSN_Equipe,pNr_Auxiliar,pSN_Anestesista;
  Close cProcedimento;
END;
PROCEDURE P_DEFINE_EQP_MEDICA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pSN_Equipe Varchar2(4000);
  pNr_Auxiliar Number;
  pSN_Anestesista Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pSN_Equipe:= PKG_XML.GetVarchar2(xml, 'pSN_Equipe');
    pNr_Auxiliar:= PKG_XML.GetNumber(xml, 'pNr_Auxiliar');
    pSN_Anestesista:= PKG_XML.GetVarchar2(xml, 'pSN_Anestesista');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_EQP_MEDICA_E(xml) THEN
        P_DEFINE_EQP_MEDICA(xml, pProcedimento, pSN_Equipe, pNr_Auxiliar, pSN_Anestesista);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_EQP_MEDICA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVarchar2(xml, 'pSN_Equipe', pSN_Equipe);
    PKG_XML.SetNumber(xml, 'pNr_Auxiliar', pNr_Auxiliar);
    PKG_XML.SetVarchar2(xml, 'pSN_Anestesista', pSN_Anestesista);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_ABERTURA_TELAS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_ABERTURA_TELAS (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec) IS
Cursor cDadosProcedimento Is Select Nvl(pDetal.SN_Vasectomia,'N')           SN_Vasectomia
                                    , Nvl(pDetal.SN_Laqueadura,'N')           SN_Laqueadura
                                 From Procedimento_SUS                  pSUS
                                    , Procedimento_SUS_Detalhe          pDetal
                                Where pSUS.Cd_Procedimento = pDetal.Cd_Procedimento
                                  And pSUS.Cd_Procedimento = ItReg_Fat.Cd_Procedimento;
  rDadosProcedimento  cDadosProcedimento%RowType;
  vSN_ExgEquipe       Varchar2(1);
  vSN_Anestesista     Varchar2(1);
  nAuxiliares         Number;
begin
  Open  cDadosProcedimento;
    Fetch cDadosProcedimento Into rDadosProcedimento;
  Close cDadosProcedimento;
   -- Capturo atributos do procedimento para montagem da equipe médica.
   Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, ItReg_Fat.Cd_Procedimento
                        ,vSN_ExgEquipe
                        ,nAuxiliares
                        ,vSN_Anestesista);
   if vSN_ExgEquipe = 'S' then --(nAuxiliares > 0 Or vSN_Anestesista = 'S') And vSN_ExgEquipe = 'S' then  -- OP 33984
        global.vChange := 'S';
          Pkg_ffis_M_LACTO_AIH_P321.P_MONTAR_EQUIPE(xml, ITREG_FAT.CD_REG_FAT,
                      ITREG_FAT.CD_LANCAMENTO,
                      ITREG_FAT.CD_PROCEDIMENTO, CG$CTRL, global);
      CG$CTRL.REFRESH_ITLAN_MED := 'S';
      CG$CTRL.DIGITA_EQUIPE     := 'S';
         global.vChange := 'N';
   end if;
   if Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_OPM(xml, ItReg_Fat.Cd_Procedimento) then
      CG$CTRL.DIGITA_NOTA := 'S';
   end if;
   if Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_UTI(xml, ItReg_Fat.Cd_Procedimento) then
      CG$CTRL.DIGITA_UTI := 'S';
   end if;
   if rDadosProcedimento.SN_Vasectomia = 'S' Or rDadosProcedimento.SN_Laqueadura = 'S' then
      CG$CTRL.DIGITA_LACVAS := 'S';
   end if;
   if ITREG_FAT.CD_PROCEDIMENTO = '0801010039' then
      CG$CTRL.DIGITA_PRE_NATAL := 'S';
   end if;
    if ITREG_FAT.CD_Procedimento = '0801010047' then
     CG$CTRL.DIGITA_REG_CIVIL := 'S';
   end if;
END;
PROCEDURE P_DEFINE_ABERTURA_TELAS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itreg_fat ITREG_FATRec;
  cg$ctrl CG$CTRLRec;
  global GlobalsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
    CG$CTRL.DIGITA_EQUIPE:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_EQUIPE');
    CG$CTRL.DIGITA_NOTA:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_NOTA');
    CG$CTRL.DIGITA_UTI:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_UTI');
    CG$CTRL.DIGITA_LACVAS:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_LACVAS');
    CG$CTRL.DIGITA_PRE_NATAL:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_PRE_NATAL');
    CG$CTRL.DIGITA_REG_CIVIL:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_REG_CIVIL');
    CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
    ITREG_FAT.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO');
    global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
    global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ABERTURA_TELAS_E(xml) THEN
        P_DEFINE_ABERTURA_TELAS(xml, ITREG_FAT, CG$CTRL, global);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ABERTURA_TELAS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_EQUIPE', CG$CTRL.DIGITA_EQUIPE);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_NOTA', CG$CTRL.DIGITA_NOTA);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_UTI', CG$CTRL.DIGITA_UTI);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_LACVAS', CG$CTRL.DIGITA_LACVAS);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_PRE_NATAL', CG$CTRL.DIGITA_PRE_NATAL);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_REG_CIVIL', CG$CTRL.DIGITA_REG_CIVIL);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO', ITREG_FAT.CD_LANCAMENTO);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_PRESTADORES_ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_PRESTADORES_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) IS
Cursor cPrest is
         Select nvl(it.cd_prestador,il.cd_prestador) cd_prestador
          From itreg_fat it
              , itlan_med il
          Where it.cd_reg_fat = il.cd_reg_fat (+)
       and it.cd_lancamento = il.cd_lancamento (+)
       and it.cd_reg_fat = pRegFat
            and nvl(it.cd_prestador,il.cd_prestador) is not null;
Begin
  For Rec_Prest in cPrest Loop
      Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, Rec_Prest.cd_prestador);
  End loop;
END;
PROCEDURE P_VALIDA_PRESTADORES_ITEM (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PRESTADORES_ITEM_E(xml) THEN
        P_VALIDA_PRESTADORES_ITEM(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PRESTADORES_ITEM_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_INSERE_DADOS_PARTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_INSERE_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento In Varchar2) IS
  nAchou    Number;
  bSN_Parto Boolean;
BEGIN
  -- Caso não encontre os dados do parto, insere os dados padrão.
  -- Retorna verdade se a conta for de parto.
  bSN_Parto:= Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PARTO(xml, Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat));
  If Not Pkg_ffis_M_LACTO_AIH_P321.F_PROCURA_PARTO(xml, pRegFat) AND bSN_Parto Then
      Select Count(*)
        Into nAchou
        From It_Parto
       Where Cd_Reg_Fat = pRegFat;
       If nAchou = 0 Then
         INSERT INTO IT_PARTO(CD_REG_FAT
                                   ,QT_RN_VIVO
                                   ,QT_RN_ALTA )
              VALUES              (pRegFat
                                   ,1
                                   ,1);
       End If;
  End If;
END;
PROCEDURE P_INSERE_DADOS_PARTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pProcedimento Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_DADOS_PARTO_E(xml) THEN
        P_INSERE_DADOS_PARTO(xml, pRegFat, pProcedimento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_DADOS_PARTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_COD_REDUZIDO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_COD_REDUZIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in varchar, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
Cursor cCdReduzido Is Select Cd_Procedimento
                          From Procedimento_SUS_Detalhe
                         Where Cd_Codigo_Reduzido = To_Number(pProcedimento);
  nCont        Number;
Begin
    If length(Itreg_Fat.Cd_Procedimento) <= 4 Then
      Select Count(*)
        Into nCont
        From Procedimento_SUS_Detalhe
       Where cd_codigo_reduzido = To_Number(pProcedimento);
      If nCont > 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_63)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_63', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Existe mais de um procedimento com este Código Reduzido, por favor informar todo o código do procedimento!'),TRUE);
      Elsif nCont < 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_64)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_64', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não existe nenhum procedimento com este Código Reduzido, por favor informar todo o código do procedimento!'),TRUE);
      Else
        Open  cCdReduzido;
          Fetch cCdReduzido Into ITREG_FAT.CD_PROCEDIMENTO;
        Close cCdReduzido;
      End if;
    End if;
End;
PROCEDURE P_VALIDA_COD_REDUZIDO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento varchar(4000);
  itreg_fat ITREG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVARCHAR2(xml, 'pProcedimento');
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_COD_REDUZIDO_E(xml) THEN
        P_VALIDA_COD_REDUZIDO(xml, pProcedimento, ITREG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_COD_REDUZIDO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_QUANTIDADE_OPM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_QUANTIDADE_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar, pProc_Pai in Varchar2, pDtLacto in date,pQtLacto in Number) IS
Cursor cCompat2( vProcedimento                 varchar2
                 , vProcedimentoCompat     varchar2
                 , dDtcomp                             date) is
    Select cd_procedimento
          ,cd_procedimento_compativel
          ,qt_maxima
          ,dt_vigencia
      from procedimento_sus_compat
     where cd_procedimento            = vProcedimento
       and sn_ativo = 'S'
       and cd_procedimento_compativel = vProcedimentoCompat
       and trunc(dt_vigencia) <= trunc(dDtcomp)
       order by dt_vigencia desc;
  rCompat2  cCompat2%rowtype;
Begin
  If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_OPM(xml, pProcedimento) Then
    Open cCompat2( pProc_Pai
                 , pProcedimento
                 , pDtLActo);
    Fetch cCompat2 Into rCompat2;
    Close cCompat2;
    If (rCompat2.qt_maxima > 0) Then
         If pQtLacto > rCompat2.qt_maxima  Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_65)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_65', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Quantidade de material OPM maior que permitido.'),TRUE);
         End If;
       End If;
  End if;
End;
PROCEDURE P_VAL_QUANTIDADE_OPM (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar(4000);
  pProc_Pai Varchar2(4000);
  pDtLacto date;
  pQtLacto Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVARCHAR2(xml, 'pProcedimento');
    pProc_Pai:= PKG_XML.GetVarchar2(xml, 'pProc_Pai');
    pDtLacto:= PKG_XML.Getdate(xml, 'pDtLacto');
    pQtLacto:= PKG_XML.GetNumber(xml, 'pQtLacto');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_QUANTIDADE_OPM_E(xml) THEN
        P_VAL_QUANTIDADE_OPM(xml, pProcedimento, pProc_Pai, pDtLacto, pQtLacto);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_QUANTIDADE_OPM_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_SETOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pEmpresa in Number, pSetor in Number) IS
nAchou Number;
Begin
  If pSetor Is Not Null Then
      Select Count(*)
        Into nAchou
        From Setor
       Where Cd_Setor             = pSetor
         And Cd_Multi_Empresa     = pEmpresa
         And SN_Aceita_Lancamento = 'S';
     If nAchou = 0 Then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_66)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_66', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Setor informado não cadastrado ou não recebe lançamentos.'),TRUE);
     End If;
  End If;
End;
PROCEDURE P_VALIDA_SETOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pEmpresa Number;
  pSetor Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pEmpresa:= PKG_XML.GetNumber(xml, 'pEmpresa');
    pSetor:= PKG_XML.GetNumber(xml, 'pSetor');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SETOR_E(xml) THEN
        P_VALIDA_SETOR(xml, pEmpresa, pSetor);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SETOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PRESTADOR_CIRURGIAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Number, pPrestador in Number) IS
Cursor cTpSituacao is Select Tp_situacao
                                 , SN_Cirurgiao
                              From Prestador
                             Where Cd_Prestador = pPrestador;
  vTpSituacao   Varchar(1);
  vSNCirurgiao  Varchar(1);
  Saida         Exception;
Begin
    If pPrestador Is Null Then
      Raise Saida;
    End If;
    Open  cTpSituacao;
      Fetch cTpSituacao into vTpSituacao,vSNCirurgiao;
    Close cTpSituacao;
    If vTpSituacao  <> 'A' Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_67)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_67', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador inativo.'),TRUE);
    End if;
    If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PROC_CIRURGICO(xml, pProcedimento) And vSNCirurgiao = 'N' Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_68)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_68', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador %s não é cirurgião!', arg_list(pPrestador)),true);
    End If;
    Pkg_ffis_M_LACTO_AIH_P321.P_VAL_PRESTADOR_SUS(xml, pPrestador);
Exception
    When Saida Then
      Null;
End;
PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Number;
  pPrestador Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetNumber(xml, 'pProcedimento');
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CIRURGIAO_E(xml) THEN
        P_VAL_PRESTADOR_CIRURGIAO(xml, pProcedimento, pPrestador);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CIRURGIAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_ATI_MED_REPETIDO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_ATI_MED_REPETIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLancamento in Number,pAtiMed in Varchar2) IS
Cursor cProcuraEspec Is Select Count(*)
                            From ItLan_Med
                           Where Cd_Reg_Fat    = pRegFat
                             And Cd_Lancamento = pLancamento
                             And Cd_Ati_Med    = pAtiMed;
  nAchou Number;
Begin
    Open cProcuraEspec;
      Fetch cProcuraEspec Into nAchou;
  Close cProcuraEspec;
  If nAchou > 1 then
      If pAtiMed = '01' Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_69)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_69', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é permitido mais que um cirurgião na equipe médica.'),TRUE);
      Elsif pAtiMed = '06' Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_70)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_70', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é permitido mais que um anestesista na equipe médica.'),TRUE);
      Else
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_71)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_71', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestadores auxiliares com atividade (%s) repetida na equipe médica, verifique.', arg_list(pAtiMed)),TRUE);
      End If;
  End If;
  --PDA 515248
  If pAtiMed NOT IN ('01','02','03','04','05','06') Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_112)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),
   pkg_rmi_traducao.extrair_pkg_msg('MSG_112', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Identificador de Equipe médica inválido para cobrança SUS.'),TRUE);
  End If;
  --FIM 515248
End;
PROCEDURE P_VALIDA_ATI_MED_REPETIDO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLancamento Number;
  pAtiMed Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLancamento:= PKG_XML.GetNumber(xml, 'pLancamento');
    pAtiMed:= PKG_XML.GetVarchar2(xml, 'pAtiMed');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATI_MED_REPETIDO_E(xml) THEN
        P_VALIDA_ATI_MED_REPETIDO(xml, pRegFat, pLancamento, pAtiMed);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATI_MED_REPETIDO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PRESTADOR_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PRESTADOR_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number) IS
nAchou Number;
  SAIDA  Exception;
BEGIN
  If pPrestador Is Null Then
    Raise Saida;
  End If;
   SELECT Count(*)
     INTO nAchou
     FROM PRES_CON pres_con
        , PRESTADOR prestador
        , CONFIG_FFIS config_ffis
        , CONVENIO convenio
          , EMPRESA_CONVENIO
    WHERE prestador.CD_PRESTADOR    = pPrestador
      AND pres_con.CD_CONVENIO      = convenio.CD_CONVENIO
      AND config_ffis.CD_CONVENIO   = convenio.CD_CONVENIO
      AND pres_con.CD_PRESTADOR     = prestador.CD_PRESTADOR
      and (pres_con.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or pres_con.cd_multi_empresa is null )  -- OP 3396 - 25/04/2013
      AND Empresa_Convenio.Cd_Convenio = Convenio.Cd_Convenio
      AND Empresa_Convenio.Cd_Multi_Empresa = config_ffis.Cd_Multi_Empresa
      AND prestador.TP_SITUACAO     = 'A';
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_72)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_72', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador (%s) não credenciado ao Convênio SUS', arg_list(pPrestador)),true);
  End If;
  Exception
      When Saida Then
        Null;
END;
PROCEDURE P_VAL_PRESTADOR_SUS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pPrestador Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_SUS_E(xml) THEN
        P_VAL_PRESTADOR_SUS(xml, pPrestador);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_SUS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_PRESTADOR_CBO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_PRESTADOR_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pPrestador in Number, pCBO in Varchar2,pAtiMed in Varchar2 default '00') IS
vMessage Varchar2(2000);
    nAchou   Number;
  Saida    Exception;
Begin
  If pPrestador Is Null Then
    Raise Saida;
  End If;
    If pCBO Is Not Null And pPrestador Is Null Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_73)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),pkg_rmi_traducao.extrair_pkg_msg('MSG_73', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CBO não deve ser preenchido.'),true);
    End If;
    If Pkg_Mv2000.Le_Cliente = 718 Or pCBO Is Null Then
       /*Conforme solicitAção do Cliente e do Sr. José Emílio, todas as validações do CBO estão
      sendo alteradas para o cliente 718, fazendo com que seja permitido o lançamento de qualquer
      CBO que esteja cadastrado na Empresa, independente do Prestador ou Procedimento.*/
    Raise Saida;
    End If;
  Select count(*)
      Into nAchou
        From procedimento_sus_cbo
           , prestador_cbo
   Where procedimento_sus_cbo.cd_procedimento = pProcedimento
         And prestador_cbo.cd_prestador           = pPrestador
     And procedimento_sus_cbo.cd_cbos         = pCBO
          And prestador_cbo.cd_cbo                 = procedimento_sus_cbo.cd_cbos
         And prestador_cbo.sn_ativo               = 'S';
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_74)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_74', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s não é compatível com o CBO ou Prestador.', arg_list(pProcedimento)),true);
    End If;
  -- Validações pertinentes a regra de preenchimento do CBO.
  vMessage:= Null;
  vMessage:= Pack_SUS.FNC_SUS_VALIDA_CBO(pCBO
                                              ,pProcedimento
                                              ,pPrestador);
  If vMessage Is Not Null Then
   If Pkg_ffis_M_LACTO_AIH_P321.F_OBRIGA_CBO(xml, pProcedimento) Then
     If Substr(vMessage,1,8) = 'Atenção:' And pAtiMed In ('02','03','04','06') Then
       Null;
     Else
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),vMessage,true);
     End If;
    End If;
  End If;
Exception
  When Saida Then
    Null;
END;
PROCEDURE P_VAL_PRESTADOR_CBO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pProcedimento Varchar2(4000);
  pPrestador Number;
  pCBO Varchar2(4000);
  pAtiMed Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    pCBO:= PKG_XML.GetVarchar2(xml, 'pCBO');
    pAtiMed:= PKG_XML.GetVarchar2(xml, 'pAtiMed');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CBO_E(xml) THEN
        P_VAL_PRESTADOR_CBO(xml, pProcedimento, pPrestador, pCBO, pAtiMed);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CBO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VAL_CBO_AUXILIARES</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VAL_CBO_AUXILIARES (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
nAchou Number;
Begin
  For record In (select Substr(ItLan_Med.Cd_CBO_Prestador, 1, 4) Cd_CBOS
                      , ItReg_Fat.Cd_Procedimento
                   from itreg_fat
                      , itlan_med
                  where itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat
                    and itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                    and itlan_med.cd_ati_med not in ('01','06')
                    and itlan_med.cd_ati_med is not null
                    and itreg_fat.cd_reg_fat = pRegFat
                  group by itreg_fat.cd_procedimento
                      , substr(itlan_med.cd_cbo_prestador, 1, 4)) Loop
    Select Count(*)
      Into nAchou
      From Procedimento_SUS_CBO
     Where Cd_Procedimento = record.Cd_Procedimento
       And Substr(Cd_CBOS,1,4) = record.Cd_CBOS
       And SN_Ativo = 'S';
    If nAchou = 0 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_75)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_75', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s com lançamento de CBO incompatível com o procedimento, ver prestadores auxiliares.', arg_list(record.Cd_Procedimento)),true);
    End If;
  End Loop;
End;
PROCEDURE P_VAL_CBO_AUXILIARES (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CBO_AUXILIARES_E(xml) THEN
        P_VAL_CBO_AUXILIARES(xml, pRegFat);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CBO_AUXILIARES_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_TIPO_PAGAMENTO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_TIPO_PAGAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pConvenio in Number,pPrestador in Number,pTpPagamento in Varchar2, FSV_MODE IN OUT NOCOPY varchar2) IS
CURSOR C IS
   SELECT COUNT(*)
     FROM PRES_CON PRES_CON
    WHERE PRES_CON.CD_PRESTADOR = pPrestador
      AND PRES_CON.CD_CONVENIO  = pConvenio
      and (pres_con.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or pres_con.cd_multi_empresa is null )  -- OP 3396 - 25/04/2013
      AND PRES_CON.SN_PAGA_PELO_CONVENIO = 'S';
  nQtd_Registro NUMBER;
  SAIDA         EXCEPTION;
  BEGIN
  IF FSV_MODE = 'QUERY' Or pTpPagamento Is Null THEN
    RAISE SAIDA;
  END IF;
  OPEN C;
    FETCH C INTO nQtd_Registro;
  CLOSE C;
  IF pTpPagamento not in ('P', 'F', 'C') THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_76)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_76', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: A forma de pagamento deve ser P - Produção ou C - Convênio ou F - Hospital.'),TRUE);
  END IF;
  IF NVL( nQtd_Registro, 0 ) = 0 AND pTpPagamento IN ('P', 'F') THEN
     RAISE SAIDA;
  END IF;
  IF NVL( nQtd_Registro, 0 ) = 0 AND pTpPagamento = 'C' THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_77)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_77', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Prestador não está credenciado para este forma de pagamento, para credencia-lo, utilize a opção Tabelas-> Gerais -> Prestadores->Credenciamento.'),TRUE);
  END IF;
EXCEPTION
     WHEN SAIDA THEN
       NULL;
END;
PROCEDURE P_VALIDA_TIPO_PAGAMENTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pConvenio Number;
  pPrestador Number;
  pTpPagamento Varchar2(4000);
  FSV_MODE VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pConvenio:= PKG_XML.GetNumber(xml, 'pConvenio');
    pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
    pTpPagamento:= PKG_XML.GetVarchar2(xml, 'pTpPagamento');
    FSV_MODE:= PKG_XML.GetVARCHAR2(xml, 'FSV_MODE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_TIPO_PAGAMENTO_E(xml) THEN
        P_VALIDA_TIPO_PAGAMENTO(xml, pConvenio, pPrestador, pTpPagamento, FSV_MODE);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_TIPO_PAGAMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'FSV_MODE', FSV_MODE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_REMESSA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Remessa number, reg_fat IN OUT NOCOPY REG_FATRec) IS
vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-REMESSA-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_FFCV_REMESSA_FATURA.P_RETORNA_DADOS(xml, pCd_Remessa
                                                                 ,xml.multiEmpresa
                                                     ,xml.usuario
                                                     ,True
                                                     ,True
                                                     ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DT_ABERTURA', Reg_Fat.Dsp_Dt_Abertura, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_FECHADA', Reg_Fat.Dsp_Remessa_SN_Fechada, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DS_REMESSA', Reg_Fat.Dsp_Ds_Remessa, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DT_COMPETENCIA', Reg_Fat.Dsp_Dt_Competencia, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_VALIDA_DATA_ALTA', Reg_Fat.DSP_REM_SN_VALIDA_DATA_ALTA, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'TP_COMPLEXIDADE_PROCEDIMENTO', Reg_Fat.Dsp_Tipo_Complexidade, False);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_REMESSA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCd_Remessa number;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCd_Remessa:= PKG_XML.Getnumber(xml, 'pCd_Remessa');
    REG_FAT.DSP_DT_ABERTURA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_ABERTURA');
    REG_FAT.DSP_REMESSA_SN_FECHADA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_REMESSA_SN_FECHADA');
    REG_FAT.DSP_DS_REMESSA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA');
    REG_FAT.DSP_DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA');
    REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA');
    REG_FAT.DSP_TIPO_COMPLEXIDADE:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_TIPO_COMPLEXIDADE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_REMESSA_E(xml) THEN
        P_RETORNA_DADOS_REMESSA(xml, pCd_Remessa, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_REMESSA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_ABERTURA', REG_FAT.DSP_DT_ABERTURA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_REMESSA_SN_FECHADA', REG_FAT.DSP_REMESSA_SN_FECHADA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA', REG_FAT.DSP_DS_REMESSA);
    PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA', REG_FAT.DSP_DT_COMPETENCIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA', REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_TIPO_COMPLEXIDADE', REG_FAT.DSP_TIPO_COMPLEXIDADE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CNPJ</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CNPJ (xml IN OUT NOCOPY PKG_XML.XmlContext, pCNPJ in Number, itcob_pre IN OUT NOCOPY ITCOB_PRERec) IS
cCpfCgcAux VARCHAR2(50);
   nTamCpfCgc NUMBER;
   cCaracter NUMBER;
   cPos varchar2(14);
BEGIN
   IF pCNPJ IS NOT NULL THEN
      cPos := lpad(pCNPJ,14,'0' );
      cCpfCgcAux := RTRIM(pCNPJ);
      nTamCpfCgc := LENGTH(cPos);
      IF cCpfCgcAux LIKE ' %' THEN
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_78)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_78', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem espaço em branco no início do CNPJ'),true);
      END IF;
      IF INSTR( cCpfCgcAux, '  ') > 0 THEN
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_79)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_79', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem espaços em branco excessivos no CNPJ na posição %s', arg_list(to_char ( INSTR( cCpfCgcAUX, '  ') ))),true);
      END IF;
      WHILE NVL(LENGTH(cCpfCgcAux), 0) > 0 LOOP
         cCaracter := ASCII ( SUBSTR(cCpfCgcAux, 1, 1) );
         IF cCaracter = 32 THEN
            NULL;
         ELSIF cCaracter < 48 THEN
            --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
            PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_80)
                          ,pkg_rmi_traducao.extrair_pkg_msg('MSG_80', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem caracteres inválidos no CNPJ ->%s', arg_list(SUBSTR(cCpfCgcAux, 1, 1))),true);
            Raise Form_Trigger_Failure;
         ELSIF cCaracter > 57 THEN
            --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
            PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_80)
                          ,pkg_rmi_traducao.extrair_pkg_msg('MSG_80', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem caracteres inválidos no CNPJ ->%s', arg_list(SUBSTR(cCpfCgcAux, 1, 1))),true);
         END IF;
         cCpfCgcAux := SUBSTR(cCpfCgcAux, 2);
      END LOOP;
      IF nTamCpfCgc <> 14  THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_81)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_81', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Tamanho inválido para CNPJ'),true);
      END IF;
        IF NOT Pkg_MV_MV2000.f_erro_cgc(xml, pCNPJ) THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_82)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_82', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CNPJ inválido'),true);
        END IF;
   END IF;
END;
PROCEDURE P_VALIDA_CNPJ (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCNPJ Number;
  itcob_pre ITCOB_PRERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCNPJ:= PKG_XML.GetNumber(xml, 'pCNPJ');
    ITCOB_PRE.NR_CNPJ_FABRICANTE:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.NR_CNPJ_FABRICANTE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CNPJ_E(xml) THEN
        P_VALIDA_CNPJ(xml, pCNPJ, ITCOB_PRE);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CNPJ_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.NR_CNPJ_FABRICANTE', ITCOB_PRE.NR_CNPJ_FABRICANTE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>P_COMMIT_FORM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_P_COMMIT_FORM (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2) IS
BEGIN
    If FSV_BLOCK_STATUS <> 'QUERY' Then
       FSV_message_level := 20;
       commit;
       FSV_message_level := 01;
    End if;
END;
PROCEDURE P_P_COMMIT_FORM (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  FSV_BLOCK_STATUS VARCHAR2(4000);
  FSV_MESSAGE_LEVEL VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    FSV_MESSAGE_LEVEL:= PKG_XML.GetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_P_COMMIT_FORM_E(xml) THEN
        P_P_COMMIT_FORM(xml, FSV_BLOCK_STATUS, FSV_MESSAGE_LEVEL);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_P_COMMIT_FORM_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    PKG_XML.SetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL', FSV_MESSAGE_LEVEL);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_REGISTRO_CIVIL</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_REGISTRO_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number, pProcedimento in Varchar2, pQtLancamento in Number) IS
nQtRegCivil Number;
  Saida       Exception;
BEGIN
/*Atualiza a quantidade da Registro Civil nos itens da conta*/
  Select Count(*)
    Into nQtRegCivil
    From Registro_Civil
   Where Cd_Reg_Fat = pRegFat
     And Cd_Lancamento = pLacto;
   If pProcedimento <> '0801010047' Then
        Raise Saida;
   End If;
   If Nvl(nQtRegCivil,0) <> Nvl(pQtLancamento,0) And Nvl(nQtRegCivil,0) > 0  Then
     Update ItReg_Fat
        Set Qt_Lancamento = nQtRegCivil
      Where Cd_Reg_Fat    = pRegFat
        And Cd_Lancamento = pLacto;
     Commit;
   End if;
   Exception
       When Saida Then
         Null;
END;
PROCEDURE P_DML_REGISTRO_CIVIL (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLacto Number;
  pProcedimento Varchar2(4000);
  pQtLancamento Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
    pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    pQtLancamento:= PKG_XML.GetNumber(xml, 'pQtLancamento');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REGISTRO_CIVIL_E(xml) THEN
        P_DML_REGISTRO_CIVIL(xml, pRegFat, pLacto, pProcedimento, pQtLancamento);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REGISTRO_CIVIL_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_CIDADE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_CIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCidade in Number, rNm_Cidade out Varchar2, rCd_UF out Varchar2,pRaise in boolean) IS
Cursor cCidade Is Select Nm_cidade
                         , Cd_UF
                      From Cidade
                     Where Cd_Cidade = pCidade;
BEGIN
  Open cCidade;
    Fetch cCidade Into rNm_Cidade, rCd_UF;
  Close cCidade;
  If pRaise Then
    If rNm_Cidade Is Null Or rCd_UF Is Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_83)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_83', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidade ou UF não cadastrado'),TRUE);
    End If;
  End If;
END;
PROCEDURE P_RETORNA_CIDADE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCidade Number;
  rNm_Cidade Varchar2(4000);
  rCd_UF Varchar2(4000);
  pRaise boolean;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCidade:= PKG_XML.GetNumber(xml, 'pCidade');
    rNm_Cidade:= PKG_XML.GetVarchar2(xml, 'rNm_Cidade');
    rCd_UF:= PKG_XML.GetVarchar2(xml, 'rCd_UF');
    pRaise:= PKG_XML.Getboolean(xml, 'pRaise');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE_E(xml) THEN
        P_RETORNA_CIDADE(xml, pCidade, rNm_Cidade, rCd_UF, pRaise);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVarchar2(xml, 'rNm_Cidade', rNm_Cidade);
    PKG_XML.SetVarchar2(xml, 'rCd_UF', rCd_UF);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_CIDADE2</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_CIDADE2 (xml IN OUT NOCOPY PKG_XML.XmlContext, pNm_Cidade in Varchar2, pCd_UF in Varchar2,pCidade in Number,pRaise in boolean, responsa IN OUT NOCOPY RESPONSARec) IS
Cursor cCidade Is Select Cd_Cidade
                        From Cidade
                     Where Nm_Cidade = pNm_Cidade
                       And Cd_UF = pCd_UF;
  nCidade Number;
Begin
  Open cCidade;
    Fetch cCidade Into nCidade;
  Close cCidade;
  If pRaise Then
    If nCidade Is Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_84)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_84', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidade ou UF  não Cadastrados.'),pRaise);
    End If;
    If nvl(pCidade,0) <> nCidade Then
      responsa.cd_cidade:= nCidade;
    End If;
  End If;
END;
PROCEDURE P_RETORNA_CIDADE2 (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pNm_Cidade Varchar2(4000);
  pCd_UF Varchar2(4000);
  pCidade Number;
  pRaise boolean;
  responsa RESPONSARec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pNm_Cidade:= PKG_XML.GetVarchar2(xml, 'pNm_Cidade');
    pCd_UF:= PKG_XML.GetVarchar2(xml, 'pCd_UF');
    pCidade:= PKG_XML.GetNumber(xml, 'pCidade');
    pRaise:= PKG_XML.Getboolean(xml, 'pRaise');
    RESPONSA.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'RESPONSA.CD_CIDADE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE2_E(xml) THEN
        P_RETORNA_CIDADE2(xml, pNm_Cidade, pCd_UF, pCidade, pRaise, RESPONSA);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE2_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'RESPONSA.CD_CIDADE', RESPONSA.CD_CIDADE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_CORRIGE_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_CORRIGE_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto In Number Default Null) IS
nTotal Number;
BEGIN
   Delete Diaria_UTI_SUS
    Where Cd_Reg_Fat = pRegFat
      And Cd_Lancamento in (Select Cd_Lancamento
                              From itreg_fat i
                                 , procedimento_detalhe_vigencia d -- op 26942
                             Where i.cd_procedimento = d.cd_procedimento
                 and Trunc(i.dt_lancamento) BETWEEN d.dt_validade_inicial and NVL(d.dt_validade_final, Trunc(i.dt_lancamento))
                               and Nvl(d.sn_diaria_uti, 'N') = 'N'
                 and i.cd_procedimento NOT IN (SELECT DISTINCT cd_procedimento
                                                 FROM DBAMV.PROCEDIMENTO_SUS_REGRA
                                WHERE cd_procedimento = i.cd_procedimento
                                  AND cd_regra = '10012')  --OP 25461
                               and i.cd_reg_fat = pRegFat);
  Commit;
END;
PROCEDURE P_DML_CORRIGE_UTI (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLacto Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_UTI_E(xml) THEN
        P_DML_CORRIGE_UTI(xml, pRegFat, pLacto);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_UTI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_ATUALIZA_ITEM_UTI</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_ATUALIZA_ITEM_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto in Number, pQtd_It In Number) IS
nQtUTI Number;
BEGIN
   --Atualiza a quantidade da UTI nos itens da conta
   nQtUTI:= Pkg_ffis_M_LACTO_AIH_P321.F_F_TOTAL_UTI(xml, pRegFat,pLacto);
   If nQtUTI <> pQtd_It And nQtUTI > 0 Then
     Update ItReg_Fat
        Set Qt_Lancamento = nQtUTI
      Where Cd_Reg_Fat    = pRegFat
        And Cd_Lancamento = pLacto;
   Commit;
   End if;
END;
PROCEDURE P_DML_ATUALIZA_ITEM_UTI (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pLacto Number;
  pQtd_It Number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
    pQtd_It:= PKG_XML.GetNumber(xml, 'pQtd_It');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_ITEM_UTI_E(xml) THEN
        P_DML_ATUALIZA_ITEM_UTI(xml, pRegFat, pLacto, pQtd_It);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_ITEM_UTI_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_LEITO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Leito number, atendime IN OUT NOCOPY ATENDIMERec) IS
vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-LEITO-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_PARI_LEITO.P_RETORNA_DADOS(xml, pCd_Leito
                                                  ,xml.multiEmpresa
                                              ,xml.usuario
                                              ,True
                                              ,True
                                              ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DS_ENFERMARIA', ATENDIME.DSP_DS_ENFERMARIA, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_UNID_INT', ATENDIME.CD_UNID_INT, True);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_LEITO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCd_Leito number;
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCd_Leito:= PKG_XML.Getnumber(xml, 'pCd_Leito');
    ATENDIME.DSP_DS_ENFERMARIA:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA');
    ATENDIME.CD_UNID_INT:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_UNID_INT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_LEITO_E(xml) THEN
        P_RETORNA_DADOS_LEITO(xml, pCd_Leito, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_LEITO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA', ATENDIME.DSP_DS_ENFERMARIA);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_UNID_INT', ATENDIME.CD_UNID_INT);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_MOT_ALT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_MOT_ALT (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Mot_Alt in number, atendime IN OUT NOCOPY ATENDIMERec) IS
vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-MOT_ALT-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_PARI_MOT_ALT.P_RETORNA_DADOS(xml, pCd_Mot_Alt
                                                  ,xml.multiEmpresa
                                              ,xml.usuario
                                              ,True
                                              ,True
                                              ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'TP_MOT_ALTA', ATENDIME.TP_MOT_ALTA, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_ALTA_SUS', ATENDIME.CD_ALTA_SUS, True);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_MOT_ALT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCd_Mot_Alt number;
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCd_Mot_Alt:= PKG_XML.Getnumber(xml, 'pCd_Mot_Alt');
    ATENDIME.TP_MOT_ALTA:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.TP_MOT_ALTA');
    ATENDIME.CD_ALTA_SUS:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ALTA_SUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_MOT_ALT_E(xml) THEN
        P_RETORNA_DADOS_MOT_ALT(xml, pCd_Mot_Alt, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_MOT_ALT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.TP_MOT_ALTA', ATENDIME.TP_MOT_ALTA);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ALTA_SUS', ATENDIME.CD_ALTA_SUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DEFINE_SN_INFECCAO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DEFINE_SN_INFECCAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento in Number,pSN_Infec in Varchar2, atendime IN OUT NOCOPY ATENDIMERec) IS
nAchou Number;
BEGIN
    If pSN_Infec = 'N' Then
     Select Count(*)
       Into nAchou
       From reg_inf
      Where Cd_atendimento = pAtendimento
        And Tp_infec       = 'H';
     If nAchou > 0 Then
       ATENDIME.SN_INFECCAO:= 'S';
     End If;
  End if;
END;
PROCEDURE P_DEFINE_SN_INFECCAO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pAtendimento Number;
  pSN_Infec Varchar2(4000);
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pAtendimento:= PKG_XML.GetNumber(xml, 'pAtendimento');
    pSN_Infec:= PKG_XML.GetVarchar2(xml, 'pSN_Infec');
    ATENDIME.SN_INFECCAO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.SN_INFECCAO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_SN_INFECCAO_E(xml) THEN
        P_DEFINE_SN_INFECCAO(xml, pAtendimento, pSN_Infec, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_SN_INFECCAO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.SN_INFECCAO', ATENDIME.SN_INFECCAO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_LANCA_ESPEC_SUS</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_LANCA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
vEsp Espec_SUS.Cd_Espec_SUS%Type;
Begin
    vEsp:= REG_FAT.CD_ESPEC_SUS;
    Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_ESPEC_SUS(xml, REG_FAT.CD_REG_FAT
                        ,REG_FAT.CD_PROCEDIMENTO_SOLICITADO
                        ,REG_FAT.CD_PROCEDIMENTO_REALIZADO
                        ,vEsp);
  If Nvl(Reg_Fat.Cd_Espec_SUS,'0') <> Nvl(vEsp,'0') Then
    Reg_Fat.Cd_Espec_SUS:= vEsp;
  End If;
End;
PROCEDURE P_LANCA_ESPEC_SUS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.CD_PROCEDIMENTO_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.CD_ESPEC_SUS:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_ESPEC_SUS_E(xml) THEN
        P_LANCA_ESPEC_SUS(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_ESPEC_SUS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO', REG_FAT.CD_PROCEDIMENTO_SOLICITADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS', REG_FAT.CD_ESPEC_SUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_RETORNA_DADOS_EMPRESA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_RETORNA_DADOS_EMPRESA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Multi_Empresa number, formParams IN OUT NOCOPY FormParamsRec) IS
  CURSOR C_DADOS_EMPRESA IS SELECT CD_MULTI_EMPRESA
                                 , SN_IMPORTA_ATEND
                                 , SN_GERA_DISQUETE_PERIODO
                                 , SN_GERA_ACH
                                 , CD_PRESTADOR_AIH
                                 , CD_CGC
                                 , CD_PRESTADOR_DIR_CLINICO
                                 , DS_MULTI_EMPRESA
                                 , SN_REMESSA_OBRIGATORIA
                                 , NR_AIH_INICIAL_CNRAC
                                 , NR_AIH_FINAL_CNRAC
                                 , NR_INICIAL_AIH_ESPECIFICA
                                 , NR_FINAL_AIH_ESPECIFICA
                              FROM DBAMV.MULTI_EMPRESAS
                             WHERE CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA;
  R_DADOS_EMPRESA C_DADOS_EMPRESA%ROWTYPE;
/*  vAIH1 Multi_Empresas.AIH_Inicial%Type;
  vAIH2 Multi_Empresas.AIH_Inicial%Type;
  vAIH3 Multi_Empresas.AIH_Inicial%Type;
  vAIH4 Multi_Empresas.AIH_Inicial%Type;
*/
  vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-EMPRESA-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_GLOBAL_MULTI_EMPRESAS.P_RETORNA_DADOS(xml, xml.multiEmpresa
                                                                     ,xml.multiEmpresa
                                                       ,xml.usuario
                                                       ,True
                                                       ,True
                                                       ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
/*
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_MULTI_EMPRESA', formParams.P_EMPRESA, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_IMPORTA_ATEND', formParams.SN_IMPORTA_ATEND, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_GERA_DISQUETE_PERIODO', formParams.SN_GERA_DISQUETE_PERIODO, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_GERA_ACH', formParams.SN_GERA_ACH, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_PRESTADOR_AIH', formParams.CD_PRESTADOR_AIH, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_CGC', formParams.CD_CGC, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_PRESTADOR_DIR_CLINICO', formParams.CD_PRESTADOR_DIR_CLINICO, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DS_MULTI_EMPRESA', formParams.DS_MULTI_EMPRESA, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_REMESSA_OBRIGATORIA', formParams.SN_REMESSA_OBRIGATORIA, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_AIH_INICIAL_CNRAC',vAIH1, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_AIH_FINAL_CNRAC',vAIH2 , false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_INICIAL_AIH_ESPECIFICA',vAIH3 , false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_FINAL_AIH_ESPECIFICA',vAIH4 , false);
*/
  OPEN C_DADOS_EMPRESA;
    FETCH C_DADOS_EMPRESA INTO R_DADOS_EMPRESA;
  CLOSE C_DADOS_EMPRESA;
  formParams.P_EMPRESA:= R_DADOS_EMPRESA.CD_MULTI_EMPRESA;
  formParams.SN_IMPORTA_ATEND:= R_DADOS_EMPRESA.SN_IMPORTA_ATEND;
  formParams.SN_GERA_DISQUETE_PERIODO:= R_DADOS_EMPRESA.SN_GERA_DISQUETE_PERIODO;
  formParams.SN_GERA_ACH:= R_DADOS_EMPRESA.SN_GERA_ACH;
  formParams.CD_PRESTADOR_AIH:= R_DADOS_EMPRESA.CD_PRESTADOR_AIH;
  formParams.CD_CGC:= R_DADOS_EMPRESA.CD_CGC;
  formParams.CD_PRESTADOR_DIR_CLINICO:= R_DADOS_EMPRESA.CD_PRESTADOR_DIR_CLINICO;
  formParams.DS_MULTI_EMPRESA:= R_DADOS_EMPRESA.DS_MULTI_EMPRESA;
  formParams.SN_REMESSA_OBRIGATORIA:= R_DADOS_EMPRESA.SN_REMESSA_OBRIGATORIA;
  formParams.NR_AIH_INICIAL_CNRAC:= R_DADOS_EMPRESA.NR_AIH_INICIAL_CNRAC;
  formParams.NR_AIH_FINAL_CNRAC:= R_DADOS_EMPRESA.NR_AIH_FINAL_CNRAC;
  formParams.NR_INICIAL_AIH_ESPECIFICA:= R_DADOS_EMPRESA.NR_INICIAL_AIH_ESPECIFICA;
  formParams.NR_FINAL_AIH_ESPECIFICA:= R_DADOS_EMPRESA.NR_FINAL_AIH_ESPECIFICA;
/*
  formParams.NR_AIH_INICIAL_CNRAC      := TO_CHAR(vAIH1);
  formParams.NR_AIH_FINAL_CNRAC        := TO_CHAR(vAIH2);
  formParams.NR_INICIAL_AIH_ESPECIFICA := TO_CHAR(vAIH3);
  formParams.NR_FINAL_AIH_ESPECIFICA   := TO_CHAR(vAIH4);
*/
 --
 -- Limpando a lista de Parâmetros
 --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_EMPRESA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCd_Multi_Empresa number;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCd_Multi_Empresa:= PKG_XML.Getnumber(xml, 'pCd_Multi_Empresa');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.SN_IMPORTA_ATEND:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_IMPORTA_ATEND');
    formParams.SN_GERA_DISQUETE_PERIODO:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_GERA_DISQUETE_PERIODO');
    formParams.SN_GERA_ACH:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_GERA_ACH');
    formParams.CD_PRESTADOR_AIH:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_AIH');
    formParams.CD_CGC:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.CD_CGC');
    formParams.CD_PRESTADOR_DIR_CLINICO:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_DIR_CLINICO');
    formParams.DS_MULTI_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.DS_MULTI_EMPRESA');
    formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
    formParams.NR_AIH_INICIAL_CNRAC:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_AIH_INICIAL_CNRAC');
    formParams.NR_AIH_FINAL_CNRAC:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_AIH_FINAL_CNRAC');
    formParams.NR_INICIAL_AIH_ESPECIFICA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_INICIAL_AIH_ESPECIFICA');
    formParams.NR_FINAL_AIH_ESPECIFICA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_FINAL_AIH_ESPECIFICA');
--raise_application_error(-20999,formParams.CD_PRESTADOR_AIH||' teste');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_EMPRESA_E(xml) THEN
        P_RETORNA_DADOS_EMPRESA(xml, pCd_Multi_Empresa, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_EMPRESA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.P_EMPRESA', formParams.P_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_IMPORTA_ATEND', formParams.SN_IMPORTA_ATEND);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_GERA_DISQUETE_PERIODO', formParams.SN_GERA_DISQUETE_PERIODO);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_GERA_ACH', formParams.SN_GERA_ACH);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_AIH', formParams.CD_PRESTADOR_AIH);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.CD_CGC', formParams.CD_CGC);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_DIR_CLINICO', formParams.CD_PRESTADOR_DIR_CLINICO);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.DS_MULTI_EMPRESA', formParams.DS_MULTI_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA', formParams.SN_REMESSA_OBRIGATORIA);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_AIH_INICIAL_CNRAC', formParams.NR_AIH_INICIAL_CNRAC);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_AIH_FINAL_CNRAC', formParams.NR_AIH_FINAL_CNRAC);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_INICIAL_AIH_ESPECIFICA', formParams.NR_INICIAL_AIH_ESPECIFICA);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_FINAL_AIH_ESPECIFICA', formParams.NR_FINAL_AIH_ESPECIFICA);
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_VALIDA_CID_OBITO</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_VALIDA_CID_OBITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pEstadoPac in Varchar2,pMot in Varchar2) IS
Cursor cCID Is Select nvl(SubCat,'N')  SubCat
                   From CID
                  Where Cd_CID = pCID;
    Cursor cMotivo is Select Tp_Mot_Alta
                        From mot_alt
                       Where Cd_Mot_Alt = pMot;
  vTpMotAlta  mot_alt.tp_mot_alta%type;
  rCID        cCID%RowType;
  Saida       Exception;
Begin
  If pCID Is Null Then
    Raise Saida;
  End If;
  Open cMotivo;
    Fetch cMotivo into vTpMotAlta;
  Close cMotivo;
     If nvl(vTpMotAlta,'X') <> 'O' and pEstadoPac <> 'O' then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_85)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_85', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é possível informar O CID do óbito. Paciente não está em óbito.'),TRUE);
    End if;
  Open cCID;
    Fetch cCID Into rCID;
  Close cCID;
  If rCID.SubCat = 'N' then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_86)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_86', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CID do óbito não Válido Para lançamento.'),TRUE);
  End If;
Exception
      When Saida Then
        Null;
END;
PROCEDURE P_VALIDA_CID_OBITO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pCID Varchar2(4000);
  pEstadoPac Varchar2(4000);
  pMot Varchar2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pCID:= PKG_XML.GetVarchar2(xml, 'pCID');
    pEstadoPac:= PKG_XML.GetVarchar2(xml, 'pEstadoPac');
    pMot:= PKG_XML.GetVarchar2(xml, 'pMot');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_OBITO_E(xml) THEN
        P_VALIDA_CID_OBITO(xml, pCID, pEstadoPac, pMot);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_OBITO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>Montar_Diaria_Acompanhante</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE ( xml IN OUT NOCOPY PKG_XML.XmlContext
                                         , pRegFat  In Number
                                         , pDias_DA In number
                                         , pReflesh  IN OUT NOCOPY Varchar2
                                         , reg_fat IN OUT NOCOPY REG_FATRec) IS
nLancamento  Number;
  Saida        Exception;
vMens    varchar2(100); --PDA 524796
Begin
   If Nvl(pDias_DA,0) = 0 Then
     If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_TEM_DA(xml, pRegFat) Then
         Pkg_ffis_M_LACTO_AIH_P321.P_DML_DELETE_DA(xml, pRegFat, REG_FAT);
     Else
       Raise Saida;
     End If;
   End if;
   If Not Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_TEM_DA(xml, pRegFat) then
     Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_ITREG_FAT(xml, pRegFat,
                      nLancamento,
                      Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_PRC_DIARIA_ACOMPAN(xml, pRegFat),
                      Pkg_ffis_M_LACTO_AIH_P321.F_GET_DT_INTERNACAO(xml, pRegFat),
                      Pkg_ffis_M_LACTO_AIH_P321.F_GET_SETOR_REALIZADO(xml, pRegFat),
                      Pkg_ffis_M_LACTO_AIH_P321.F_GET_PRESTADOR_AIH(xml),
                      pDias_DA,
                      'N',
                      pReflesh);
    --INICIO PDA 524796
    pkg_ffis_valida_lancamento_aih.PRC_LANCA_QTD_COMPETENCIA(pRegFat, 'A', 'ACOMP', vMens);
    pReflesh:= 'S';
/*   Else
        Pkg_ffis_M_LACTO_AIH_P321.P_DML_ATUALIZA_DA(xml, pRegFat,pDias_DA);*/
    --FIM PDA 524796
   End if;
   commit;
Exception
  When Saida Then
    Null;
End;
PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat Number;
  pDias_DA number;
  pReflesh Varchar2(4000);
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
    pDias_DA:= PKG_XML.Getnumber(xml, 'pDias_DA');
    pReflesh:= PKG_XML.GetVarchar2(xml, 'pReflesh');
    REG_FAT.NR_DIARIA_ACOMPANHANTE:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_DIARIA_ACOMPANHANTE_E(xml) THEN
        P_MONTAR_DIARIA_ACOMPANHANTE(xml, pRegFat, pDias_DA, pReflesh, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_DIARIA_ACOMPANHANTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE', REG_FAT.NR_DIARIA_ACOMPANHANTE);
    PKG_XML.SetVarchar2(xml, 'pReflesh', pReflesh);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_ATUALIZA_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number ,pDias in number) IS
Cursor cDA Is Select Sum(Qt_Lancamento) Qt_Lancamento
                  From ItReg_Fat
                 Where Cd_Reg_Fat = pRegFat
                   And Cd_Procedimento In (Select Cd_Procedimento
                                             From Procedimento_SUS_Detalhe
                                            Where SN_Diaria_Acompanhante = 'S');
  nTotalIT Number;
BEGIN
  Open cDA;
    Fetch cDa Into nTotalIT;
  Close cDA;
  If nTotalIT <> pDias Then
      Update ItReg_Fat
          Set Qt_Lancamento = pDias
     Where Cd_Reg_Fat    = pRegFat
       And Cd_Procedimento In (Select Cd_Procedimento
                                From Procedimento_SUS_Detalhe
                                Where SN_Diaria_Acompanhante = 'S');
  Commit;
  End If;
END;
PROCEDURE P_DML_ATUALIZA_DA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat number;
  pDias number;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
    pDias:= PKG_XML.Getnumber(xml, 'pDias');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_DA_E(xml) THEN
        P_DML_ATUALIZA_DA(xml, pRegFat, pDias);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_DA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRC_DML_DELETE_DA</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_DML_DELETE_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
    If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_TEM_DA(xml, pRegFat) Then
      Delete ItReg_Fat
     Where Cd_Reg_Fat = pRegFat
       And Cd_Procedimento In (Select Cd_Procedimento
                                 From Procedimento_SUS_Detalhe
                                Where SN_Diaria_Acompanhante = 'S');
    End If;
    If NVL(REG_FAT.NR_DIARIA_ACOMPANHANTE,0) > 0 Then
    REG_FAT.NR_DIARIA_ACOMPANHANTE:= 0;
    End If;
  Commit;
END;
PROCEDURE P_DML_DELETE_DA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  pRegFat number;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
    REG_FAT.NR_DIARIA_ACOMPANHANTE:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DELETE_DA_E(xml) THEN
        P_DML_DELETE_DA(xml, pRegFat, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DELETE_DA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE', REG_FAT.NR_DIARIA_ACOMPANHANTE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.DSP_DS_CIDADANIA.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
--SAULO
begin
   if FSV_BLOCK_STATUS <> 'QUERY' AND PACIENTE.DSP_DS_CIDADANIA IS NOT NULL then
      SELECT CD_CIDADANIA
        INTO PACIENTE.CD_CIDADANIA
        FROM CIDADANIAS
       WHERE DS_CIDADANIA = PACIENTE.DSP_DS_CIDADANIA;
   end if;
exception
   when NO_DATA_FOUND then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_87)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_87', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidadania não Cadastrada.'),TRUE);
end;
END P_I_PC_P_DSP_DS_CIDADANIA;
PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
  FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.CD_CIDADANIA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADANIA');
    PACIENTE.DSP_DS_CIDADANIA:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA');
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_CIDADANIA_E(xml) THEN
        P_I_PC_P_DSP_DS_CIDADANIA(xml, PACIENTE, FSV_BLOCK_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_CIDADANIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADANIA', PACIENTE.CD_CIDADANIA);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA', PACIENTE.DSP_DS_CIDADANIA);
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.DSP_DS_GRAU_INS.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
Declare
  Cursor cGrauInst Is Select Cd_Grau_Ins
                        From Grau_Ins
                       Where Ds_Grau_Ins = Paciente.Dsp_Ds_Grau_Ins;
Begin
   If FSV_Block_Status <> 'QUERY' then
     Open cGrauInst;
       Fetch cGrauInst Into Paciente.Cd_Grau_Ins;
     Close cGrauInst;
     If Paciente.Cd_Grau_Ins Is Null Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_88)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_88', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Grau de Instrução não Cadastrado.'),True);
     End If;
   End If;
end;
END P_I_PC_P_DSP_DS_GRAU_INS;
PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
  FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.DSP_DS_GRAU_INS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS');
    PACIENTE.CD_GRAU_INS:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_GRAU_INS');
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_GRAU_INS_E(xml) THEN
        P_I_PC_P_DSP_DS_GRAU_INS(xml, PACIENTE, FSV_BLOCK_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_GRAU_INS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS', PACIENTE.DSP_DS_GRAU_INS);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_GRAU_INS', PACIENTE.CD_GRAU_INS);
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.NR_CEP.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_NR_CEP (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
begin
        begin
           SELECT cida.CD_UF,
                  cida.NM_CIDADE,
                  cida.CD_CIDADE
             into PACIENTE.DSP_CD_UF,
                  PACIENTE.DSP_NM_CIDADE,
                  PACIENTE.CD_CIDADE
             FROM CIDADE cida,
                  CEP_LOCALIDADES loca,
                  CEP_LOGRADOUROS logr
            WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
              AND loca.CD_UF         = cida.CD_UF
              AND loca.NM_LOCALIDADE = cida.NM_CIDADE
              AND logr.NR_CEP        = PACIENTE.NR_CEP;
        exception
            when NO_DATA_FOUND then
                 --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
                 --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_89)
                 PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),pkg_rmi_traducao.extrair_pkg_msg('MSG_89', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CEP não Encontrado.'),True);
        end;
/*
   if FSV_BLOCK_STATUS <> 'QUERY' then
      SELECT cep.NM_LOCALIDADE,
             cep.CD_UF,
             cida.CD_CIDADE
        into PACIENTE.DSP_NM_CIDADE,
             PACIENTE.DSP_CD_UF,
             PACIENTE.CD_CIDADE
        FROM CEP_LOCALIDADES cep,
             CIDADE cida
       WHERE cep.NM_LOCALIDADE = cida.NM_CIDADE
         AND cep.CD_UF         = cida.CD_UF
         AND cep.NR_CEP        = PACIENTE.NR_CEP;
   end if;
exception
   when NO_DATA_FOUND then
        begin
           SELECT cida.CD_UF,
                  cida.NM_CIDADE,
                  cida.CD_CIDADE
             into PACIENTE.DSP_CD_UF,
                  PACIENTE.DSP_NM_CIDADE,
                  PACIENTE.CD_CIDADE
             FROM CIDADE cida,
                  CEP_LOCALIDADES loca,
                  CEP_LOGRADOUROS logr
            WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
              AND loca.CD_UF         = cida.CD_UF
              AND loca.NM_LOCALIDADE = cida.NM_CIDADE
              AND logr.NR_CEP        = PACIENTE.NR_CEP;
        exception
            when NO_DATA_FOUND then
                 PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                               ,'Erro: CEP não Encontrado.',True);
        end;
*/
end;
END P_I_PC_P_NR_CEP;
PROCEDURE P_I_PC_P_NR_CEP (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
  FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
    PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
    PACIENTE.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADE');
    PACIENTE.NR_CEP:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CEP');
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_NR_CEP_E(xml) THEN
        P_I_PC_P_NR_CEP(xml, PACIENTE, FSV_BLOCK_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_NR_CEP_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADE', PACIENTE.CD_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.DSP_NR_CPF.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_P_DSP_NR_CPF (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec) IS
BEGIN
Declare
  Cursor cCPF Is select CD_PACIENTE
                   from paciente
                  where NR_CPF = to_char(PACIENTE.DSP_NR_CPF);
   VsMensagem    varchar2(100);
   nCdPac        number;
begin
   if nvl(global.CPFOld,0) <> nvl(PACIENTE.DSP_NR_CPF,1) then
      PACK_FFIS.erro_cpf(PACIENTE.DSP_NR_CPF, 1111, Null, Null, false, VsMensagem);
      if VsMensagem is not null then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_56)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_56', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s', arg_list(VsMensagem)),TRUE);
      end if;
      Open cCPF;
        Fetch cCPF Into nCdPac;
      Close cCPF;
      if nCdPac is null then
        PACIENTE.NR_CPF := to_char(PACIENTE.DSP_NR_CPF);
      end if;
      if nCdPac <> nvl(PACIENTE.CD_PACIENTE, 0) then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_90)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_90', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CPF já Cadastrado em outro Paciente.'),TRUE);
      end if;
   end if;
end;
END P_I_PC_P_DSP_NR_CPF;
PROCEDURE P_I_PC_P_DSP_NR_CPF (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
  global GlobalsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.DSP_NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF');
    PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
    PACIENTE.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_PACIENTE');
    PACIENTE.DSP_NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF');
    PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
    PACIENTE.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_PACIENTE');
    global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
    global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_NR_CPF_E(xml) THEN
        P_I_PC_P_DSP_NR_CPF(xml, PACIENTE, global);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_NR_CPF_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.setVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_PACIENTE', PACIENTE.CD_PACIENTE);
    PKG_XML.setVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_PACIENTE', PACIENTE.CD_PACIENTE);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.NR_CNS.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_P_NR_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec) IS
BEGIN
Declare
  Cursor cVerificaCNS is
    Select p.cd_paciente
      From paciente p
     Where p.nr_cns = PACIENTE.NR_CNS
       And p.cd_paciente <> PACIENTE.CD_PACIENTE;
  vValidaDef        Boolean;
  vValidaProv       Boolean;
  nCdPaciente       number;
Begin
  If Paciente.Nr_Cns Is Not Null Then
      -->>
       -->> Valida a numerAção do Cartão Nacional de Saúde definitivo.
       -->>
    vValidaDef := Pkg_ffis_M_LACTO_AIH_P321.F_VALIDA_CNS(xml, Paciente.Nr_Cns);
    If vValidaDef = FALSE  Then
         -->>
         -->> Valida a numerAção do Cartão Nacional de Saúde provisário.(PDA 82405)
         -->>
      vValidaProv := Pkg_ffis_M_LACTO_AIH_P321.F_VALIDA_CNS_PROV(xml, Paciente.Nr_Cns);
         IF NOT vValidaProv THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_91)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_91', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: O Número do CNS não confere. Verifique o Número digitado.'),true);
      END IF;
    END IF;
    nCdPaciente := NULL;
    Open  cVerificaCNS;
    Fetch cVerificaCNS into nCdPaciente;
    Close cVerificaCNS;
    IF nCdPaciente IS NOT NULL then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_92)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_92', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cartão Nacional de Saúde cadastrado em outro paciente.(%s)', arg_list(nCdPaciente)),true);
    END IF;
  END IF;
End;
END P_I_WVI_P_NR_CNS;
PROCEDURE P_I_WVI_P_NR_CNS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.NR_CNS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CNS');
    PACIENTE.NR_CNS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CNS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_P_NR_CNS_E(xml) THEN
        P_I_WVI_P_NR_CNS(xml, PACIENTE);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_P_NR_CNS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CNS', PACIENTE.NR_CNS);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CNS', PACIENTE.NR_CNS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PACIENTE.POST-QUERY</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PQ_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
Declare
    Cursor cLocalidade(pCEP Varchar2) Is
          SELECT substr(cep.NM_LOCALIDADE,1,40),
             cep.CD_UF
        FROM CEP_LOCALIDADES cep,
             CIDADE cida
       WHERE cep.NR_CEP        = pCEP
         and cep.NM_LOCALIDADE = cida.NM_CIDADE
         AND cep.CD_UF         = cida.CD_UF
       Group By substr(cep.NM_LOCALIDADE,1,40),
                cep.CD_UF;
    Cursor cLocalidade2(pCEP Varchar2) Is
    SELECT cida.NM_CIDADE
         , cida.CD_UF
      FROM CIDADE cida,
           CEP_LOCALIDADES loca,
           CEP_LOGRADOUROS logr
     WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
       AND loca.CD_UF         = cida.CD_UF
       AND loca.NM_LOCALIDADE = cida.NM_CIDADE
       AND logr.NR_CEP        = pCEP
       GROUP BY cida.CD_UF,
                cida.NM_CIDADE;
      Cursor cCidadania(pCidadania Varchar2) Is SELECT DS_CIDADANIA
                                                  FROM CIDADANIAS
                                                 WHERE CD_CIDADANIA = pCidadania;
begin
  -- Retorna cidadania do paciente
/*  PACIENTE.DSP_DS_CIDADANIA:= M_PKG_GLOBAL_CIDADANIAS.F_RETORNA_DESCRICAO(xml,PACIENTE.CD_CIDADANIA
                                                                          ,formParams.P_EMPRESA
                                                                          ,xml.usuario
                                                                          ,FALSE
                                                                          ,FALSE);
*/
  -- Retorna grau de Instrução do paciente
  PACIENTE.DSP_DS_GRAU_INS:= M_PKG_GLOBAL_GRAU_INS.F_RETORNA_DESCRICAO(xml,PACIENTE.CD_GRAU_INS
                                                                       ,formParams.P_EMPRESA
                                                                       ,xml.usuario
                                                                       ,FALSE
                                                                       ,FALSE);
  Open cLocalidade(PACIENTE.NR_CEP);
    Fetch cLocalidade Into PACIENTE.DSP_NM_CIDADE,PACIENTE.DSP_CD_UF;
  Close cLocalidade;
  Open cCidadania(PACIENTE.CD_CIDADANIA);
    Fetch cCidadania Into PACIENTE.DSP_DS_CIDADANIA;
  Close cCidadania;
  If PACIENTE.DSP_NM_CIDADE Is Null Then
    Open cLocalidade2(PACIENTE.NR_CEP);
      Fetch cLocalidade2 Into PACIENTE.DSP_NM_CIDADE,PACIENTE.DSP_CD_UF;
    Close cLocalidade2;
  End If;
  Paciente.Dsp_Nr_CPF        := to_number(PACIENTE.NR_CPF);
  -- Guarda CPF Anterior para verificar Mudanca
  global.CPFOld              := Nvl(PACIENTE.DSP_NR_CPF, 0);
  Paciente.DSP_NR_Identidade := PACIENTE.NR_IDENTIDADE;
  -- Guarda RG Anterior para verificar Mudanca
  global.RGOld               := Nvl(PACIENTE.DSP_NR_IDENTIDADE, '0');
  If length (Paciente.Nr_Identidade) > 11 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_93)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_93', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número de Identidade maior que o permitido pelo SUS. Verifique o cadastro do paciente%sAção: Corrigir pela tela de cadastro de paciente.'
          , arg_list(chr(10))),False);
  End if;
End;
END P_B_PQ_PACIENTE;
PROCEDURE P_B_PQ_PACIENTE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  paciente PACIENTERec;
  global GlobalsRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    PACIENTE.DSP_DS_CIDADANIA:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA');
    PACIENTE.CD_CIDADANIA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADANIA');
    PACIENTE.DSP_DS_GRAU_INS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS');
    PACIENTE.CD_GRAU_INS:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_GRAU_INS');
    PACIENTE.NR_CEP:= PKG_XML.GetNUMBER(xml, 'PACIENTE.NR_CEP');
    PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
    PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
    PACIENTE.DSP_NR_CPF:= PKG_XML.GetNUMBER(xml, 'PACIENTE.DSP_NR_CPF');
    PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
    PACIENTE.DSP_NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE');
    PACIENTE.NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE');
    PACIENTE.DSP_DS_CIDADANIA:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA');
    PACIENTE.CD_CIDADANIA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADANIA');
    PACIENTE.DSP_DS_GRAU_INS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS');
    PACIENTE.CD_GRAU_INS:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_GRAU_INS');
    PACIENTE.NR_CEP:= PKG_XML.GetNUMBER(xml, 'PACIENTE.NR_CEP');
    PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
    PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
    PACIENTE.DSP_NR_CPF:= PKG_XML.GetNUMBER(xml, 'PACIENTE.DSP_NR_CPF');
    PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
    PACIENTE.DSP_NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE');
    PACIENTE.NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE');
    global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
    global.RGOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.RGOLD');
    global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
    global.RGOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.RGOLD');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_PACIENTE_E(xml) THEN
        P_B_PQ_PACIENTE(xml, PACIENTE, global, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_PACIENTE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA', PACIENTE.DSP_DS_CIDADANIA);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADANIA', PACIENTE.CD_CIDADANIA);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS', PACIENTE.DSP_DS_GRAU_INS);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_GRAU_INS', PACIENTE.CD_GRAU_INS);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE', PACIENTE.DSP_NR_IDENTIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE', PACIENTE.NR_IDENTIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA', PACIENTE.DSP_DS_CIDADANIA);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADANIA', PACIENTE.CD_CIDADANIA);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS', PACIENTE.DSP_DS_GRAU_INS);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_GRAU_INS', PACIENTE.CD_GRAU_INS);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
    PKG_XML.SetNUMBER(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE', PACIENTE.DSP_NR_IDENTIDADE);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE', PACIENTE.NR_IDENTIDADE);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.RGOLD', global.RGOLD);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.RGOLD', global.RGOLD);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.DT_ATENDIMENTO.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_A_DT_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, p_atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
declare
   dDtAtend date;
   dLimite  date := sysdate;
   Paciente_Em_Atendimento exception;
begin
   if FSV_BLOCK_STATUS <> 'QUERY' then
      if P_ATENDIME.DT_ATENDIMENTO > sysdate then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_94)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_94', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data de Internação não Pode Ser Maior que Data Atual!'),TRUE);
      end if;
      select max(dt_atendimento)
        into dDtAtend
        from ATENDIME
       where CD_PACIENTE      = P_ATENDIME.CD_PACIENTE
         and CD_MULTI_EMPRESA = formParams.P_EMPRESA
         and DT_ALTA          is null
         and TP_ATENDIMENTO   in('S','I','B')
         and CD_CONVENIO      in( select conv.cd_convenio
                                    from convenio conv
                                   where conv.TP_CONVENIO = 'H' );
      if dDtAtend is not null then
         raise Paciente_Em_Atendimento;
      end if;
   end if;
exception
   when NO_DATA_FOUND then
        declare
           dDtAlta Date;
           Atendimento_Menor_Ultima_Alta exception;
        begin
           select max(DT_ALTA)
             into dDtAlta
             from ATENDIME
            where CD_PACIENTE      = P_ATENDIME.CD_PACIENTE
              and CD_MULTI_EMPRESA = formParams.P_EMPRESA
              and DT_ALTA          is not null
              and TP_ATENDIMENTO   in('S','I','B')
              and CD_CONVENIO      in( select conv.cd_convenio
                                         from convenio conv
                                         where conv.TP_CONVENIO = 'H' );
           if dDtAlta > P_ATENDIME.DT_ATENDIMENTO then
              raise Atendimento_Menor_Ultima_Alta;
           end if;
        exception
           when NO_DATA_FOUND then
                Null;
           when Atendimento_Menor_Ultima_Alta then
                --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
                PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                              --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_95)
                              ,pkg_rmi_traducao.extrair_pkg_msg('MSG_95', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Atendimento Anterior a Ultima Alta: %s!', arg_list(to_char(dDtAlta, 'DD/MM/YYYY'))),TRUE);
        end;
   when Paciente_Em_Atendimento then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_96)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_96', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Paciente (%s) em atendimento desde: %s!', arg_list(P_ATENDIME.CD_PACIENTE, to_char(dDtAtend, 'DD/MM/YYYY'))),TRUE);
end;
END P_I_PC_A_DT_ATENDIMENTO;
PROCEDURE P_I_PC_A_DT_ATENDIMENTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
  formParams FormParamsRec;
  FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.DT_ATENDIMENTO:= PKG_XML.GetDATE(xml, 'ATENDIME.DT_ATENDIMENTO');
    ATENDIME.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PACIENTE');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_DT_ATENDIMENTO_E(xml) THEN
        P_I_PC_A_DT_ATENDIMENTO(xml, ATENDIME, formParams, FSV_BLOCK_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_DT_ATENDIMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetDATE(xml, 'ATENDIME.DT_ATENDIMENTO', ATENDIME.DT_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PACIENTE', ATENDIME.CD_PACIENTE);
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.CD_PRESTADOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_A_CD_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec) IS
BEGIN
IF PACK_SUS.PRC_SUS_RET_TAMANHO_CPF_CNPJ(ATENDIME.CD_PRESTADOR) > 11 THEN
  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
  PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_97)
                ,pkg_rmi_traducao.extrair_pkg_msg('MSG_97', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador só permite lançamento de C.P.F. Verifique o cadastro do prestador.'),TRUE);
END IF;
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_CPF_PRESTADOR(xml, ATENDIME.CD_PRESTADOR);
END P_I_WVI_A_CD_PRESTADOR;
PROCEDURE P_I_WVI_A_CD_PRESTADOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_PRESTADOR:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PRESTADOR');
    ATENDIME.CD_PRESTADOR:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PRESTADOR');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_A_CD_PRESTADOR_E(xml) THEN
        P_I_WVI_A_CD_PRESTADOR(xml, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_A_CD_PRESTADOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PRESTADOR', ATENDIME.CD_PRESTADOR);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PRESTADOR', ATENDIME.CD_PRESTADOR);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.CD_LEITO.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_A_CD_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
begin
   if FSV_BLOCK_STATUS <> 'QUERY' then
      ATENDIME.DSP_DS_LEITO      := Null;
      ATENDIME.CD_TIP_ACOM       := Null;
      ATENDIME.DSP_DS_TIP_ACOM   := Null;
      ATENDIME.DSP_DS_ENFERMARIA := Null;
      SELECT leito.ds_leito,
             leito.cd_tip_acom,
             leito.ds_enfermaria,
             tip_acom.ds_tip_acom
        INTO ATENDIME.DSP_DS_LEITO,
             ATENDIME.CD_TIP_ACOM,
             ATENDIME.DSP_DS_ENFERMARIA,
             ATENDIME.DSP_DS_TIP_ACOM
        FROM LEITO,
             unid_int,
             setor,
             tip_acom
       WHERE LEITO.CD_LEITO       = ATENDIME.CD_LEITO
         and leito.tp_situacao    = 'A'
         and leito.tp_ocupacao    = 'V'
         and leito.tp_sexo        in (PACIENTE.TP_SEXO, 'A')
         and unid_int.cd_unid_int = leito.cd_unid_int
         and unid_int.cd_setor    = setor.cd_setor
         and tip_acom.cd_tip_acom = leito.cd_tip_acom
         AND (
              ( NVL(DBAMV.PKG_SUS_REGRA_SETOR.F_SN_HABILITA_SETOR_EMPRESA, 'N') = 'N' AND setor.cd_multi_empresa = formParams.P_EMPRESA)
                OR
              ( NVL(DBAMV.PKG_SUS_REGRA_SETOR.F_SN_HABILITA_SETOR_EMPRESA, 'N') = 'S')
              );
   end if;
exception
   when NO_DATA_FOUND then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_98)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_98', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Este Leito não existe ou não é Compativel com Sexo do Paciente.'),TRUE);
end;
END P_I_PC_A_CD_LEITO;
PROCEDURE P_I_PC_A_CD_LEITO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
  paciente PACIENTERec;
  formParams FormParamsRec;
  FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.DSP_DS_LEITO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_LEITO');
    ATENDIME.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM');
    ATENDIME.DSP_DS_TIP_ACOM:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_TIP_ACOM');
    ATENDIME.DSP_DS_ENFERMARIA:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA');
    ATENDIME.CD_LEITO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_LEITO');
    PACIENTE.TP_SEXO:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.TP_SEXO');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_CD_LEITO_E(xml) THEN
        P_I_PC_A_CD_LEITO(xml, ATENDIME, PACIENTE, formParams, FSV_BLOCK_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_CD_LEITO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_LEITO', ATENDIME.DSP_DS_LEITO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM', ATENDIME.CD_TIP_ACOM);
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_TIP_ACOM', ATENDIME.DSP_DS_TIP_ACOM);
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA', ATENDIME.DSP_DS_ENFERMARIA);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_LEITO', ATENDIME.CD_LEITO);
    PKG_XML.SetVARCHAR2(xml, 'PACIENTE.TP_SEXO', PACIENTE.TP_SEXO);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.P_EMPRESA', formParams.P_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.PRE-INSERT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PI_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
Begin
  ATENDIME.CD_ORI_ATE       := pkt_config_ffis.retorna_campo('CD_ORI_ATE');
  ATENDIME.CD_CONVENIO      := pkt_config_ffis.retorna_campo('CD_CONVENIO');
  ATENDIME.CD_CON_PLA       := pkt_config_ffis.retorna_campo('CD_CON_PLA');
  ATENDIME.CD_MULTI_EMPRESA := formParams.P_Empresa;
  ATENDIME.NM_USUARIO       := PKG_XML.GetPropVarChar2(xml, 'APPLICATION','USERNAME');
   if ATENDIME.CD_ATENDIMENTO is Null then
      select SEQ_ATENDIME.NEXTVAL
        into ATENDIME.CD_ATENDIMENTO
        from sys.dual;
   end if;
exception
   when NO_DATA_FOUND then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_99)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_99', 'PKG_FFIS_M_LACTO_AIH_P321', 'ERRO INTERNO: Nenhuma linha na tabela SYS.DUAL'),True);
end;
END P_B_PI_ATENDIME;
PROCEDURE P_B_PI_ATENDIME (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_ORI_ATE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ORI_ATE');
    ATENDIME.CD_CONVENIO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CONVENIO');
    ATENDIME.CD_CON_PLA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CON_PLA');
    ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
    ATENDIME.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.NM_USUARIO');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    ATENDIME.CD_ORI_ATE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ORI_ATE');
    ATENDIME.CD_CONVENIO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CONVENIO');
    ATENDIME.CD_CON_PLA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CON_PLA');
    ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
    ATENDIME.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.NM_USUARIO');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_ATENDIME_E(xml) THEN
        P_B_PI_ATENDIME(xml, ATENDIME, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_ATENDIME_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ORI_ATE', ATENDIME.CD_ORI_ATE);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CONVENIO', ATENDIME.CD_CONVENIO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CON_PLA', ATENDIME.CD_CON_PLA);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.NM_USUARIO', ATENDIME.NM_USUARIO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ORI_ATE', ATENDIME.CD_ORI_ATE);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CONVENIO', ATENDIME.CD_CONVENIO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CON_PLA', ATENDIME.CD_CON_PLA);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'ATENDIME.NM_USUARIO', ATENDIME.NM_USUARIO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ATENDIME.ON-CHECK-DELETE-MASTER</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_OCDM_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec) IS
BEGIN
DECLARE
  Dummy_Define CHAR(1);
  --
  -- Begin LOG_FALHA_IMPORTACAO detail declare section
  --
  CURSOR LOG_FALHA_IMPORTACAO_cur IS
    SELECT 1 FROM LOG_FALHA_IMPORTACAO L
    WHERE L.CD_ATENDIMENTO = ATENDIME.CD_ATENDIMENTO;
  --
  -- End LOG_FALHA_IMPORTACAO detail declare section
  --
  --
  -- Begin REG_FAT detail declare section
  --
  CURSOR REG_FAT_cur IS
    SELECT 1 FROM REG_FAT D
    WHERE D.CD_ATENDIMENTO = ATENDIME.CD_ATENDIMENTO and D.CD_MULTI_EMPRESA = ATENDIME.CD_MULTI_EMPRESA;
  --
  -- End REG_FAT detail declare section
  --
  --OP 10813 inicio
  CURSOR RESPONSA_cur IS
    SELECT 1 FROM RESPONSA R
    WHERE R.CD_ATENDIMENTO = ATENDIME.CD_ATENDIMENTO;
  --OP 10813 fim
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  --
  -- Begin LOG_FALHA_IMPORTACAO detail program section
  --
  OPEN LOG_FALHA_IMPORTACAO_cur;
  FETCH LOG_FALHA_IMPORTACAO_cur INTO Dummy_Define;
  IF ( LOG_FALHA_IMPORTACAO_cur%found ) THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_2)
    PKG_XML_MGS.MESSAGE(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_2', 'PKG_FFIS_M_LACTO_AIH_P321', 'Cannot delete master record when matching detail records exist.'));
    CLOSE LOG_FALHA_IMPORTACAO_cur;
    RAISE Form_Trigger_Failure;
  END IF;
  CLOSE LOG_FALHA_IMPORTACAO_cur;
  --
  -- End LOG_FALHA_IMPORTACAO detail program section
  --
  --
  -- Begin REG_FAT detail program section
  --
  OPEN REG_FAT_cur;
  FETCH REG_FAT_cur INTO Dummy_Define;
  IF ( REG_FAT_cur%found ) THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_2)
    PKG_XML_MGS.MESSAGE(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_2', 'PKG_FFIS_M_LACTO_AIH_P321', 'Cannot delete master record when matching detail records exist.'));
    CLOSE REG_FAT_cur;
    RAISE Form_Trigger_Failure;
  END IF;
  CLOSE REG_FAT_cur;
  --
  -- End REG_FAT detail program section
  --
  --OP 10813 inicio
  OPEN RESPONSA_cur;
  FETCH RESPONSA_cur INTO Dummy_Define;
  IF ( RESPONSA_cur%found ) THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_2)
    PKG_XML_MGS.MESSAGE(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_2', 'PKG_FFIS_M_LACTO_AIH_P321', 'Cannot delete master record when matching detail records exist.'));
    CLOSE RESPONSA_cur;
    RAISE Form_Trigger_Failure;
  END IF;
  CLOSE RESPONSA_cur;
  --OP 10813 fim
END;
END P_B_OCDM_ATENDIME;
PROCEDURE P_B_OCDM_ATENDIME (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_OCDM_ATENDIME_E(xml) THEN
        P_B_OCDM_ATENDIME(xml, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_OCDM_ATENDIME_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_GUIA.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec) IS
BEGIN
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_NR_GUIA(xml, REG_FAT.CD_REG_FAT,REG_FAT.NR_GUIA);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GUIAS(xml, Atendime.Cd_Atendimento,Reg_Fat.Cd_Reg_Fat,Reg_Fat.Nr_Guia);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GLOSA_TOTAL(xml, REG_FAT.CD_REG_FAT);
END P_I_WVI_RF_NR_GUIA;
PROCEDURE P_I_WVI_RF_NR_GUIA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  atendime ATENDIMERec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_GUIA_E(xml) THEN
        P_I_WVI_RF_NR_GUIA(xml, REG_FAT, ATENDIME);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_GUIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_SEQAIH5.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
declare
     nSeq      number;
begin
   if REG_FAT.NR_SEQAIH5 is not Null  and
      REG_FAT.NR_IDENTIFICACAO <> '5' then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_100)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_100', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Sequencial só poderá ser Informado em Identificação 5.'),TRUE);
   end if;
   select nvl(max(r.NR_SEQAIH5),0)
     into nSeq
     from REG_FAT r
    where r.CD_ATENDIMENTO   = REG_FAT.CD_ATENDIMENTO
        AND r.CD_MULTI_EMPRESA = xml.multiEmpresa
        and r.NR_IDENTIFICACAO = '5'
        and r.nr_guia          = REG_FAT.NR_GUIA
      and r.CD_REG_FAT      <> nvl(REG_FAT.CD_REG_FAT,0);
   if REG_FAT.NR_SEQAIH5 <> (nSeq + 1) then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_101)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_101', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número fora da Sequencia para Identificação 5.'),TRUE);
   end if;
exception
   when NO_DATA_FOUND then
        if REG_FAT.NR_SEQAIH5 <> 1 then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_101)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_101', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número fora da Sequencia para Identificação 5.'),TRUE);
        end if;
end;
END P_I_WVI_RF_NR_SEQAIH5;
PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.NR_SEQAIH5:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_SEQAIH5');
    REG_FAT.NR_IDENTIFICACAO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO');
    REG_FAT.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_SEQAIH5:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_SEQAIH5');
    REG_FAT.NR_IDENTIFICACAO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO');
    REG_FAT.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_SEQAIH5_E(xml) THEN
        P_I_WVI_RF_NR_SEQAIH5(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_SEQAIH5_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_SEQAIH5', REG_FAT.NR_SEQAIH5);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO', REG_FAT.NR_IDENTIFICACAO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO', REG_FAT.CD_ATENDIMENTO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_SEQAIH5', REG_FAT.NR_SEQAIH5);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO', REG_FAT.NR_IDENTIFICACAO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO', REG_FAT.CD_ATENDIMENTO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_AIH_ANTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GUIAS(xml, Atendime.Cd_Atendimento,Reg_Fat.Cd_Reg_Fat,Reg_Fat.Nr_AIH_Anterior);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_NR_AIH(xml, REG_FAT.CD_REG_FAT,REG_FAT.NR_GUIA,'A',REG_FAT.NR_AIH_ANTERIOR,REG_FAT.NR_AIH_POSTERIOR);
END P_I_WVI_RF_NR_AIH_ANTERIOR;
PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_ANTERIOR_E(xml) THEN
        P_I_WVI_RF_NR_AIH_ANTERIOR(xml, ATENDIME, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_ANTERIOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_AIH_POSTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GUIAS(xml, Atendime.Cd_Atendimento,Reg_Fat.Cd_Reg_Fat,Reg_Fat.Nr_AIH_Posterior);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_NR_AIH(xml, REG_FAT.CD_REG_FAT
             ,REG_FAT.NR_GUIA
             ,REG_FAT.NR_AIH_ANTERIOR
             ,REG_FAT.NR_AIH_POSTERIOR
             ,'P');
END P_I_WVI_RF_NR_AIH_POSTERIOR;
PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_POSTERIOR_E(xml) THEN
        P_I_WVI_RF_NR_AIH_POSTERIOR(xml, ATENDIME, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_POSTERIOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.CD_PRESTADOR_AUDITOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
Declare
    Cursor cAuditor Is Select SN_Auditor_SUS
                         From Prestador
                      Where Cd_Prestador = REG_FAT.CD_PRESTADOR_AUDITOR;
  vSn_Auditor_SUS  PRESTADOR.SN_AUDITOR_SUS%TYPE;
Begin
  -- Retorna a DESCRIÇÃO do Prestador Responsável
  -- Saulo
  If REG_FAT.CD_PRESTADOR_AUDITOR Is Not Null Then
    REG_FAT.NM_PRESTADOR_AUDITOR:= M_PKG_AMDC_PRESTADOR.F_RETORNA_DESCRICAO(xml,REG_FAT.CD_PRESTADOR_AUDITOR
                                                                           ,formParams.P_EMPRESA
                                                                           ,xml.usuario
                                                                           ,TRUE
                                                                           ,TRUE);
  End If;
  If global.OBG_MEDAUT = 'S' Then
      IF REG_FAT.CD_PRESTADOR_AUDITOR IS NOT NULL THEN
      Open cAuditor;
        Fetch cAuditor Into vSn_Auditor_SUS;
      Close cAuditor;
      IF vSn_Auditor_SUS = 'N' THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_102)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_102', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador %s não é auditor SUS. Verifique cadastro de prestadores.', arg_list(REG_FAT.CD_PRESTADOR_AUDITOR)),TRUE);
      END IF;
      -- Valida se o Prestador tem CPF e se é pessoa Física
      Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_CPF_PRESTADOR(xml, REG_FAT.CD_PRESTADOR_AUDITOR);
    ELSE
        REG_FAT.NM_PRESTADOR_AUDITOR := '';
        REG_FAT.DT_AUT_HOMONIMO := '';
    END IF;
    Pkg_ffis_M_LACTO_AIH_P321.P_HABILITA_DT_AUT_HOMONIMO(xml, REG_FAT);
  End If;
End;
END P_I_WVI_RF_CD_PRESTADOR_AUD;
PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  global GlobalsRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.DT_AUT_HOMONIMO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO');
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.DT_AUT_HOMONIMO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO');
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
    global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_CD_PRESTADOR_AUD_E(xml) THEN
        P_I_WVI_RF_CD_PRESTADOR_AUD(xml, REG_FAT, global, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_CD_PRESTADOR_AUD_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO', REG_FAT.DT_AUT_HOMONIMO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO', REG_FAT.DT_AUT_HOMONIMO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.NR_LAUDO_ACH.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
declare
  vNrLaudoAch     varchar2(15);  -- Número do laudo convertido para caracter
  vDvLaudoAch     varchar2(1);   -- dígito verificador do laudo, validado
begin
    if reg_fat.nr_laudo_ach is not null then
    if length(reg_fat.nr_laudo_ach) = 13 then
          -- validação do Número do laudo de acordo com o dígito verificador
          vNrLaudoAch := to_char(reg_fat.nr_laudo_ach);
          vDvLaudoAch := pack_sus.fnc_retorna_dv_laudo_ach( substr(reg_fat.nr_laudo_ach, 1, length(reg_fat.nr_laudo_ach)-1), 1 );
          if vDvLaudoAch is null then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_103)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_103', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Erro na validação do dígito verificador do laudo ACH'),true);
          elsif substr(vNrLaudoAch,-1,1) <> vDvLaudoAch then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_104)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_104', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Número do laudo ACH inválido.'),true);
          end if;
        else
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_105)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_105', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Número do laudo ACH deve conter 13 dígitos.'),true);
      end if;
     end if;
end;
END P_I_WVI_RF_NR_LAUDO_ACH;
PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.NR_LAUDO_ACH:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH');
    REG_FAT.NR_LAUDO_ACH:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_LAUDO_ACH_E(xml) THEN
        P_I_WVI_RF_NR_LAUDO_ACH(xml, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_LAUDO_ACH_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH', REG_FAT.NR_LAUDO_ACH);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH', REG_FAT.NR_LAUDO_ACH);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.PRE-INSERT</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PI_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
declare
   -- Captura o Número da guia para contas de Internação de mutirão
   cursor cSequenceNrGuia is
     select seq_reg_fat_nr_guia.nextval
       from sys.dual;
   nNrGuia number;
   vMens varchar2(500);
begin
  If global.OBG_MEDAUT = 'S' then
    Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_PRESTADOR_AUDITOR(xml, REG_FAT);
  Else
      If global.vObrigaGestor = 'N' then
        REG_FAT.CD_PRESTADOR_AUDITOR := Null;
        REG_FAT.NM_PRESTADOR_AUDITOR := Null;
      End if;
  End if;
   select SEQ_REG_FAT.NEXTVAL
     into REG_FAT.CD_REG_FAT
     from sys.dual;
   REG_FAT.CD_TIP_ACOM := ATENDIME.CD_TIP_ACOM;
   REG_FAT.CD_CON_PLA :=  pkt_config_ffis.retorna_campo('CD_CON_PLA');
   REG_FAT.CD_CONVENIO :=  pkt_config_ffis.retorna_campo('CD_CONVENIO');
   ------------------------------------------------------
   Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_PONTO_PROFISSIONAL(xml, REG_FAT);
   if REG_FAT.DT_EMISSAO_LAUDO is null then
      REG_FAT.DT_EMISSAO_LAUDO := REG_FAT.DT_INICIO;
   end if;
   REG_FAT.NM_USUARIO           := PKG_XML.GetPropVarChar2(xml, 'APPLICATION','USERNAME');
   REG_FAT.CD_REGRA             := global.CD_REGRA;
   CG$CTRL.CD_SETOR_REA_ANT     := Null;
   CG$CTRL.CD_PRESTADOR_REA_ANT := Null;
   -- PDA 155918(início) - Retorna o Número da guia automática para contas de Internação
   --                      cuja remessa seja de mutirão.
   if pack_sus.fnc_retorna_remessa_mutirao( pnCdMultiEmpresa => xml.multiEmpresa
                                                    ,pnCdRemessa      => reg_fat.cd_remessa         ) = 'S' then
       open cSequenceNrGuia;
         fetch cSequenceNrGuia into nNrGuia;
         if cSequenceNrGuia%notfound then
              close cSequenceNrGuia;
              raise no_data_found;
         end if;
       close cSequenceNrGuia;
       reg_fat.nr_guia := to_char(nNrGuia);
   end if;
exception
   when NO_DATA_FOUND then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_106)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_106', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro Interno: Nenhuma linha na tabela SYS.DUAL'),TRUE);
   when others then
     RAISE;
end;
if not Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_REMESSA_OBRIGATORIA(xml, REG_FAT, formParams) then
   raise form_trigger_failure;
end if;
reg_fat.cd_pro_fat_realizado:= 'X0000000';
reg_fat.cd_pro_fat_solicitado:= 'X0000000';
END P_B_PI_REG_FAT;
PROCEDURE P_B_PI_REG_FAT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  atendime ATENDIMERec;
  cg$ctrl CG$CTRLRec;
  global GlobalsRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM');
    ATENDIME.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM');
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM');
    REG_FAT.DT_EMISSAO_LAUDO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO');
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_USUARIO');
    REG_FAT.CD_REGRA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REGRA');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.CD_PRO_FAT_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO');
    REG_FAT.CD_PRO_FAT_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO');
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM');
    REG_FAT.DT_EMISSAO_LAUDO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO');
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_USUARIO');
    REG_FAT.CD_REGRA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REGRA');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.CD_PRO_FAT_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO');
    REG_FAT.CD_PRO_FAT_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO');
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.CD_PRESTADOR_RESPONSAVEL:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
    REG_FAT.CD_MOT_ALT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_MOT_ALT');
    REG_FAT.CD_CON_PLA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_CON_PLA');
    REG_FAT.CD_CONVENIO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_CONVENIO');
    CG$CTRL.CD_SETOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT');
    CG$CTRL.CD_PRESTADOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT');
    CG$CTRL.CD_SETOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT');
    CG$CTRL.CD_PRESTADOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT');
    global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
    global.VOBRIGAGESTOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR');
    global.CD_REGRA:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CD_REGRA');
    global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
    global.VOBRIGAGESTOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR');
    global.CD_REGRA:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CD_REGRA');
    formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_REG_FAT_E(xml) THEN
        P_B_PI_REG_FAT(xml, REG_FAT, ATENDIME, CG$CTRL, global, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_REG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM', ATENDIME.CD_TIP_ACOM);
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM', ATENDIME.CD_TIP_ACOM);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM', REG_FAT.CD_TIP_ACOM);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO', REG_FAT.DT_EMISSAO_LAUDO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_USUARIO', REG_FAT.NM_USUARIO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REGRA', REG_FAT.CD_REGRA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO', REG_FAT.CD_PRO_FAT_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO', REG_FAT.CD_PRO_FAT_SOLICITADO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM', REG_FAT.CD_TIP_ACOM);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_CON_PLA', REG_FAT.CD_CON_PLA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_CONVENIO', REG_FAT.CD_CONVENIO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO', REG_FAT.DT_EMISSAO_LAUDO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_USUARIO', REG_FAT.NM_USUARIO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REGRA', REG_FAT.CD_REGRA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO', REG_FAT.CD_PRO_FAT_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO', REG_FAT.CD_PRO_FAT_SOLICITADO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL', REG_FAT.CD_PRESTADOR_RESPONSAVEL);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL', REG_FAT.NM_PRESTADOR_RESPONSAVEL);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_MOT_ALT', REG_FAT.CD_MOT_ALT);
    PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT', CG$CTRL.CD_SETOR_REA_ANT);
    PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT', CG$CTRL.CD_PRESTADOR_REA_ANT);
    PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT', CG$CTRL.CD_SETOR_REA_ANT);
    PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT', CG$CTRL.CD_PRESTADOR_REA_ANT);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR', global.VOBRIGAGESTOR);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CD_REGRA', global.CD_REGRA);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR', global.VOBRIGAGESTOR);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CD_REGRA', global.CD_REGRA);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>REG_FAT.PRE-UPDATE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PU_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec, FSV_FORM_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
declare
   -- Captura o Número da guia para contas de Internação de mutirão
   cursor cSequenceNrGuia is
     select seq_reg_fat_nr_guia.nextval
       from sys.dual;
   nNrGuia    number;
   eSeqNrGuia exception;
   nEsp       number;
   vMens      varchar2(500);
begin
  If global.OBG_MEDAUT = 'S' then
    Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_PRESTADOR_AUDITOR(xml, REG_FAT);
  Else
      If global.vObrigaGestor = 'N' then
        REG_FAT.CD_PRESTADOR_AUDITOR := Null;
        REG_FAT.NM_PRESTADOR_AUDITOR := Null;
      End if;
  End if;
   ----------------- Validacao Guia ---------------------
    IF FSV_Form_Status = 'QUERY' then
     PRC_FFIS_VALIDA_GUIA (formParams.P_EMPRESA,
                                REG_FAT.CD_ATENDIMENTO,
                                REG_FAT.CD_REG_FAT,
                                REG_FAT.NR_GUIA,
                                REG_FAT.NR_AIH_ANTERIOR,
                                REG_FAT.NR_AIH_POSTERIOR,
                                REG_FAT.NR_IDENTIFICACAO,
                                REG_FAT.CD_SUS_REALIZADO,
                                REG_FAT.CD_ESPEC_SUS,
                                false,
                                vMens);
      if  vMens is not null then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_56)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_56', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s', arg_list(vMens)),TRUE);
      end if;
    end if;
   ------------------------------------------------------------------------------------------------
   -- Valida o lançamento de diária de acompanhante
   Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_DIA_ACOMPANHANTE(xml, REG_FAT.CD_REG_FAT,REG_FAT.NR_DIARIA_ACOMPANHANTE, CG$CTRL, REG_FAT);
   Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_PONTO_PROFISSIONAL(xml, REG_FAT);
   if REG_FAT.DT_EMISSAO_LAUDO is null then
      REG_FAT.DT_EMISSAO_LAUDO := REG_FAT.DT_INICIO;
   end if;
   -- PDA 155918(início) - Retorna o Número da guia automática para contas de Internação
   --                      cuja remessa seja de mutirão.
   if pack_sus.fnc_retorna_remessa_mutirao( pnCdMultiEmpresa => xml.multiEmpresa
                                                    ,pnCdRemessa      => reg_fat.cd_remessa         ) = 'S' and
         reg_fat.nr_guia is null                                                                            then
       open cSequenceNrGuia;
         fetch cSequenceNrGuia into nNrGuia;
         if cSequenceNrGuia%notfound then
              close cSequenceNrGuia;
              raise eSeqNrGuia;
         end if;
       close cSequenceNrGuia;
       reg_fat.nr_guia := to_char(nNrGuia);
   end if;
exception
   when NO_DATA_FOUND then
        Null;
   when eSeqNrGuia then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_106)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_106', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro Interno: Nenhuma linha na tabela SYS.DUAL'),TRUE);
   when others then
     RAISE;
end;
if not Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_REMESSA_OBRIGATORIA(xml, REG_FAT, formParams) then
   raise form_trigger_failure;
end if;
END P_B_PU_REG_FAT;
PROCEDURE P_B_PU_REG_FAT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  cg$ctrl CG$CTRLRec;
  global GlobalsRec;
  formParams FormParamsRec;
  FSV_FORM_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
    REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
    REG_FAT.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO');
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
    REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
    REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
    REG_FAT.NR_IDENTIFICACAO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO');
    REG_FAT.CD_SUS_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_SUS_REALIZADO');
    REG_FAT.CD_ESPEC_SUS:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS');
    REG_FAT.NR_DIARIA_ACOMPANHANTE:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE');
    REG_FAT.DT_EMISSAO_LAUDO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO');
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
    REG_FAT.CD_PRESTADOR_RESPONSAVEL:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL');
    REG_FAT.NM_PRESTADOR_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL');
    REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
    REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
    REG_FAT.CD_MOT_ALT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_MOT_ALT');
    CG$CTRL.GO_ACOMPANHANTE:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE');
    global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
    global.VOBRIGAGESTOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
    FSV_FORM_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_FORM_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PU_REG_FAT_E(xml) THEN
        P_B_PU_REG_FAT(xml, REG_FAT, CG$CTRL, global, formParams, FSV_FORM_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PU_REG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO', REG_FAT.CD_ATENDIMENTO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO', REG_FAT.NR_IDENTIFICACAO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_SUS_REALIZADO', REG_FAT.CD_SUS_REALIZADO);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS', REG_FAT.CD_ESPEC_SUS);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE', REG_FAT.NR_DIARIA_ACOMPANHANTE);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO', REG_FAT.DT_EMISSAO_LAUDO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL', REG_FAT.CD_PRESTADOR_RESPONSAVEL);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL', REG_FAT.NM_PRESTADOR_RESPONSAVEL);
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_MOT_ALT', REG_FAT.CD_MOT_ALT);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE', CG$CTRL.GO_ACOMPANHANTE);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR', global.VOBRIGAGESTOR);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.P_EMPRESA', formParams.P_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA', formParams.SN_REMESSA_OBRIGATORIA);
    PKG_XML.SetVARCHAR2(xml, 'FSV_FORM_STATUS', FSV_FORM_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.QT_LANCAMENTO.MUDOU_SETOR</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_M_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, itreg_fat IN OUT NOCOPY ITREG_FATRec, global IN OUT NOCOPY GlobalsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
declare
  Cursor cSetor Is Select DISTINCT Cd_Setor
                     From ItReg_Fat
                    Where SN_Proced_Realizado = 'S'
                      And Cd_Reg_Fat          = Reg_fat.Cd_Reg_Fat;
   nSetor number;
begin
   -------- Se nao foi digitado Setor Joga o do Procedimento Realizado ---------
   If ItReg_Fat.Cd_Setor Is Null And ItReg_Fat.SN_Proced_Realizado = 'N' Then
     Open cSetor;
       Fetch cSetor Into nSetor;
     Close cSetor;
     if nSetor is not null then
       ITREG_FAT.CD_SETOR          := nSetor;
       ITREG_FAT.CD_SETOR_PRODUZIU := nSetor;
     End If;
   End If;
   ------------------------------------------------------------------------------
   if FSV_BLOCK_STATUS <> 'QUERY' then
      global.vCSetor := 'S';
   end if;
end;
END P_I_M_IF_QT_LANCAMENTO;
PROCEDURE P_I_M_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  reg_fat REG_FATRec;
  itreg_fat ITREG_FATRec;
  global GlobalsRec;
  FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
    ITREG_FAT.CD_SETOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR');
    ITREG_FAT.SN_PROCED_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.SN_PROCED_REALIZADO');
    ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
    global.VCSETOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCSETOR');
    FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_M_IF_QT_LANCAMENTO_E(xml) THEN
        P_I_M_IF_QT_LANCAMENTO(xml, REG_FAT, ITREG_FAT, global, FSV_BLOCK_STATUS);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_M_IF_QT_LANCAMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR', ITREG_FAT.CD_SETOR);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.SN_PROCED_REALIZADO', ITREG_FAT.SN_PROCED_REALIZADO);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
    PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCSETOR', global.VCSETOR);
    PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.QT_LANCAMENTO.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
BEGIN
Declare
    Cursor cRCivil Is Select SN_Registro_Civil
                        From Procedimento_SUS_Detalhe
                       Where Cd_Procedimento = ItReg_Fat.Cd_Procedimento;
  vSN_Reg_Civil Varchar2(1);
Begin
  Open cRCivil;
    Fetch cRCivil Into vSN_Reg_Civil;
  Close cRCivil;
  IF vSN_Reg_Civil = 'S' AND ITREG_FAT.QT_LANCAMENTO > 1 THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_107)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_107', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: A quantidade será atualizada após preenchimentos dos dados do Registro Civil.'),true);
  END IF;
End;
END P_I_WVI_IF_QT_LANCAMENTO;
PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itreg_fat ITREG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    ITREG_FAT.QT_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO');
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    ITREG_FAT.QT_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_QT_LANCAMENTO_E(xml) THEN
        P_I_WVI_IF_QT_LANCAMENTO(xml, ITREG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_QT_LANCAMENTO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO', ITREG_FAT.QT_LANCAMENTO);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO', ITREG_FAT.QT_LANCAMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.CD_SETOR.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_IF_CD_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
ITREG_FAT.DSP_NM_SETOR:= M_PKG_GLOBAL_SETOR.F_RETORNA_DESCRICAO(xml,ITREG_FAT.CD_SETOR
                                                                  ,formParams.P_EMPRESA
                                                                  ,xml.usuario
                                                                  ,TRUE
                                                                  ,TRUE);
  Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_SETOR(xml, formParams.P_EMPRESA,ITREG_FAT.CD_SETOR);
  ITREG_FAT.CD_SETOR_PRODUZIU := ITREG_FAT.CD_SETOR;
  ITREG_FAT.TP_MVTO           := 'FATURAMENTO';
END P_I_WVI_IF_CD_SETOR;
PROCEDURE P_I_WVI_IF_CD_SETOR (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itreg_fat ITREG_FATRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ITREG_FAT.DSP_NM_SETOR:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR');
    ITREG_FAT.CD_SETOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR');
    ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
    ITREG_FAT.TP_MVTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO');
    ITREG_FAT.DSP_NM_SETOR:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR');
    ITREG_FAT.CD_SETOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR');
    ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
    ITREG_FAT.TP_MVTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_E(xml) THEN
        P_I_WVI_IF_CD_SETOR(xml, ITREG_FAT, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR', ITREG_FAT.DSP_NM_SETOR);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR', ITREG_FAT.CD_SETOR);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO', ITREG_FAT.TP_MVTO);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR', ITREG_FAT.DSP_NM_SETOR);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR', ITREG_FAT.CD_SETOR);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO', ITREG_FAT.TP_MVTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.CD_SETOR_PRODUZIU.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
ITREG_FAT.DS_SETOR_PRODUZIU:= M_PKG_GLOBAL_SETOR.F_RETORNA_DESCRICAO(xml,ITREG_FAT.CD_SETOR_PRODUZIU
                                                                       ,formParams.P_EMPRESA
                                                                       ,xml.usuario
                                                                       ,TRUE
                                                                       ,TRUE);
  Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_SETOR(xml, formParams.P_EMPRESA,ITREG_FAT.CD_SETOR_PRODUZIU);
END P_I_WVI_IF_CD_SETOR_PRODUZIU;
PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itreg_fat ITREG_FATRec;
  formParams FormParamsRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ITREG_FAT.DS_SETOR_PRODUZIU:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU');
    ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
    ITREG_FAT.DS_SETOR_PRODUZIU:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU');
    ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_PRODUZIU_E(xml) THEN
        P_I_WVI_IF_CD_SETOR_PRODUZIU(xml, ITREG_FAT, formParams);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_PRODUZIU_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU', ITREG_FAT.DS_SETOR_PRODUZIU);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU', ITREG_FAT.DS_SETOR_PRODUZIU);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITREG_FAT.PRE-DELETE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PD_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
BEGIN
   DELETE FROM ITLAN_MED
         WHERE CD_REG_FAT    = ITREG_FAT.CD_REG_FAT
           and CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
   DELETE FROM ITCOB_PRE
         WHERE CD_REG_FAT    = ITREG_FAT.CD_REG_FAT
           and CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
   --------------- Se Excluir Item Pre-Natal, Remove Nr.Ficha -------------------
   if ITREG_FAT.CD_PROCEDIMENTO = '0801010039' then
      REG_FAT.NR_PRE_NATAL := Null;
   end if;
   ------------------------------------------------------------------------------
END;--
-- Begin default relation program section
--
BEGIN
  --
  -- Begin REGISTRO_CIVIL detail program section
  --
   DELETE FROM REGISTRO_CIVIL D
   WHERE D.CD_REG_FAT = ITREG_FAT.CD_REG_FAT and D.CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
  --
  -- End REGISTRO_CIVIL detail program section
  --
  --
  -- Begin SUS_UTI detail program section
  --
   DELETE FROM diaria_uti_sus d
   WHERE d.CD_REG_FAT = ITREG_FAT.CD_REG_FAT and d.CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
  --
  -- End SUS_UTI detail program section
  --
  --
  -- Begin DIARIA_UTI_SUS detail program section
  --
   DELETE FROM Diaria_UTI_SUS D
   WHERE D.CD_REG_FAT = ITREG_FAT.CD_REG_FAT and D.CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
  --
  -- End DIARIA_UTI_SUS detail program section
  --
END;
END P_B_PD_ITREG_FAT;
PROCEDURE P_B_PD_ITREG_FAT (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itreg_fat ITREG_FATRec;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.NR_PRE_NATAL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_PRE_NATAL');
    ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
    ITREG_FAT.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO');
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PD_ITREG_FAT_E(xml) THEN
        P_B_PD_ITREG_FAT(xml, ITREG_FAT, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PD_ITREG_FAT_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_PRE_NATAL', REG_FAT.NR_PRE_NATAL);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO', ITREG_FAT.CD_LANCAMENTO);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>ITCOB_PRE.VL_PRECO_UNITARIO.KEY-NEXT-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, itcob_pre IN OUT NOCOPY ITCOB_PRERec, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Begin
  -- Retorna o valor unitário da protese.
  -- PDA 533434 Inicio
  /* ITCOB_PRE.VL_PRECO_UNITARIO:= PACK_SUS.FNC_SUS_MAX_VALOR_SH(ITREG_FAT.CD_PROCEDIMENTO
                                                                     ,NVL(REG_FAT.DSP_DT_COMPETENCIA
                                                                         ,REG_FAT.DT_INICIO)); */
  ITCOB_PRE.VL_PRECO_UNITARIO:= DBAMV.PKG_FFIS_CALC_AIH.FNC_SUS_MAX_VALOR_SH(ITREG_FAT.CD_PROCEDIMENTO
                                                                     ,NVL(REG_FAT.DSP_DT_COMPETENCIA
                                                                     ,REG_FAT.DT_INICIO));
  -- PDA 533434 Fim
/* Retirada da validação PDA 462264
  If Nvl(ITCOB_PRE.VL_PRECO_UNITARIO,0) = 0 Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                  ,'Erro: Protese não possui valor.',TRUE);
  End If;
*/
  ITCOB_PRE.VL_PRECO_TOTAL := ITCOB_PRE.VL_PRECO_UNITARIO * NVL(ITREG_FAT.QT_LANCAMENTO, 1);
End;
END P_I_KNI_IP_VL_PRECO_UNITARIO;
PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  itcob_pre ITCOB_PRERec;
  itreg_fat ITREG_FATRec;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.DSP_DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA');
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    ITCOB_PRE.VL_PRECO_UNITARIO:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_UNITARIO');
    ITCOB_PRE.VL_PRECO_TOTAL:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_TOTAL');
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    ITREG_FAT.QT_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_KNI_IP_VL_PRECO_UNITARIO_E(xml) THEN
        P_I_KNI_IP_VL_PRECO_UNITARIO(xml, ITCOB_PRE, ITREG_FAT, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_KNI_IP_VL_PRECO_UNITARIO_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA', REG_FAT.DSP_DT_COMPETENCIA);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_UNITARIO', ITCOB_PRE.VL_PRECO_UNITARIO);
    PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_TOTAL', ITCOB_PRE.VL_PRECO_TOTAL);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO', ITREG_FAT.QT_LANCAMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>RESPONSA.DS_NACIONALIDADE.WHEN-VALIDATE-ITEM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, responsa IN OUT NOCOPY RESPONSARec) IS
BEGIN
Declare
    nAchou Number;
Begin
      Select COUNT(*)
        Into nAchou
        From CIDADANIAS
       Where DS_CIDADANIA = RESPONSA.DS_NACIONALIDADE;
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_108)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_108', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidadania não cadastrada.'),TRUE);
  End If;
End;
END P_I_WVI_R_DS_NACIONALIDADE;
PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  responsa RESPONSARec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    RESPONSA.DS_NACIONALIDADE:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DS_NACIONALIDADE');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_R_DS_NACIONALIDADE_E(xml) THEN
        P_I_WVI_R_DS_NACIONALIDADE(xml, RESPONSA);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_R_DS_NACIONALIDADE_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DS_NACIONALIDADE', RESPONSA.DS_NACIONALIDADE);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>RESPONSA.WHEN-NEW-BLOCK-INSTANCE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_WNBI_RESPONSA (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, responsa IN OUT NOCOPY RESPONSARec) IS
BEGIN
Declare
    Cursor cResponsa Is select paci.DS_ENDERECO,
                             paci.DS_COMPLEMENTO,
                             paci.NR_ENDERECO,
                             paci.NM_BAIRRO,
                             paci.CD_CIDADE,
                             cida.NM_CIDADE,
                             cida.CD_UF
                        from PACIENTE paci,
                             CIDADE cida
                       where paci.CD_CIDADE   = cida.CD_CIDADE
                         and paci.CD_PACIENTE = ATENDIME.CD_PACIENTE;
begin
   if RESPONSA.NM_RESPONSAVEL is Null then
     Open cResponsa;
       Fetch cResponsa into RESPONSA.DS_ENDERECO,
                            RESPONSA.DS_COMPLEMENTO,
                            RESPONSA.NR_ENDERECO,
                            RESPONSA.NM_BAIRRO,
                            RESPONSA.CD_CIDADE,
                            RESPONSA.DSP_NM_CIDADE,
                            RESPONSA.DSP_CD_UF;
     Close cResponsa;
   end if;
end;
END P_B_WNBI_RESPONSA;
PROCEDURE P_B_WNBI_RESPONSA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  atendime ATENDIMERec;
  responsa RESPONSARec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ATENDIME.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PACIENTE');
    RESPONSA.NM_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.NM_RESPONSAVEL');
    RESPONSA.DS_ENDERECO:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DS_ENDERECO');
    RESPONSA.DS_COMPLEMENTO:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DS_COMPLEMENTO');
    RESPONSA.NR_ENDERECO:= PKG_XML.GetNUMBER(xml, 'RESPONSA.NR_ENDERECO');
    RESPONSA.NM_BAIRRO:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.NM_BAIRRO');
    RESPONSA.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'RESPONSA.CD_CIDADE');
    RESPONSA.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DSP_NM_CIDADE');
    RESPONSA.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DSP_CD_UF');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_WNBI_RESPONSA_E(xml) THEN
        P_B_WNBI_RESPONSA(xml, ATENDIME, RESPONSA);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_WNBI_RESPONSA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PACIENTE', ATENDIME.CD_PACIENTE);
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.NM_RESPONSAVEL', RESPONSA.NM_RESPONSAVEL);
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DS_ENDERECO', RESPONSA.DS_ENDERECO);
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DS_COMPLEMENTO', RESPONSA.DS_COMPLEMENTO);
    PKG_XML.SetNUMBER(xml, 'RESPONSA.NR_ENDERECO', RESPONSA.NR_ENDERECO);
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.NM_BAIRRO', RESPONSA.NM_BAIRRO);
    PKG_XML.SetNUMBER(xml, 'RESPONSA.CD_CIDADE', RESPONSA.CD_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DSP_NM_CIDADE', RESPONSA.DSP_NM_CIDADE);
    PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DSP_CD_UF', RESPONSA.DSP_CD_UF);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DIARIA_UTI_SUS.DT_COMPETENCIA.POST-CHANGE</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Declare
    nAchou Number;
Begin
  If Trunc(Diaria_UTI_SUS.Dt_Competencia,'MM')
      Not BetWeen Trunc(Reg_Fat.Dt_Inicio,'MM')
      And Trunc(Nvl(Nvl(Reg_Fat.Dt_Final,Last_Day(Reg_Fat.Dsp_Dt_Competencia)),Sysdate),'MM') Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_109)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_109', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Competência informada de UTI não compreende o período da conta.'),true);
  End If;
  Select Count(*)
    Into nAchou
    From Diaria_UTI_SUS d
   Where d.Cd_Reg_Fat                 = Diaria_UTI_SUS.Cd_Reg_Fat
     And d.Cd_Lancamento              = Diaria_UTI_SUS.Cd_Lancamento
     And Trunc(d.Dt_Competencia,'MM') = Trunc(Diaria_UTI_SUS.Dt_Competencia,'MM');
  If nAchou > 1 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_110)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_110', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s Competência já informada, verifique.', arg_list(nAchou)),true);
  End If;
End;
END P_I_PC_DUS_DT_COMPETENCIA;
PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  diaria_uti_sus DIARIA_UTI_SUSRec;
  reg_fat REG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
    REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
    REG_FAT.DSP_DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA');
    DIARIA_UTI_SUS.DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'DIARIA_UTI_SUS.DT_COMPETENCIA');
    DIARIA_UTI_SUS.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'DIARIA_UTI_SUS.CD_REG_FAT');
    DIARIA_UTI_SUS.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'DIARIA_UTI_SUS.CD_LANCAMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_DUS_DT_COMPETENCIA_E(xml) THEN
        P_I_PC_DUS_DT_COMPETENCIA(xml, DIARIA_UTI_SUS, REG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_DUS_DT_COMPETENCIA_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
    PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
    PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA', REG_FAT.DSP_DT_COMPETENCIA);
    PKG_XML.SetDATE(xml, 'DIARIA_UTI_SUS.DT_COMPETENCIA', DIARIA_UTI_SUS.DT_COMPETENCIA);
    PKG_XML.SetNUMBER(xml, 'DIARIA_UTI_SUS.CD_REG_FAT', DIARIA_UTI_SUS.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'DIARIA_UTI_SUS.CD_LANCAMENTO', DIARIA_UTI_SUS.CD_LANCAMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>DIARIA_UTI_SUS.POST-QUERY</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_B_PQ_DIARIA_UTI_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
BEGIN
Begin
  Select Sum(Qt_Lancada)
    Into Diaria_UTI_SUS.Dsp_Qt_Total_UTI
    From Diaria_UTI_SUS
   Where Cd_Reg_Fat = ItReg_Fat.Cd_Reg_Fat
     And Cd_Lancamento = ItReg_Fat.Cd_Lancamento;
  Diaria_UTI_SUS.Dsp_Ds_Procedimento:= ItReg_Fat.Ds_Procedimento;
  Diaria_UTI_SUS.Dsp_Cd_Procedimento:= ItReg_Fat.Cd_Procedimento;
Exception
    When No_Data_Found Then
      Null;
End;
END P_B_PQ_DIARIA_UTI_SUS;
PROCEDURE P_B_PQ_DIARIA_UTI_SUS (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
  diaria_uti_sus DIARIA_UTI_SUSRec;
  itreg_fat ITREG_FATRec;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
    ITREG_FAT.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO');
    ITREG_FAT.DS_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DS_PROCEDIMENTO');
    ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
    DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI:= PKG_XML.GetNUMBER(xml, 'DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI');
    DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO');
    DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO');
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_DIARIA_UTI_SUS_E(xml) THEN
        P_B_PQ_DIARIA_UTI_SUS(xml, DIARIA_UTI_SUS, ITREG_FAT);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_DIARIA_UTI_SUS_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
    PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO', ITREG_FAT.CD_LANCAMENTO);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DS_PROCEDIMENTO', ITREG_FAT.DS_PROCEDIMENTO);
    PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
    PKG_XML.SetNUMBER(xml, 'DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI', DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI);
    PKG_XML.SetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO', DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO);
    PKG_XML.SetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO', DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO);
    out_params := PKG_XML.GetOutputClob(xml);
END;
  /*
  <DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
  <CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
  <OBJETIVO>PRE-FORM</OBJETIVO>
  <ALTERACOES></ALTERACOES>
  */
  PROCEDURE P_F_PF (xml IN OUT NOCOPY PKG_XML.XmlContext) IS
BEGIN
declare
              Cursor cChecaVersao is
            select valor
          from configuracao
         where cd_sistema = 'FFIS'
           and chave = 'V_LACTO'
           and cd_multi_empresa = xml.multiEmpresa;
   SEM_VERSAO          exception;
     VERSAO_INCOMPATIVEL exception;
     vVersao             varchar2(20);
     vControle           varchar2(20);
   begin
     ---------------------------------------------------------------------------------
   -->> Toda versão deve ser alterada aqui o Código da tela
   ----------------------------------------------------------------------------------
     Open cChecaVersao;
    Fetch cChecaVersao into vVersao;
    Close cChecaVersao;
    vControle := fnc_versao_sus('V 2.70.0_1908090942');
   if  vVersao is null then
           raise SEM_VERSAO;
   end if;
   if vVersao <> vControle then
        raise VERSAO_INCOMPATIVEL;
   end if;
   --====================================================================================
   exception
    when SEM_VERSAO then
          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
          PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_111)
                        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_111', 'PKG_FFIS_M_LACTO_AIH_P321', 'A versão do módulo SUS não é compatível, solicitar atualização do PACOTE SUS com imagem desta mensagem. Email: marcius.melo@mv.com.br .'),true);
   when VERSAO_INCOMPATIVEL then
          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
          PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_111)
                        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_111', 'PKG_FFIS_M_LACTO_AIH_P321', 'A versão do módulo SUS não é compatível, solicitar atualização do PACOTE SUS com imagem desta mensagem. Email: marcius.melo@mv.com.br .'),true);
   when others then
          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
          PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_111)
                        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_111', 'PKG_FFIS_M_LACTO_AIH_P321', 'A versão do módulo SUS não é compatível, solicitar atualização do PACOTE SUS com imagem desta mensagem. Email: marcius.melo@mv.com.br .'),true);
end;
END P_F_PF;
PROCEDURE P_F_PF (in_params in Clob, out_params out Clob) IS
  xml PKG_XML.XmlContext;
BEGIN
    xml := PKG_XML.Init(in_params);
    -- extract input parameters from the XML
    BEGIN
      IF Pkg_ffis_M_LACTO_AIH_P321_C.P_F_PF_E(xml) THEN
        P_F_PF(xml);
        Pkg_ffis_M_LACTO_AIH_P321_C.P_F_PF_S(xml);
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      PKG_XML.AddException(xml, SQLCODE, SQLERRM);
    END;
    -- save output parameters to the XML
    out_params := PKG_XML.GetOutputClob(xml);
END;
END PKG_FFIS_M_LACTO_AIH_P321;
/

CREATE OR REPLACE PUBLIC SYNONYM PKG_FFIS_M_LACTO_AIH_P321 FOR DBAMV.PKG_FFIS_M_LACTO_AIH_P321
/
--<DS_SCRIPT>
-- DESCRIÇÃO..: FATURSUS-1254  alteracao do tipo do campo CPF
-- RESPONSAVEL: Alexandre Neri
-- DATA.......: 19/12/2018
-- VERSÃO PACOTE: 2018.003.06.FTR
-- APLICAÇÃO..: FFIS
--</DS_SCRIPT>
--<USUARIO=DBAMV>


CREATE OR REPLACE
PACKAGE DBAMV.pkg_ffis_m_lacto_aih_p321 AS
-- Exceptions
FORM_TRIGGER_FAILURE EXCEPTION;
PRAGMA EXCEPTION_INIT(FORM_TRIGGER_FAILURE, -40000);
-- Declarations of extracted code units
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>P_FACHADA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_FACHADA(in_params in Clob, out_params out Clob);
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PK_ITREG_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_PK_ITREG_FAT (in_params in Clob, out_params out Clob) RETURN number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_TIPO_PAGTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_TIPO_PAGTO (in_params in Clob, out_params out Clob) RETURN varchar2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_PERM_MAIOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_PERM_MAIOR (in_params in Clob, out_params out Clob) RETURN number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PRIMEIRA_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PRIMEIRA_CONTA (in_params in Clob, out_params out Clob) RETURN number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_CALC_DIAS_PROCEDIMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_CALC_DIAS_PROCEDIMENTO (in_params in Clob, out_params out Clob) RETURN number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_ATEND_QTD_FECHADAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_ATEND_QTD_FECHADAS (in_params in Clob, out_params out Clob) RETURN NUMBER;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_PEND_SADT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_PEND_SADT (in_params in Clob, out_params out Clob) RETURN boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PROCURA_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_PROCURA_PARTO (in_params in Clob, out_params out Clob) RETURN boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_REMESSA_OBRIGATORIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (in_params in Clob, out_params out Clob) RETURN boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>valida_periodo_conta</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VALIDA_PERIODO_CONTA (in_params in Clob, out_params out Clob) RETURN boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_CNS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VALIDA_CNS (in_params in Clob, out_params out Clob) RETURN Boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_CNS_PROV</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VALIDA_CNS_PROV (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VERIFICA_QTD_ABERTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VERIFICA_QTD_ABERTA (in_params in Clob, out_params out Clob) RETURN NUMBER;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_GRU_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_GRU_FAT (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_PRC_DIARIA_ACOMPANHANTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>OBRIGA_CBO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_OBRIGA_CBO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_INTERCORRENCIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_INTERCORRENCIA (in_params in Clob, out_params out Clob) RETURN Boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_LANCA_APURAR_VALOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_LANCA_APURAR_VALOR (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_DIAS_DIFERENCA_UNIFICACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_RETORNA_DETAL_GESTOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_RETORNA_DETAL_GESTOR (in_params in Clob, out_params out Clob) RETURN Varchar2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_UTI (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_CLINICO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_CLINICO (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_INTERNACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_INTERNACAO (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_DEFINE_ATI_MED_ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_ATI_MED_ITEM (in_params in Clob, out_params out Clob) RETURN Varchar2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_ITEM_CENTRO_CIRURGICO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_ITEM_CENTRO_CIRURGICO (in_params in Clob, out_params out Clob) RETURN Boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_CONTA_CIR_MULTIPLA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_CONTA_CIR_MULTIPLA (in_params in Clob, out_params out Clob) RETURN Boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PROC_PACOTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PROC_PACOTE (in_params in Clob, out_params out Clob) RETURN Varchar2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_UTI (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_OPM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_OPM (in_params in Clob, out_params out Clob) RETURN Boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_ABRE_EQUIPE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_ABRE_EQUIPE (in_params in Clob, out_params out Clob) RETURN Boolean;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_PROC_CIRURGICO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_PROC_CIRURGICO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_DEFINE_VINCULO_CREDITO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_VINCULO_CREDITO (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_LAQUEADURA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_LAQUEADURA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_TOTAL_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_TOTAL_UTI (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_TP_COMPLEXIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_TP_COMPLEXIDADE (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_RET_INCREMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_RET_INCREMENTO (in_params in Clob, out_params out Clob) RETURN NUMBER;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_RET_TIPO_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_RET_TIPO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_ULTIMA_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_ULTIMA_CONTA (in_params in Clob, out_params out Clob) RETURN number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_IDADE_PACIENTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_IDADE_PACIENTE (in_params in Clob, out_params out Clob) RETURN NUMBER;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_PARTO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PROC_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PROC_REALIZADO (in_params in Clob, out_params out Clob) RETURN VARCHAR2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PROC_DIARIA_IDOSO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PROC_DIARIA_IDOSO (in_params in Clob, out_params out Clob) RETURN Varchar2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_SETOR_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_SETOR_REALIZADO (in_params in Clob, out_params out Clob) RETURN Number;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PRESTADOR_AIH</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PRESTADOR_AIH (in_params in Clob, out_params out Clob) RETURN NUMBER;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_AIH_5</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_AIH_5 (in_params in Clob, out_params out Clob) RETURN NUMBER;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DT_INTERNACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DT_INTERNACAO (in_params in Clob, out_params out Clob) RETURN DATE;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_FECHADA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_FECHADA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_CBO_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_CBO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN Varchar2;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_PAGO_POR_DIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_PAGO_POR_DIA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
   FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_AIH_CONTINUACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_AIH_CONTINUACAO (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_COMPET_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_COMPET_CONTA (in_params in Clob, out_params out Clob) RETURN DATE;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_TEM_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_TEM_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_ATUALIZA_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_ATUALIZA_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_NR_AIH</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_NR_AIH (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>HABILITA_DADOS_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_HABILITA_DADOS_PARTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_DIA_ACOMPANHANTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_PONTO_PROFISSIONAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Define_Prestador_Auto</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_PRESTADOR_AUTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CONTA_CLOSED</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CONTA_CLOSED (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DADOS_PARTO_DEFAULT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DADOS_PARTO_DEFAULT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Check_contas_remessa</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHECK_CONTAS_REMESSA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_PRESTADOR_AUDITOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>STATUS_LOCK</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_STATUS_LOCK (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_ATIVIDADE_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CRIA_NOVA_REG_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CRIA_NOVA_REG_FAT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CPF_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CPF_PRESTADOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>HABILITA_DT_AUT_HOMONIMO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_DT_AUT_HOMONIMO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_GLOSA_TOTAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_GLOSA_TOTAL (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>prc_habilita_desabilita_guia</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_HABILITA_DESABILITA_GUIA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Insere_ITREG_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_INSERE_ITREG_FAT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>MONTAR_EQUIPE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_MONTAR_EQUIPE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>chk_lcto_uti</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHK_LCTO_UTI (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_MODALIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_MODALIDADE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
--	PROCEDURE P_VALIDA_ESPEC_SUS_REG_FAT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PROCEDIMENTO_HOSPITAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CHK_ATI_MED_06</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHK_ATI_MED_06 (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_PACOTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_PACOTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_CORRIGE_LCTO_CBO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_CORRIGE_LCTO_CBO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Prc_Lanca_CBO_Prestador</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_LANCA_CBO_PRESTADOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CHK_DIAS_PERIODO_VS_LACTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_NR_GUIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_NR_GUIA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_REG_CIVIL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_REG_CIVIL (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_DADOS_LAQVASEC</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_DADOS_LAQVASEC (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_GRUPO_PROC_PADRAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_LANCAMENTO_PAI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_LANCAMENTO_PAI (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_DIARIA_ACOMPANHANTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_CEP_PACIENTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_CEP_PACIENTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PREST_ATENDIMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PREST_ATENDIMENTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_FORNECEDOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_FORNECEDOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CID_SEXO_PACIENTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_MODALIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_MODALIDADE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_ESPEC_SUS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CHECA_CPF_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHECA_CPF_PRESTADOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PREST_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PREST_CONTA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_INSERE_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_INSERE_REALIZADO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CONTA_ANTERIOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CONTA_ANTERIOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_DATA_INICIO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_DATA_INICIO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_EXCLUI_DIARIAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_EXCLUI_DIARIAS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_ESPEC_SUS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_GUIAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_GUIAS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_SOL_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_SOL_REALIZADO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_CID_PADRAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_CID_PADRAO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_REMESSA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_REMESSA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_CID_SECUNDARIO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_CID_SECUNDARIO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_EXIGENCIA_CID_PRINCIPAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_EQP_MEDICA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_EQP_MEDICA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_ABERTURA_TELAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_ABERTURA_TELAS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_PRESTADORES_ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_PRESTADORES_ITEM (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_INSERE_DADOS_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_INSERE_DADOS_PARTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_COD_REDUZIDO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_COD_REDUZIDO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_QUANTIDADE_OPM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_QUANTIDADE_OPM (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_SETOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_SETOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PRESTADOR_CIRURGIAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_ATI_MED_REPETIDO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_ATI_MED_REPETIDO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PRESTADOR_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PRESTADOR_SUS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PRESTADOR_CBO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PRESTADOR_CBO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_CBO_AUXILIARES</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_CBO_AUXILIARES (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_TIPO_PAGAMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_TIPO_PAGAMENTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_REMESSA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_REMESSA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CNPJ</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CNPJ (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>P_COMMIT_FORM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_P_COMMIT_FORM (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_REGISTRO_CIVIL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_REGISTRO_CIVIL (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_CIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_CIDADE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_CIDADE2</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_CIDADE2 (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_CORRIGE_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_CORRIGE_UTI (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_ATUALIZA_ITEM_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_ATUALIZA_ITEM_UTI (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_LEITO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_LEITO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_MOT_ALT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_MOT_ALT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_SN_INFECCAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_SN_INFECCAO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_LANCA_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_LANCA_ESPEC_SUS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_EMPRESA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_EMPRESA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CID_OBITO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CID_OBITO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Montar_Diaria_Acompanhante</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_ATUALIZA_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_ATUALIZA_DA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_DELETE_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_DELETE_DA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.DSP_DS_CIDADANIA.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.DSP_DS_GRAU_INS.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.NR_CEP.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_NR_CEP (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.DSP_NR_CPF.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_DSP_NR_CPF (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.NR_CNS.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_P_NR_CNS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.POST-QUERY</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PQ_PACIENTE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.DT_ATENDIMENTO.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_A_DT_ATENDIMENTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.CD_PRESTADOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_A_CD_PRESTADOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.CD_LEITO.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_A_CD_LEITO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.PRE-INSERT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PI_ATENDIME (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.ON-CHECK-DELETE-MASTER</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_OCDM_ATENDIME (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_GUIA.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_GUIA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_SEQAIH5.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_AIH_ANTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_AIH_POSTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.CD_PRESTADOR_AUDITOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_LAUDO_ACH.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.PRE-INSERT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PI_REG_FAT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.PRE-UPDATE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PU_REG_FAT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.QT_LANCAMENTO.MUDOU_SETOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_M_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.QT_LANCAMENTO.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.CD_SETOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_IF_CD_SETOR (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.CD_SETOR_PRODUZIU.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.PRE-DELETE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PD_ITREG_FAT (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITCOB_PRE.VL_PRECO_UNITARIO.KEY-NEXT-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>RESPONSA.DS_NACIONALIDADE.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>RESPONSA.WHEN-NEW-BLOCK-INSTANCE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_WNBI_RESPONSA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DIARIA_UTI_SUS.DT_COMPETENCIA.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DIARIA_UTI_SUS.POST-QUERY</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PQ_DIARIA_UTI_SUS (in_params in Clob, out_params out Clob);
		/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRE-FORM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_F_PF (in_params in Clob, out_params out Clob);
END Pkg_ffis_M_LACTO_AIH_P321;
/

GRANT EXECUTE ON DBAMV.Pkg_ffis_M_LACTO_AIH_P321 TO mv2000
/

CREATE OR REPLACE
PACKAGE BODY DBAMV.pkg_ffis_m_lacto_aih_p321 AS
-- Struct definitions for passing state from appliction level to the code units
-- defined in this package
	-- Record to be used as parameter of procedures and functions that access application block ITREG_FAT's items
	TYPE ITREG_FATRec IS RECORD (
		CD_PROCEDIMENTO	VARCHAR2(2000),
		CD_REG_FAT	NUMBER,
		CD_LANCAMENTO	NUMBER,
		DS_SETOR_PRODUZIU	VARCHAR2(2000),
		TP_MVTO	VARCHAR2(2000),
		QT_LANCAMENTO	NUMBER,
		CD_SETOR	NUMBER,
		DSP_NM_SETOR	VARCHAR2(2000),
		CD_SETOR_PRODUZIU	NUMBER,
		CD_PRESTADOR	NUMBER,
		CD_CBO_PRESTADOR	VARCHAR2(2000),
		CD_TIPO_VINCULO	NUMBER,
		SN_PROCED_REALIZADO	VARCHAR2(2000),
		DS_PROCEDIMENTO	VARCHAR2(2000)
	);
	-- Record to be used as parameter of procedures and functions that access application block DIARIA_UTI_SUS's items
	TYPE DIARIA_UTI_SUSRec IS RECORD (
		CD_REG_FAT	NUMBER,
		CD_LANCAMENTO	NUMBER,
		DT_COMPETENCIA	DATE,
		DSP_QT_TOTAL_UTI	NUMBER,
		DSP_CD_PROCEDIMENTO	VARCHAR2(2000),
		DSP_DS_PROCEDIMENTO	VARCHAR2(2000)
	);
	-- Record to be used as parameter of procedures and functions that access application block ITCOB_PRE's items
	TYPE ITCOB_PRERec IS RECORD (
		NR_CNPJ_FABRICANTE	NUMBER,
		VL_PRECO_UNITARIO	NUMBER,
		VL_PRECO_TOTAL	NUMBER,
		SN_COBRANCA_FORNEC	VARCHAR2(2000),
		NR_CGC_CPF	NUMBER,
		SN_CESSAO_CREDITO	VARCHAR2(2000),
		SN_FORNECE_OPM	VARCHAR2(2000)
	);
	-- Record to be used as parameter of procedures and functions that access application block REG_FAT's items
	TYPE REG_FATRec IS RECORD (
		NR_GUIA	VARCHAR2(2000),
		CD_ATENDIMENTO	NUMBER,
		DT_ATENDIMENTO	DATE,
		DT_ALTA	DATE,
		NR_IDENTIFICACAO	VARCHAR2(2000),
		NR_SEQAIH5	NUMBER,
		CD_REMESSA	NUMBER,
		DSP_REMESSA_SN_FECHADA	VARCHAR2(2000),
		DSP_REM_SN_VALIDA_DATA_ALTA	VARCHAR2(2000),
		DT_INICIO	DATE,
		DT_FINAL	DATE,
		CD_PROCEDIMENTO_SOLICITADO	VARCHAR2(2000),
		CD_PRO_FAT_SOLICITADO	VARCHAR2(2000),
		CD_ESPEC_SUS	VARCHAR2(2000),
		CD_MOT_ALT	NUMBER,
		DT_EMISSAO_LAUDO	DATE,
		DT_AUT_HOMONIMO	DATE,
		NR_AIH_ANTERIOR	VARCHAR2(2000),
		NR_AIH_POSTERIOR	VARCHAR2(2000),
		SN_FECHADA	VARCHAR2(2000),
		CD_SUS_REALIZADO	VARCHAR2(2000),
		CD_PROCEDIMENTO_REALIZADO	VARCHAR2(2000),
		CD_PROCEDIMENTO_REALIZADO_OLD	VARCHAR2(2000),
		DS_PROCEDIMENTO_REALIZADO VARCHAR2(2000),
		CD_PRESTADOR_RESPONSAVEL	NUMBER,
		NM_PRESTADOR_RESPONSAVEL	VARCHAR2(2000),
		CD_PRESTADOR_AUDITOR	NUMBER,
		NM_PRESTADOR_AUDITOR	VARCHAR2(2000),
		CD_TIP_ACOM	NUMBER,
		CD_PRO_FAT_REALIZADO	VARCHAR2(2000),
		CD_CID_PRINCIPAL	VARCHAR2(2000),
		DSP_DS_CID_PRINCIPAL	VARCHAR2(2000),
		TP_MODALIDADE_ATENDIMENTO	VARCHAR2(2000),
		CD_REGRA	NUMBER,
		NM_USUARIO	VARCHAR2(2000),
		NR_DIARIA_ACOMPANHANTE	NUMBER,
		DSP_TIPO_COMPLEXIDADE	VARCHAR2(2000),
		CD_GESTOR_AUTORIZOU	VARCHAR2(2000),
		NR_CPF_GESTOR	NUMBER,
		NR_PRE_NATAL	VARCHAR2(2000),
		DSP_DT_ABERTURA	DATE,
		CD_REG_FAT	NUMBER,
		DSP_DS_REMESSA	VARCHAR2(2000),
		DSP_DT_COMPETENCIA	DATE,
		NR_LAUDO_ACH	NUMBER,
		CD_CONVENIO NUMBER,
		CD_CON_PLA NUMBER
	);
	-- Record to be used as parameter of procedures and functions that access application block ATENDIME's items
	TYPE ATENDIMERec IS RECORD (
		CD_ATENDIMENTO	NUMBER,
		CD_PACIENTE	NUMBER,
		CD_MULTI_EMPRESA	NUMBER,
		DT_ATENDIMENTO	DATE,
		TP_MOT_ALTA	VARCHAR2(2000),
		CD_PRESTADOR	NUMBER,
		SN_INFECCAO	VARCHAR2(2000),
		CD_LEITO	NUMBER,
		DSP_DS_LEITO	VARCHAR2(2000),
		CD_TIP_ACOM	NUMBER,
		DSP_DS_TIP_ACOM	VARCHAR2(2000),
		CD_UNID_INT	NUMBER,
		DSP_DS_ENFERMARIA	VARCHAR2(2000),
		CD_CID	VARCHAR2(2000),
		CD_ORI_ATE	NUMBER,
		CD_CONVENIO	NUMBER,
		CD_CON_PLA	NUMBER,
		NM_USUARIO	VARCHAR2(2000),
		CD_ALTA_SUS	NUMBER
	);
	-- Record to be used as parameter of procedures and functions that access application block PACIENTE's items
	TYPE PACIENTERec IS RECORD (
		CD_PACIENTE	NUMBER,
		TP_SEXO	VARCHAR2(2000),
		DSP_DS_CIDADANIA	VARCHAR2(2000),
		CD_MULTI_EMPRESA	NUMBER,
		DSP_DS_GRAU_INS	VARCHAR2(2000),
		NR_CEP	VARCHAR2(2000),
		DSP_NM_CIDADE	VARCHAR2(2000),
		DSP_CD_UF	VARCHAR2(2000),
		DSP_NR_IDENTIDADE	VARCHAR2(2000),
		DSP_NR_CPF	VARCHAR2(2000),
		NR_CPF	VARCHAR2(2000),
		NR_CNS	VARCHAR2(2000),
		NR_IDENTIDADE	VARCHAR2(2000),
		CD_CIDADANIA	NUMBER,
		CD_GRAU_INS	NUMBER,
		CD_CIDADE	NUMBER
	);
	-- Record to be used as parameter of procedures and functions that access application block CG$CTRL's items
	TYPE CG$CTRLRec IS RECORD (
		REFRESH_ITREG_FAT	VARCHAR2(2000),
		REFRESH_ITLAN_MED	VARCHAR2(2000),
		DIGITA_EQUIPE	VARCHAR2(2000),
		DIGITA_NOTA	VARCHAR2(2000),
		DIGITA_UTI	VARCHAR2(2000),
		DIGITA_REG_CIVIL	VARCHAR2(2000),
		DIGITA_LACVAS	VARCHAR2(2000),
		DIGITA_PRE_NATAL	VARCHAR2(2000),
		GO_ACOMPANHANTE	VARCHAR2(2000),
		CD_SETOR_REA_ANT	NUMBER,
		CD_PRESTADOR_REA_ANT	NUMBER,
		STATUS_LOCK	VARCHAR2(2000)
	);
	-- Record to be used as parameter of procedures and functions that access application block IT_PARTO's items
	TYPE IT_PARTORec IS RECORD (
		QT_RN_VIVO	NUMBER,
		QT_RN_MORTO	NUMBER,
		QT_RN_ALTA	NUMBER,
		QT_RN_TRANSFERIDO	NUMBER,
		QT_RN_OBITO	NUMBER
	);
	-- Record to be used as parameter of procedures and functions that access application block RESPONSA's items
	TYPE RESPONSARec IS RECORD (
		NM_RESPONSAVEL	VARCHAR2(2000),
		DS_ENDERECO	VARCHAR2(2000),
		DS_COMPLEMENTO	VARCHAR2(2000),
		NR_ENDERECO	NUMBER,
		NM_BAIRRO	VARCHAR2(2000),
		DSP_NM_CIDADE	VARCHAR2(2000),
		DSP_CD_UF	VARCHAR2(2000),
		DS_NACIONALIDADE	VARCHAR2(2000),
		CD_CIDADE	NUMBER
	);
	-- Record to be used as parameter of procedures and functions that access application level global variables
	TYPE GlobalsRec IS RECORD (
		RECALCULOU	VARCHAR2(256),
		VCHANGE	VARCHAR2(256),
		VCTAFECHADA	VARCHAR2(256),
		CPFOLD	VARCHAR2(256),
		RGOLD	VARCHAR2(256),
		OBG_MEDAUT	VARCHAR2(256),
		VOBRIGAGESTOR	VARCHAR2(256),
		CD_REGRA	VARCHAR2(256),
		VCSETOR	VARCHAR2(256)
	);
	-- Record to be used as parameter of procedures and functions that access application level Form parameters
	TYPE FormParamsRec IS RECORD (
		SN_REMESSA_OBRIGATORIA	VARCHAR(512),
--		P_HOSPITAL	VARCHAR(512),
		P_EMPRESA	VARCHAR(512),
		SN_IMPORTA_ATEND	VARCHAR(512),
		SN_GERA_DISQUETE_PERIODO	VARCHAR(512),
		SN_GERA_ACH	VARCHAR(512),
		CD_PRESTADOR_AIH	VARCHAR(512),
		CD_CGC	VARCHAR(512),
		CD_PRESTADOR_DIR_CLINICO	VARCHAR(512),
		DS_MULTI_EMPRESA	VARCHAR(512),
		NR_AIH_INICIAL_CNRAC	VARCHAR(512),
		NR_AIH_FINAL_CNRAC	VARCHAR(512),
		NR_INICIAL_AIH_ESPECIFICA	VARCHAR(512),
		NR_FINAL_AIH_ESPECIFICA	VARCHAR(512)
	);
-- Extracted code units
	FUNCTION F_PK_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdRegFat in number) RETURN number;
	FUNCTION F_DEFINE_TIPO_PAGTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number) RETURN varchar2;
	FUNCTION F_GET_DIAS_PERM_MAIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number;
	FUNCTION F_GET_PRIMEIRA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number;
	FUNCTION F_CALC_DIAS_PROCEDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number;
	FUNCTION F_GET_ATEND_QTD_FECHADAS (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                                nAtend   in number) RETURN NUMBER;
	FUNCTION F_DEFINE_PEND_SADT (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend in number) RETURN boolean;
	FUNCTION F_PROCURA_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat in number) RETURN boolean;
	FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) RETURN boolean;
	FUNCTION F_VALIDA_PERIODO_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, p_cd_reg_fat reg_fat.cd_reg_fat%type, p_dt_inicio date, p_dt_final date) RETURN boolean;
	FUNCTION F_VALIDA_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Number) RETURN Boolean;
	FUNCTION F_VALIDA_CNS_PROV (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Varchar2) RETURN BOOLEAN;
	FUNCTION F_VERIFICA_QTD_ABERTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                              nAtend   in number) RETURN NUMBER;
	FUNCTION F_DEFINE_GRU_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompetencia IN Date) RETURN Number; --OP 35293
	FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2;
	FUNCTION F_OBRIGA_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento Varchar2) RETURN BOOLEAN;
	FUNCTION F_INTERCORRENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLancamento In Number) RETURN Boolean;
	FUNCTION F_LANCA_APURAR_VALOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in number) RETURN Number;
	FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pnCdRegFat    In Number) RETURN Number;
	FUNCTION F_RETORNA_DETAL_GESTOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Number, pId_Critica Varchar2) RETURN Varchar2;
	FUNCTION F_GET_DIAS_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN Number;
	FUNCTION F_GET_DIAS_CLINICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pNrIdentificacao in varchar2, pDtInicio Date, pDtFinal Date) RETURN Number;
	FUNCTION F_GET_DIAS_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pTipo In Varchar2 Default 'C', reg_fat IN OUT NOCOPY REG_FATRec) RETURN Number;
	FUNCTION F_DEFINE_ATI_MED_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompet in Date) RETURN Varchar2;
    FUNCTION F_ITEM_CENTRO_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento in Varchar2) RETURN Boolean;
	FUNCTION F_F_CONTA_CIR_MULTIPLA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2 Default '', pCompet in Date) RETURN Boolean;
	FUNCTION F_GET_PROC_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Varchar2;
	FUNCTION F_F_SN_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN;
	FUNCTION F_F_SN_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean;
	FUNCTION F_F_SN_ABRE_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean;
	FUNCTION F_F_SN_PROC_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN;
	FUNCTION F_DEFINE_VINCULO_CREDITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pData in Date, pPrestador in Number,pTpCredito in Number) RETURN Number;
	FUNCTION F_F_LAQUEADURA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN;
	FUNCTION F_F_TOTAL_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number) RETURN Number;
	FUNCTION F_GET_TP_COMPLEXIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pModo In Varchar2) RETURN VARCHAR2;
	FUNCTION F_RET_INCREMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pDate in Date) RETURN NUMBER;
	FUNCTION F_RET_TIPO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pCompet Date) RETURN VARCHAR2;
	FUNCTION F_GET_ULTIMA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number;
	FUNCTION F_GET_IDADE_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN NUMBER;
	FUNCTION F_F_SN_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In VARCHAR2) RETURN BOOLEAN;
	FUNCTION F_GET_PROC_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2;
	FUNCTION F_GET_PROC_DIARIA_IDOSO (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN Varchar2;
	FUNCTION F_GET_SETOR_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN Number;
	FUNCTION F_GET_PRESTADOR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN NUMBER;
	FUNCTION F_GET_DIAS_AIH_5 (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pTipo In Varchar2 Default 'C') RETURN NUMBER;
	FUNCTION F_GET_DT_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE;
	FUNCTION F_F_SN_FECHADA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN BOOLEAN;
	FUNCTION F_GET_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number, pProcedimento in Varchar2, pCompet in Date) RETURN Varchar2;
	FUNCTION F_F_SN_PAGO_POR_DIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN;
   FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN;
	FUNCTION F_F_AIH_CONTINUACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In NUmber) RETURN BOOLEAN;
	FUNCTION F_F_COMPET_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE;
	FUNCTION F_F_SN_TEM_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN;
	FUNCTION F_F_SN_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN;
	PROCEDURE P_VALIDA_NR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext, P_REG_FAT   NUMBER,
                         PNR_AIH     VARCHAR2,
                         PTIPO_AIH   VARCHAR2,
                         PGUIA_ANT   VARCHAR2,
                         PGUIA_POS   VARCHAR2);
	PROCEDURE P_HABILITA_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, vProcedimento in varchar2);
	PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDiarias in Number, cg$ctrl IN OUT NOCOPY CG$CTRLRec, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_DEFINE_PRESTADOR_AUTO (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdSetor     in     number  ,
                                 nCdPrestador IN OUT NOCOPY number  ,
                                 pProcedimento in Varchar2,PCBO IN OUT VARCHAR2);
	PROCEDURE P_CONTA_CLOSED (xml IN OUT NOCOPY PKG_XML.XmlContext, vClosed in varchar2, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec);
	PROCEDURE P_DADOS_PARTO_DEFAULT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number
                              ,pProcedimento in varchar2, it_parto IN OUT NOCOPY IT_PARTORec);
	PROCEDURE P_CHECK_CONTAS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, nRemessa in number);
	PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_STATUS_LOCK (xml IN OUT NOCOPY PKG_XML.XmlContext, vModo in varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec);
	PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador In Number,pAtiMed In Varchar2,pProcedimento in Varchar2);
	PROCEDURE P_CRIA_NOVA_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pdAlta in Date,pMotAlt in Number);
	PROCEDURE P_VALIDA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pCdPrestador in number);
	PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_VALIDA_GLOSA_TOTAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
	PROCEDURE P_HABILITA_DESABILITA_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pbLimpaCampo in boolean, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_INSERE_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat          in     number  ,
                             nLancto          IN OUT NOCOPY number  ,
                             vProcedimento    in     varchar2,
                             dDate            in     date    ,
                             nSetor           in     number  ,
                             pPrestador       in     number  ,
                             nQtd             in     number  ,
                             vSN_Realizado    in     varchar2,
                             vAtualizaIT      out    varchar2);
	PROCEDURE P_MONTAR_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat  in number,
                         nLancto  in number,
                         vProced  in Varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec);
	PROCEDURE P_CHK_LCTO_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat  In Number
                      ,pLcto    In Number
                      ,DtComp   In Date);
	PROCEDURE P_VALIDA_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pModalidade In Varchar2);
--	PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_CHK_ATI_MED_06 (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Reg_Fat Number, pCd_Lancamento Number);
	PROCEDURE P_DEFINE_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number);
	PROCEDURE P_DML_CORRIGE_LCTO_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in NUMBER, pCompet Date, pAtualiza in out Varchar2 );
	PROCEDURE P_LANCA_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec);
	PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pProcedimento In Varchar2);
	PROCEDURE P_VALIDA_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pAIH In Varchar2);
	PROCEDURE P_DML_REG_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
	PROCEDURE P_DML_DADOS_LAQVASEC (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pProcedimento in Varchar2);
	PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2);
	PROCEDURE P_DML_LANCAMENTO_PAI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
	PROCEDURE P_DML_DIARIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDA_Acomp in Number);
	PROCEDURE P_VAL_CEP_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_VAL_PREST_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_RETORNA_DADOS_FORNECEDOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pFornecedor in number, itcob_pre IN OUT NOCOPY ITCOB_PRERec);
	PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pSexoPac In Varchar2);
	PROCEDURE P_DEFINE_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_DEFINE_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number,pSolicitado in varchar2,pRealizado in varchar2,pEsp IN OUT NOCOPY Varchar2);
	PROCEDURE P_CHECA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdPrestador number);
	PROCEDURE P_VAL_PREST_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Varchar2);
	PROCEDURE P_INSERE_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec);
	PROCEDURE P_VALIDA_CONTA_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat Number);
	PROCEDURE P_VALIDA_DATA_INICIO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_DML_EXCLUI_DIARIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number
                                ,pDtAlta In Date);
	PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                              ,pEspec_SUS    In Varchar2);
	PROCEDURE P_VALIDA_GUIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento In Number, pReg_Fat In Number, pNr_Guia In Varchar2);
	PROCEDURE P_VALIDA_SOL_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProc_Sol In Varchar2,pProc_Rea In Varchar2);
	PROCEDURE P_DEFINE_CID_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_DEFINE_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_VAL_CID_SECUNDARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pCID_Pri In Varchar2 ,pCID_Sec In Varchar2,pSexPac In Varchar2);
	PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pProcedimento In Varchar2,pCID In Varchar2);
	PROCEDURE P_DEFINE_EQP_MEDICA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                               ,pSN_Equipe      Out Varchar2
                               ,pNr_Auxiliar    Out Number
                               ,pSN_Anestesista Out Varchar2);
	PROCEDURE P_DEFINE_ABERTURA_TELAS (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec);
	PROCEDURE P_VALIDA_PRESTADORES_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number);
	PROCEDURE P_INSERE_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento In Varchar2);
	PROCEDURE P_VALIDA_COD_REDUZIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in varchar, itreg_fat IN OUT NOCOPY ITREG_FATRec);
	PROCEDURE P_VAL_QUANTIDADE_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar, pProc_Pai in Varchar2, pDtLacto in date,pQtLacto in Number);
	PROCEDURE P_VALIDA_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pEmpresa in Number, pSetor in Number);
	PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Number, pPrestador in Number);
	PROCEDURE P_VALIDA_ATI_MED_REPETIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLancamento in Number,pAtiMed in Varchar2);
	PROCEDURE P_VAL_PRESTADOR_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number);
	PROCEDURE P_VAL_PRESTADOR_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pPrestador in Number, pCBO in Varchar2,pAtiMed in Varchar2 default '00');
	PROCEDURE P_VAL_CBO_AUXILIARES (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number);
	PROCEDURE P_VALIDA_TIPO_PAGAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pConvenio in Number,pPrestador in Number,pTpPagamento in Varchar2, FSV_MODE IN OUT NOCOPY varchar2);
	PROCEDURE P_RETORNA_DADOS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Remessa number, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_VALIDA_CNPJ (xml IN OUT NOCOPY PKG_XML.XmlContext, pCNPJ in Number, itcob_pre IN OUT NOCOPY ITCOB_PRERec);
	PROCEDURE P_P_COMMIT_FORM (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2);
	PROCEDURE P_DML_REGISTRO_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number, pProcedimento in Varchar2, pQtLancamento in Number);
	PROCEDURE P_RETORNA_CIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCidade in Number, rNm_Cidade out Varchar2, rCd_UF out Varchar2,pRaise in boolean);
	PROCEDURE P_RETORNA_CIDADE2 (xml IN OUT NOCOPY PKG_XML.XmlContext, pNm_Cidade in Varchar2, pCd_UF in Varchar2,pCidade in Number,pRaise in boolean, responsa IN OUT NOCOPY RESPONSARec);
	PROCEDURE P_DML_CORRIGE_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto In Number Default Null);
	PROCEDURE P_DML_ATUALIZA_ITEM_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto in Number, pQtd_It In Number);
	PROCEDURE P_RETORNA_DADOS_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Leito number, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_RETORNA_DADOS_MOT_ALT (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Mot_Alt in number, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_DEFINE_SN_INFECCAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento in Number,pSN_Infec in Varchar2, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_LANCA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_RETORNA_DADOS_EMPRESA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Multi_Empresa number, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_VALIDA_CID_OBITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pEstadoPac in Varchar2,pMot in Varchar2);
	PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat  In Number
                                     ,pDias_DA In number
                                     ,pReflesh  IN OUT NOCOPY Varchar2, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_DML_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number ,pDias in number);
	PROCEDURE P_DML_DELETE_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_I_PC_P_NR_CEP (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_I_PC_P_DSP_NR_CPF (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec);
	PROCEDURE P_I_WVI_P_NR_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec);
	PROCEDURE P_B_PQ_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_I_PC_A_DT_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, p_atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_I_WVI_A_CD_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_I_PC_A_CD_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_B_PI_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_B_OCDM_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_I_WVI_RF_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec);
	PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_B_PI_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_B_PU_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec, FSV_FORM_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_I_M_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, itreg_fat IN OUT NOCOPY ITREG_FATRec, global IN OUT NOCOPY GlobalsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2);
	PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec);
	PROCEDURE P_I_WVI_IF_CD_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec);
	PROCEDURE P_B_PD_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, itcob_pre IN OUT NOCOPY ITCOB_PRERec, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, responsa IN OUT NOCOPY RESPONSARec);
	PROCEDURE P_B_WNBI_RESPONSA (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, responsa IN OUT NOCOPY RESPONSARec);
	PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, reg_fat IN OUT NOCOPY REG_FATRec);
	PROCEDURE P_B_PQ_DIARIA_UTI_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, itreg_fat IN OUT NOCOPY ITREG_FATRec);
	PROCEDURE P_F_PF (xml IN OUT NOCOPY PKG_XML.XmlContext);
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>P_FACHADA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
PROCEDURE P_FACHADA(in_params in Clob, out_params out Clob) IS
BEGIN
	null;
END P_FACHADA;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PK_ITREG_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_PK_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdRegFat in number) RETURN number IS
nPk number := 1;
begin
   begin
      select nvl(max(CD_LANCAMENTO),0) + 1
        into nPk
        from ITREG_FAT
       where CD_REG_FAT = nCdRegFat;
   exception
      when NO_DATA_FOUND then
           Null;
   end;
   return nPk;
end;
FUNCTION F_PK_ITREG_FAT (in_params in Clob, out_params out Clob) RETURN number IS
	xml PKG_XML.XmlContext;
	nCdRegFat number;
	result number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nCdRegFat:= PKG_XML.Getnumber(xml, 'nCdRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_PK_ITREG_FAT_E(xml) THEN
				result:= F_PK_ITREG_FAT(xml, nCdRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_PK_ITREG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_TIPO_PAGTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_TIPO_PAGTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number) RETURN varchar2 IS
Cursor cPrestador is
    SELECT prestador.TP_VINCULO,
           convenio.TP_CONVENIO,
           pres_con.SN_PAGA_PELO_CONVENIO
      FROM CONVENIO convenio
         , PRES_CON pres_con
         , PRESTADOR prestador
         , CONFIG_FFIS conf
           , EMPRESA_CONVENIO
     WHERE pres_con.CD_PRESTADOR (+) = prestador.CD_PRESTADOR
       AND pres_con.CD_CONVENIO      = convenio.CD_CONVENIO (+)
       and (pres_con.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or pres_con.cd_multi_empresa is null )  -- OP 3396 - 25/04/2013
       AND convenio.CD_CONVENIO      = conf.CD_CONVENIO
       AND Empresa_Convenio.Cd_Convenio = Convenio.Cd_Convenio
       AND Empresa_Convenio.Cd_Multi_Empresa = xml.multiEmpresa
       AND prestador.TP_SITUACAO     = 'A'
       AND prestador.CD_PRESTADOR    = pPrestador;
  vTpVinc  Varchar2(1);
  vTpConv  Varchar2(1);
  vSnPaga  Varchar2(1);
  vTpPagt  Varchar2(1);
begin
  Open  cPrestador;
    Fetch cPrestador into vTpVinc,
                                      vTpConv,
                                      vSnPaga;
  Close cPrestador;
  if    vTpVinc in('U','C') then
        vTpPagt := 'F';
  elsif vTpConv = 'H' and vSnPaga = 'S' then
        vTpPagt := 'C';
  else
        vTpPagt := 'P';
  end if;
   return(vTpPagt);
end;
FUNCTION F_DEFINE_TIPO_PAGTO (in_params in Clob, out_params out Clob) RETURN varchar2 IS
	xml PKG_XML.XmlContext;
	pPrestador Number;
	result varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_TIPO_PAGTO_E(xml) THEN
				result:= F_DEFINE_TIPO_PAGTO(xml, pPrestador);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_TIPO_PAGTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_PERM_MAIOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_PERM_MAIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number IS
Cursor cProcPerMaior is select i.cd_procedimento,nr_dias_internacao
                            from itreg_fat i,
                                 procedimento_sus p
                           where i.cd_procedimento = p.cd_procedimento
                             and i.cd_reg_fat = pRegFat
                             and p.nr_dias_internacao in (select max(nr_dias_internacao)
                                                            from procedimento_sus
                                                           where cd_procedimento in (select cd_procedimento
                                                                                       from itreg_fat
                                                                                      where cd_reg_fat = pRegFat
                                                                                        and sn_proced_realizado = 'S'));
  nDiasConta  Number:= 0;      -- Dias Internado
  nDiasProc   Number:= 0;      -- Maximo de dias do procedimento
  nPM_Calc    Number:= 0;      -- Dias de Permanencia Maior
  nUti        Number:= 0;
  vProcedPM   Procedimento_SUS.Cd_Procedimento%Type; -- Recebe o Procedimento de Maior Numero de Dias de Internação
  eSaida      Exception;
begin
   IF DBAMV.PKG_SUS_REGRA_PROCEDIMENTO.f_prc_permanencia_maior(F_GET_PROC_REALIZADO(xml,pRegFat),F_GET_DT_INTERNACAO(xml,pRegFat) ) THEN
      RAISE eSaida;
   END IF;
  -- se n permitir, chamar saida;
   -- Recupera os dias de internacao consideranco o motivo de alta
   --nDiasConta:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT);
   nDiasConta:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat,'P' ,reg_fat => REG_FAT); --OP: 3622 início/Fim.
   -- Recupera na conta o procedimento principal com maior quantidade de dias para Internação.
   Open cProcPerMaior;
     Fetch cProcPerMaior into vProcedPM,nDiasProc;
   Close cProcPerMaior;
   If nDiasProc > 0 Then
     nUTI    := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
     nPM_Calc:= (nDiasConta - (nDiasProc * 2)) - nUTI;
     If nPM_Calc > 0 then
       If nPM_Calc > 99 then
         Return 99;
       Else
         Return nPM_Calc;
       End if;
     End if;
   End If;
   Return 0;
Exception
When eSaida Then
  Return 0;
end;
FUNCTION F_GET_DIAS_PERM_MAIOR (in_params in Clob, out_params out Clob) RETURN number IS
	xml PKG_XML.XmlContext;
	pRegFat number;
	reg_fat REG_FATRec;
	result number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_PERM_MAIOR_E(xml) THEN
				result:= F_GET_DIAS_PERM_MAIOR(xml, pRegFat, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_PERM_MAIOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PRIMEIRA_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PRIMEIRA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number IS
nRegFat number;
begin
   SELECT min(reg_fat.CD_REG_FAT) REG_FAT
     into nRegFat
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_ATENDIMENTO   = nAtend;
   return(nRegFat);
end;
FUNCTION F_GET_PRIMEIRA_CONTA (in_params in Clob, out_params out Clob) RETURN number IS
	xml PKG_XML.XmlContext;
	nAtend number;
	result number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRIMEIRA_CONTA_E(xml) THEN
				result:= F_GET_PRIMEIRA_CONTA(xml, nAtend);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRIMEIRA_CONTA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_CALC_DIAS_PROCEDIMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_CALC_DIAS_PROCEDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec) RETURN number IS
vProcedimento Procedimento_SUS.Cd_Procedimento%Type;
  nQtd     Number := 1;
  nDiasUTI Number := 0;
  bPgDIA   Boolean;
  bAIH_5   Boolean;
Begin
    -- Captura parametros
    vProcedimento := Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat);
    --bPgDIA        := Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PAGO_POR_DIA(xml, vProcedimento);
    bAIH_5        := Pkg_ffis_M_LACTO_AIH_P321.F_F_AIH_CONTINUACAO(xml, pRegFat);
  -- Captura os dias de UTI
  nDiasUTI:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
  If Not bAIH_5 Then
   nQtd := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat,'C',reg_fat => REG_FAT)- nDiasUTI;
  Else
   nQtd := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_AIH_5(xml, pRegFat);
  End If;
   If nQtd < 1 Then
    nQtd:=1;
   End IF;
  Return nQtd;
End;
FUNCTION F_CALC_DIAS_PROCEDIMENTO (in_params in Clob, out_params out Clob) RETURN number IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	reg_fat REG_FATRec;
	result number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_CALC_DIAS_PROCEDIMENTO_E(xml) THEN
				result:= F_CALC_DIAS_PROCEDIMENTO(xml, pRegFat, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_CALC_DIAS_PROCEDIMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_ATEND_QTD_FECHADAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_ATEND_QTD_FECHADAS (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                                nAtend   in number) RETURN NUMBER IS
nQtd number := 0;
begin
   SELECT nvl(count(*),0)
     INTO nQtd
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_MULTI_EMPRESA = nEmpresa
      AND reg_fat.CD_ATENDIMENTO   = nAtend
      AND reg_fat.SN_FECHADA       = 'S';
   return(nQtd);
exception
   when NO_DATA_FOUND then
        return(0);
end;
FUNCTION F_GET_ATEND_QTD_FECHADAS (in_params in Clob, out_params out Clob) RETURN NUMBER IS
	xml PKG_XML.XmlContext;
	nEmpresa number;
	nAtend number;
	result NUMBER;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nEmpresa:= PKG_XML.Getnumber(xml, 'nEmpresa');
		nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ATEND_QTD_FECHADAS_E(xml) THEN
				result:= F_GET_ATEND_QTD_FECHADAS(xml, nEmpresa, nAtend);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ATEND_QTD_FECHADAS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_PEND_SADT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_PEND_SADT (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend in number) RETURN boolean IS
nQtd number := 0;
begin
   SELECT nvl(count(log_falha_importacao.CD_ITEM_FALHA),0)
     into nQtd
     FROM LOG_FALHA_IMPORTACAO log_falha_importacao
    WHERE log_falha_importacao.CD_ATENDIMENTO    = nAtend
      AND log_falha_importacao.NM_USUARIO_BAIXOU is null;
   if nQtd = 0 then
         return(False);
   end if;
   return(True);
exception
    when NO_DATA_FOUND then
         return(False);
end;
FUNCTION F_DEFINE_PEND_SADT (in_params in Clob, out_params out Clob) RETURN boolean IS
	xml PKG_XML.XmlContext;
	nAtend number;
	result boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PEND_SADT_E(xml) THEN
				result:= F_DEFINE_PEND_SADT(xml, nAtend);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PEND_SADT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PROCURA_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_PROCURA_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat in number) RETURN boolean IS
nItens number := 0;
begin
   select nvl(count(*),0)
     into nItens
     from ITREG_FAT
    where itreg_fat.CD_REG_FAT = nRegFat
      and itreg_fat.CD_Procedimento    in (Select Cd_Procedimento
                                             From Procedimento_SUS_Detalhe
                                            Where SN_Parto = 'S');
   if nItens = 0 then
      raise NO_DATA_FOUND;
   end if;
   return(True);
exception
   when NO_DATA_FOUND then
        return(False);
end;
FUNCTION F_PROCURA_PARTO (in_params in Clob, out_params out Clob) RETURN boolean IS
	xml PKG_XML.XmlContext;
	nRegFat number;
	result boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nRegFat:= PKG_XML.Getnumber(xml, 'nRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_PROCURA_PARTO_E(xml) THEN
				result:= F_PROCURA_PARTO(xml, nRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_PROCURA_PARTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_REMESSA_OBRIGATORIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) RETURN boolean IS
Begin
   if REG_FAT.CD_REMESSA           IS NULL     AND
         REG_FAT.CD_PROCEDIMENTO_REALIZADO IS NOT NULL AND
         formParams.SN_REMESSA_OBRIGATORIA = 'S' THEN
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_3)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_3', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Remessa deve ser informada.'),false);
      return(False);
   end if;
   return(True);
End;
FUNCTION F_DEFINE_REMESSA_OBRIGATORIA (in_params in Clob, out_params out Clob) RETURN boolean IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	formParams FormParamsRec;
	result boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_REMESSA_OBRIGATORIA_E(xml) THEN
				result:= F_DEFINE_REMESSA_OBRIGATORIA(xml, REG_FAT, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_REMESSA_OBRIGATORIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>valida_periodo_conta</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VALIDA_PERIODO_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, p_cd_reg_fat reg_fat.cd_reg_fat%type, p_dt_inicio date, p_dt_final date) RETURN boolean IS
vCountItensFora number := 0;
BEGIN
  if p_dt_inicio is not null and p_dt_final is null then
      select count(*)
        into vCountItensfora
        from itreg_fat
       where cd_reg_fat = p_cd_reg_fat
         and trunc(dt_lancamento) < p_dt_inicio
         and cd_procedimento is not null;
  elsif p_dt_inicio is null and p_dt_final is not null then
      select count(*)
        into vCountItensfora
        from itreg_fat
       where cd_reg_fat = p_cd_reg_fat
         and trunc(dt_lancamento) > p_dt_final
         and cd_procedimento is not null;
  elsif p_dt_inicio is not null and p_dt_final is not null then
      select count(*)
        into vCountItensfora
        from itreg_fat
       where cd_reg_fat = p_cd_reg_fat
         and trunc(dt_lancamento) not between p_dt_inicio and p_dt_final
         and cd_procedimento is not null;
  end if;
  if vCountItensfora > 0 then
      return false; --encontrou itens fora do periodo da conta e retorna false
  else
      return true;  --não encontrou itens fora do periodo da conta e retorna true
  end if;
END;
FUNCTION F_VALIDA_PERIODO_CONTA (in_params in Clob, out_params out Clob) RETURN boolean IS
	xml PKG_XML.XmlContext;
	p_cd_reg_fat number;
	p_dt_inicio date;
	p_dt_final date;
	result boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		p_cd_reg_fat:= PKG_XML.Getnumber(xml, 'p_cd_reg_fat');
		p_dt_inicio:= PKG_XML.Getdate(xml, 'p_dt_inicio');
		p_dt_final:= PKG_XML.Getdate(xml, 'p_dt_final');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_PERIODO_CONTA_E(xml) THEN
				result:= F_VALIDA_PERIODO_CONTA(xml, p_cd_reg_fat, p_dt_inicio, p_dt_final);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_PERIODO_CONTA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_CNS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VALIDA_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Number) RETURN Boolean IS
Pis     Varchar2(15);
  Resto Number;
  Dv       Number;
  Soma     Number;
  Resultado Varchar2(15);
Begin
  Pis := SubStr(NumCns,1,11);
  Soma := ( ( To_Number( SubStr( Pis,1 ,1  ) ) ) * 15 ) +
            ( ( To_Number( SubStr( Pis, 2,1  ) ) ) * 14 ) +
            ( ( To_Number( SubStr( Pis, 3,1  ) ) ) * 13 ) +
            ( ( To_Number( SubStr( Pis, 4,1  ) ) ) * 12 ) +
            ( ( To_Number( SubStr( Pis, 5,1  ) ) ) * 11 ) +
            ( ( To_Number( SubStr( Pis, 6,1  ) ) ) * 10 ) +
            ( ( To_Number( SubStr( Pis, 7,1  ) ) ) * 9  ) +
            ( ( To_Number( SubStr( Pis, 8,1  ) ) ) * 8  ) +
            ( ( To_Number( SubStr( Pis, 9,1  ) ) ) * 7  ) +
            ( ( To_Number( SubStr( Pis, 10,1 ) ) ) * 6  )+
          ( ( To_Number( SubStr( Pis, 11,1 ) ) ) * 5  );
  Resto := Mod(Soma ,11);
  Dv    := 11 - Resto;
  If Dv = 11 Then
    Dv := 0;
  End If;
  If Dv = 10 Then
    Soma := ( ( To_Number( SubStr( Pis, 1,1  ) ) ) * 15 ) +
              ( ( To_Number( SubStr( Pis, 2,1  ) ) ) * 14 ) +
              ( ( To_Number( SubStr( Pis, 3,1  ) ) ) * 13 ) +
              ( ( To_Number( SubStr( Pis, 4,1  ) ) ) * 12 ) +
              ( ( To_Number( SubStr( Pis, 5,1  ) ) ) * 11 ) +
              ( ( To_Number( SubStr( Pis, 6,1  ) ) ) * 10 ) +
              ( ( To_Number( SubStr( Pis, 7,1  ) ) ) * 9  ) +
              ( ( To_Number( SubStr( Pis, 8,1  ) ) ) * 8  ) +
              ( ( To_Number( SubStr( Pis, 9,1  ) ) ) * 7  ) +
              ( ( To_Number( SubStr( Pis, 10,1 ) ) ) * 6  ) +
            ( ( To_Number( SubStr( Pis, 11,1 ) ) ) * 5  ) + 2;
    Resto     := Mod(Soma, 11);
    Dv        := 11 - Resto;
    Resultado := Pis || '001' || To_Char( Dv );
  Else
    Resultado := Pis || '000' || To_Char( Dv );
  End If;
  If NumCns <> Resultado Then
    Return (False);
  Else
    Return (True);
  End If;
End;
FUNCTION F_VALIDA_CNS (in_params in Clob, out_params out Clob) RETURN Boolean IS
	xml PKG_XML.XmlContext;
	NumCns Number;
	result Boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		NumCns:= PKG_XML.GetNumber(xml, 'NumCns');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_E(xml) THEN
				result:= F_VALIDA_CNS(xml, NumCns);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_CNS_PROV</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VALIDA_CNS_PROV (xml IN OUT NOCOPY PKG_XML.XmlContext, NumCns Varchar2) RETURN BOOLEAN IS
vSoma      NUMBER;
 vResto     NUMBER;
BEGIN
 vSoma := ( (TO_NUMBER( SUBSTR(NumCns,  1, 1) ) ) * 15 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  2, 1) ) ) * 14 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  3, 1) ) ) * 13 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  4, 1) ) ) * 12 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  5, 1) ) ) * 11 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  6, 1) ) ) * 10 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  7, 1) ) ) *  9 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  8, 1) ) ) *  8 ) +
          ( (TO_NUMBER( SUBSTR(NumCns,  9, 1) ) ) *  7 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 10, 1) ) ) *  6 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 11, 1) ) ) *  5 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 12, 1) ) ) *  4 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 13, 1) ) ) *  3 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 14, 1) ) ) *  2 ) +
          ( (TO_NUMBER( SUBSTR(NumCns, 15, 1) ) ) *  1 );
 vResto := MOD(vSoma, 11);
 IF NVL(vResto,1) <> 0 THEN
  RETURN (FALSE);
 ELSE
  RETURN (TRUE);
 END IF;
END;
FUNCTION F_VALIDA_CNS_PROV (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	NumCns Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		NumCns:= PKG_XML.GetVarchar2(xml, 'NumCns');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_PROV_E(xml) THEN
				result:= F_VALIDA_CNS_PROV(xml, NumCns);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_VALIDA_CNS_PROV_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VERIFICA_QTD_ABERTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_VERIFICA_QTD_ABERTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nEmpresa in number,
                              nAtend   in number) RETURN NUMBER IS
nQtd number := 0;
begin
   SELECT nvl(count(*),0)
     INTO nQtd
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_MULTI_EMPRESA = nEmpresa
      AND reg_fat.CD_ATENDIMENTO   = nAtend
      AND reg_fat.SN_FECHADA       = 'N';
   return(nQtd);
exception
   when NO_DATA_FOUND then
        return(0);
END;
FUNCTION F_VERIFICA_QTD_ABERTA (in_params in Clob, out_params out Clob) RETURN NUMBER IS
	xml PKG_XML.XmlContext;
	nEmpresa number;
	nAtend number;
	result NUMBER;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nEmpresa:= PKG_XML.Getnumber(xml, 'nEmpresa');
		nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_VERIFICA_QTD_ABERTA_E(xml) THEN
				result:= F_VERIFICA_QTD_ABERTA(xml, nEmpresa, nAtend);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_VERIFICA_QTD_ABERTA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_GRU_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
--OP 35293 inicio
FUNCTION F_DEFINE_GRU_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompetencia IN Date) RETURN Number IS --OP 35293
Cursor cGRUFAT(pCompet IN DATE) Is
  Select d.Cd_Gru_Pro, g.cd_gru_fat
    From dbamv.Procedimento_Detalhe_vigencia d
	   , dbamv.Gru_Pro g
   Where d.Cd_Procedimento = pProcedimento
     AND pCompet BETWEEN d.dt_validade_inicial AND Nvl(d.dt_validade_final, pCompet)
	 AND d.cd_gru_pro = g.cd_gru_pro(+);

  nGruPro       Gru_Pro.Cd_Gru_Pro%Type;
  nGruFat       Gru_Fat.Cd_Gru_fat%Type;
  Saida         Exception;
  Erro          Exception;
  bEXISTE       Boolean;
  dCOMPET       Date;
  vMSG          VARCHAR2(2000);

Begin
  If pProcedimento Is Null Then
    raise Saida;
  End If;

  dCOMPET:= TRUNC(NVL(pCompetencia, sysdate), 'MM');
  nGruPro:= NULL;
  nGruFat:= NULL;

  Open cGRUFAT(dCOMPET);
  Fetch cGRUFAT Into nGruPro, nGruFat;
  bEXISTE:= cGRUFAT%FOUND;
  Close cGRUFAT;
  IF NOT bEXISTE THEN
    vMSG:= 'Não foi encontrado detalhe do procedimento '||pProcedimento||' na competência '||dCOMPET||
	       '. Verificar em FFIS > Tabelas > Procedimentos > Procedimentos.';
	RAISE Erro;
  END IF;

  IF nGruPro IS NULL THEN
    vMSG:= 'Procedimento '||pProcedimento||' na competência'||dCOMPET||
	       ' está sem grupo de procedimentos de internação. Verificar em FFIS > Tabelas > Procedimentos > Procedimentos.';
	RAISE Erro;
  END IF;

  IF nGruFat IS NULL THEN
    vMSG:= 'Grupo de procedimento '||nGruPro||' do procedimento '||pProcedimento||' na competência '||dCOMPET|| ' está sem grupo de faturamento cadastrado.'||
	       '. Verificar em Fat. Convênios > Tabelas > Gerais > Grupos de Procedimentos.';
	RAISE Erro;
  END IF;

 Return(nGruFat);
Exception
/*
  When NO_DATA_FOUND Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_4)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_4', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Grupo de faturamento não cadastrado para procedimento realizado: %s.', arg_list(pProcedimento)),TRUE);
  */
  When Erro Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:',vMSG ,TRUE);

  When Saida Then
    Return null;
End;
FUNCTION F_DEFINE_GRU_FAT (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pCompetencia DATE; --OP 35293
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCompetencia := PKG_XML.GetDate(xml, 'pCompetencia'); --OP 35293
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_GRU_FAT_E(xml) THEN
				result:= F_DEFINE_GRU_FAT(xml, pProcedimento, pCompetencia);  --OP 35293
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_GRU_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
--OP 35293 fim
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_PRC_DIARIA_ACOMPANHANTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2 IS
nIdade    Number;
  bSN_Parto Boolean;
  Saida     Exception;
BEGIN
  -- Retorna TRUE se o procedimento é de parto.
  bSN_Parto:= Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PARTO(xml, Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat));
  -- Retorna a idade do paciente.
  nIdade:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_IDADE_PACIENTE(xml, pRegFat);
  If nIdade > 12
      And bSN_Parto Then
      -- DIARIA DE ACOMPANHANTE DE GESTANTE C/ PERNOITE
      Return('0802010032');
  End If;
  If bSN_Parto Then
      Raise Saida;
  End If;
  If nIdade >= 18 And nIdade < 60 Then
      -- DIARIA DE ACOMPANHANTE ADULTO (COM PERNOITE)
      Return('0802010016');
  ElsIf  nIdade >= 60 Then
    -- Quando não houver configuração será lançado o procedimento abaixo.
    -- DIARIA DE ACOMPANHANTE DE IDOSOS C/ PERNOITE
    Return Nvl(Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_DIARIA_IDOSO(xml),'0802010040');
  ElsIf nIdade < 18 Then
  -- DIARIA DE ACOMPANHANTE CRIANCA/ADOLESCENTE C/PERNOITE
    Return('0802010024');
  End If;
  Raise Saida;
Exception
  When Saida Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_5)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_5', 'PKG_FFIS_M_LACTO_AIH_P321', 'Aviso: Problema na definição do procedimento da diária de acompanhante.'),false);
      Return(Null);
END;
FUNCTION F_DEFINE_PRC_DIARIA_ACOMPAN (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PRC_DIARIA_ACOMPAN_E(xml) THEN
				result:= F_DEFINE_PRC_DIARIA_ACOMPAN(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_PRC_DIARIA_ACOMPAN_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>OBRIGA_CBO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_OBRIGA_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento Varchar2) RETURN BOOLEAN IS
nAchou Number;
BEGIN
  Select Count(*)
    Into nAchou
    From Procedimento_SUS_CBO
   Where Cd_Procedimento = pProcedimento
     And Cd_CBOS Not In ('000001','000002')
     And SN_Ativo = 'S';
  If nAchou > 0 then
      Return(True);
  Else
      Return(False);
  End If;
END;
FUNCTION F_OBRIGA_CBO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_OBRIGA_CBO_E(xml) THEN
				result:= F_OBRIGA_CBO(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_OBRIGA_CBO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_INTERCORRENCIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_INTERCORRENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLancamento In Number) RETURN Boolean IS
nSN_Intercorrencia Number;
BEGIN
  Select Count(*)
       Into nSN_Intercorrencia
    From Reg_Fat
       , ItReg_Fat
       , Procedimento_SUS_Detalhe pDetal
   Where ItReg_Fat.Cd_Procedimento = pDetal.Cd_Procedimento
     And Reg_Fat.Cd_Reg_Fat = ItReg_Fat.Cd_Reg_Fat
     And pDetal.SN_AIH_Principal = 'S'
     And ItReg_Fat.SN_Proced_Realizado = 'N'
     And Reg_Fat.Cd_Reg_Fat      = pRegFat
     And ItReg_Fat.Cd_Lancamento = pLancamento;
        If nSN_Intercorrencia > 0 Then
            Return True;
        Else
            Return False;
        End If;
END;
FUNCTION F_INTERCORRENCIA (in_params in Clob, out_params out Clob) RETURN Boolean IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLancamento Number;
	result Boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLancamento:= PKG_XML.GetNumber(xml, 'pLancamento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_INTERCORRENCIA_E(xml) THEN
				result:= F_INTERCORRENCIA(xml, pRegFat, pLancamento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_INTERCORRENCIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_LANCA_APURAR_VALOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_LANCA_APURAR_VALOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in number) RETURN Number IS
Cursor cPrestador is select Nr_CNES
                            , SN_Cessao_Credito
                            , Tp_Vinculo
                            , Fnc_FFIS_Define_Tipo_Vinculo(Cd_Prestador) Cd_Tipo_Vinculo
                         From Prestador
                        Where Cd_Prestador = pPrestador;
  rPrestador cPrestador%RowType;
  nCredito   Number;
  Saida      Exception;
  Begin
  If pPrestador is Null Then
      Raise Saida;
  End If;
    Open  cPrestador;
    Fetch cPrestador into rPrestador;
  Close cPrestador;
  If rPrestador.Cd_Tipo_Vinculo in (1, 2) Then
    nCredito := 3;
  ELSIf rPrestador.Cd_Tipo_Vinculo = 3 Then
       IF rPrestador.Tp_Vinculo = 'J' THEN
       nCredito := 2;
       END IF;
       IF rPrestador.Tp_Vinculo <> 'J' THEN
            IF rPrestador.Nr_CNES IS NOT NULL THEN
                 nCredito := 4;
            ELSE
                 nCredito := 1;
            END IF;
       END IF;
  ELSE
       nCredito := NULL;
  END IF;
  If rPrestador.Tp_Vinculo = 'J' Then
      If rPrestador.Cd_Tipo_Vinculo not in (1,3) and rPrestador.NR_CNES is null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_6)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_6', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Atenção: Prestador %s, não possui Número de CNES em seu cadastro. Favor providenciar a referida informação.', arg_list(pPrestador)),true);
      End If;
  End if;
  Return nCredito;
Exception
      When Saida Then
        Return Null;
End;
FUNCTION F_LANCA_APURAR_VALOR (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pPrestador number;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pPrestador:= PKG_XML.Getnumber(xml, 'pPrestador');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_LANCA_APURAR_VALOR_E(xml) THEN
				result:= F_LANCA_APURAR_VALOR(xml, pPrestador);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_LANCA_APURAR_VALOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_DIAS_DIFERENCA_UNIFICACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pnCdRegFat    In Number) RETURN Number IS
Cursor cDiasDiferenca is
    Select qt_retirar
      From conta_unificada
     where cd_reg_fat = pnCdRegFat;
  nQtdRetirar        Itreg_fat.qt_lancamento%type;
BEGIN
  Open  cDiasDiferenca;
  Fetch cDiasDiferenca Into nQtdRetirar;
  Close cDiasDiferenca;
  Return nvl(nQtdRetirar, 0);
END;
FUNCTION F_DIAS_DIFERENCA_UNIFICACAO (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pnCdRegFat Number;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pnCdRegFat:= PKG_XML.GetNumber(xml, 'pnCdRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DIAS_DIFERENCA_UNIFICACAO_E(xml) THEN
				result:= F_DIAS_DIFERENCA_UNIFICACAO(xml, pnCdRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DIAS_DIFERENCA_UNIFICACAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_RETORNA_DETAL_GESTOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_RETORNA_DETAL_GESTOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Number, pId_Critica Varchar2) RETURN Varchar2 IS
Cursor cP_Menor Is Select p.cd_procedimento                            cd_procedimento
                          , p.nr_dias_internacao                         nr_dias_internacao
                          , trunc(r.dt_final) - trunc(r.dt_inicio)       nr_dias_conta
                          , trunc(p.nr_dias_internacao/2)                nr_media_procedimento
                          , r.cd_mot_alt                                 cd_mot_alt
                          , p.ds_procedimento                            ds_procedimento
                          , m.ds_motivo                                  ds_mot_alt
                       From ItReg_Fat           i
                          , Reg_Fat             r
                          , Procedimento_SUS    p
                          , Motivo_Cobranca_SUS m
                          , (Select p.cd_procedimento
                                  , Max(p.nr_dias_internacao) nr_dias_internacao
                               From ItReg_Fat i
                                  , Procedimento_SUS p
                              Where i.cd_procedimento     = p.cd_procedimento
                                and i.cd_reg_fat          = pReg_Fat
                                and i.sn_proced_realizado = 'S'
                                and i.sn_pertence_pacote  = 'N'
                              Group By p.Cd_Procedimento) MxDias
                     Where i.cd_procedimento        = p.cd_procedimento
                       and r.cd_reg_fat             = i.cd_reg_fat
                       and r.cd_mot_alt             = m.cd_motivo
                       and MxDias.Cd_Procedimento   = p.Cd_Procedimento
                       and i.cd_reg_fat             = pReg_Fat
                       and i.sn_proced_realizado    = 'S'
                       and i.sn_pertence_pacote     = 'N'
                     Order By p.nr_dias_internacao desc;
  rP_Menor  cP_Menor%RowType;
  pMessage     Varchar2(2000);
  nI           Number;
  vPeriodo   Varchar2(20);
BEGIN
  Open cP_Menor;
    Fetch cP_Menor Into rP_Menor;
  Close cP_Menor;
  If pId_Critica In ('SN_ID_MAIOR','SN_ID_MENOR','SN_PERM_MENOR') Then
    pMessage:= 'crítica referente ao corpo da conta.'||Chr(10);
  Else
    pMessage:= 'crítica referente aos itens da conta.'||Chr(10);
  End If;
  If pId_Critica In ('SN_ID_MENOR','SN_ID_MAIOR') Then
    for rIdMimMax in (select i.cd_procedimento                            cd_procedimento
                           , s.ds_procedimento                            ds_procedimento
                           , trunc((r.dt_inicio-p.dt_nascimento)/365,0)   idade
                           , s.nr_idade_minima                            nr_idade_minima
                           , s.nr_idade_maxima                            nr_idade_maxima
                        from itreg_fat        i
                           , procedimento_sus s
                           , reg_fat          r
                           , atendime         a
                           , paciente         p
                       where i.cd_procedimento     = s.cd_procedimento
                         and r.cd_reg_fat          = i.cd_reg_fat
                         and a.cd_atendimento      = r.cd_atendimento
                         and p.cd_paciente         = a.cd_paciente
                         and i.sn_proced_realizado = 'S'
                         and i.sn_pertence_pacote  = 'N'
                         and r.cd_multi_empresa    = xml.multiEmpresa
                         and a.cd_multi_empresa    = r.cd_multi_empresa
                         and i.cd_reg_fat          = pReg_Fat) loop
      If pId_Critica = 'SN_ID_MENOR' And rIdMimMax.idade < rIdMimMax.nr_idade_minima Then
        If rIdMimMax.nr_idade_minima = 0 Then
             vPeriodo:= '12 meses';
        Else
             vPeriodo:= rIdMimMax.nr_idade_minima ||' anos';
        End If;
        pMessage:= pMessage||Chr(10)||
                   'Idade do paciente ('||rIdMimMax.Idade||' anos) inferior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Procedimento||' '||rIdMimMax.ds_procedimento||'), mínimo: '||vPeriodo||'.'||Chr(10);
      End If;
      If pId_Critica = 'SN_ID_MAIOR' And rIdMimMax.idade > rIdMimMax.nr_idade_maxima Then
        If rIdMimMax.nr_idade_maxima = 0 Then
             vPeriodo:= '12 meses';
        Else
             vPeriodo:= rIdMimMax.nr_idade_maxima ||' anos';
        End If;
        pMessage:= pMessage||Chr(10)||
                   'Idade do paciente ('||rIdMimMax.Idade||' anos) superior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Procedimento||' '||rIdMimMax.ds_procedimento||'), máximo: '||vPeriodo||'.'||Chr(10);
      End If;
    End Loop;
  End If;
--|Referente ao realizado 0415020026|-------------------------------------------------------------------------------------
  If pId_Critica In ('SN_ID_MENOR','SN_ID_MAIOR') And Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pReg_Fat) = '0415020026' Then
    for rIdMimMax in (Select trunc((r.dt_inicio-p.dt_nascimento)/365,0)   idade
                           , r.cd_procedimento_realizado                  cd_realizado
                           , e.nr_idade_minima                            nr_idade_min_exc
                           , e.nr_idade_maxima                            nr_idade_max_exc
                           , e.ds_procedimento                            ds_realizado
                        from procedimento_sus e
                           , reg_fat          r
                           , atendime         a
                           , paciente         p
                       where a.cd_atendimento      = r.cd_atendimento
                         and p.cd_paciente         = a.cd_paciente
                         and e.cd_procedimento     = r.cd_procedimento_realizado
                         and r.cd_multi_empresa    = xml.multiEmpresa
                         and a.cd_multi_empresa    = r.cd_multi_empresa
                         and r.cd_reg_fat          = pReg_Fat) loop
        If pId_Critica = 'SN_ID_MENOR' And rIdMimMax.idade < rIdMimMax.nr_idade_min_exc Then
          If rIdMimMax.nr_idade_min_exc = 0 Then
               vPeriodo:= '12 meses';
          Else
               vPeriodo:= rIdMimMax.nr_idade_min_exc ||' anos';
          End If;
          pMessage:= pMessage||Chr(10)||
                     'Idade do paciente ('||rIdMimMax.Idade||' anos) inferior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Realizado||' '||rIdMimMax.Ds_Realizado||'), mínimo: '||vPeriodo||'.'||Chr(10);
      End If;
        If pId_Critica = 'SN_ID_MAIOR' And rIdMimMax.idade > rIdMimMax.nr_idade_max_exc Then
          If rIdMimMax.nr_idade_max_exc = 0 Then
               vPeriodo:= '12 meses';
          Else
                vPeriodo:= rIdMimMax.nr_idade_max_exc ||' anos';
          End If;
          pMessage:= pMessage||Chr(10)||
                     'Idade do paciente ('||rIdMimMax.Idade||' anos) superior ao permitido pelo procedimento realizado ('||rIdMimMax.Cd_Realizado||' '||rIdMimMax.Ds_Realizado||'), máximo: '||vPeriodo||'.'||Chr(10);
        End If;
    End Loop;
  End If;
--|Fim|---------------------------------------------------------------------------------------------------------------------
  If pId_Critica = 'SN_PERM_MENOR' Then
    -- Soma-se o dia da alta para o motivos de permanência e transferência
    If Substr(rP_Menor.Cd_Mot_Alt, 1, 1) in ('2','3') Then
      rP_Menor.nr_dias_conta := rP_Menor.nr_dias_conta + 1;
    End If;
    If rP_Menor.nr_dias_conta = 0 Then
      rP_Menor.nr_dias_conta := 1;
    End If;
    pMessage:= pMessage||Chr(10)||
               'Permanência da conta ('||rP_Menor.nr_dias_conta||' dia(s)) não atingiu o mímimo de dias necessário para o procedimento ('||rP_Menor.cd_procedimento||' '||rP_Menor.ds_procedimento||').'
               ||' mínimo de dias exigido: '||rP_Menor.nr_media_procedimento||' dia(s).'
               ||Chr(10)||Chr(10)
               ||'Motivo de alta da conta: '||rP_Menor.cd_mot_alt||'-'||rP_Menor.ds_mot_alt||'.'||Chr(10);
  End If;
  If pId_Critica = 'SN_QTD' Then
    pMessage:= pMessage||Chr(10)||
               'Quantidade do(s) procedimento(s) listado(s) abaixo excede a quantidade máxima permitido pelo(s) mesmo(s):'||Chr(10)||Chr(10);
    pMessage:= pMessage||'  Procedimento  DESCRIÇÃO                        QtMax   QtLacto'||Chr(10);
    pMessage:= pMessage||'  --------------------------------------------------------------'||Chr(10);
    Begin
      nI:= 0;
      for rQtd in (select i.cd_procedimento
                          , decode(p.qt_maxima,Null,1,0,1,p.qt_maxima) qt_maxima
                          , p.ds_procedimento
                          , sum(i.qt_lancamento) total_lacto
                       from itreg_fat                i
                          , procedimento_sus_detalhe d
                          , procedimento_sus         p
                      where d.cd_procedimento           = i.cd_procedimento
                        and p.cd_procedimento           = d.cd_procedimento
                        and p.cd_procedimento           = i.cd_procedimento
                        and d.sn_pode_execede_qt_maxima = 'S'
                        and i.cd_reg_fat                = pReg_fat
                        and p.cd_procedimento not in ('0801010047')
                        and nvl(p.qt_maxima,0) > 0
                        and ( d.sn_aih_especial           = 'S' or
                              d.sn_aih_secundario         = 'S'
                             OR (d.SN_AIH_Principal    = 'S' AND
                                 d.SN_Proced_Cirurgico = 'N' AND
                                 d.SN_Pago_Por_Dia     = 'N'
                                )
                            )
                      group by i.cd_procedimento
                             , p.qt_maxima
                             , p.ds_procedimento
                        having sum(i.qt_lancamento) > decode(p.qt_maxima,Null,1,0,1,p.qt_maxima)) loop
        nI:= nI+1;
        pMessage:= pMessage||'  '||nI||' '|| rQtd.cd_procedimento ||'  '||Rpad(Substr(rQtd.Ds_Procedimento,1,30),30,' ')||'      '||lpad(rQtd.qt_maxima,2,0)||'        '||lpad(rQtd.total_lacto,2,0)||Chr(10);
      end loop;
    End;
  End If;
  If pId_Critica = 'SN_CBO' Then
    pMessage:= pMessage||Chr(10)||
              'Existe(m) lançamento(s) de CBO(s) incompatível(is) com procedimento, verifique a lista abaixo:'||Chr(10)||Chr(10);
    pMessage:= pMessage||'  Procedimento  DESCRIÇÃO                                CBO    '||Chr(10);
    pMessage:= pMessage||'  --------------------------------------------------------------'||Chr(10);
    Declare
      Cursor cDadosCirurgiao (p1 Number)Is Select Cd_Prestador
                                                , Cd_CBO_Prestador
                                             From ItLan_Med
                                            Where Cd_Reg_Fat    = pReg_Fat
                                              And Cd_Lancamento = p1
                                              And Cd_Ati_Med    = '01';
      nControle       Number;
      nContNaoAC         Number;
      nSN_ADMITE_QUALQUER_CBO Number;
      rDadosCirurgiao cDadosCirurgiao%RowType;
      nI Number:=0;
      dCompetencia date; -- pda 458216
      P_message  VARCHAR2(500);
    Begin
      for rCBO in (select i.cd_lancamento                              cd_lancamento
                            , i.cd_procedimento                          cd_procedimento
                            , p.cd_prestador                             cd_prestador
                            , Decode(Nvl(i.cd_ati_med,m.cd_ati_med)
                              ,'01', Nvl(i.cd_ati_med,m.cd_ati_med)
                              ,'02', m.cd_ati_med
                              ,'03', m.cd_ati_med
                              ,'04', m.cd_ati_med
                              ,'05', m.cd_ati_med
                              ,'06', m.cd_ati_med,null) cd_ati_med
                            , Nvl(i.cd_cbo_prestador,m.cd_cbo_prestador) cd_cbo_prestador
                            , d.sn_exige_equipe_medica
                            , a.ds_procedimento
                            , r.nr_identificacao
                            , r.dt_inicio
                            , r.dt_final
                            , i.dt_lancamento
                         from itreg_fat i
                            , reg_fat r
                            , itlan_med m
                            , procedimento_detalhe_vigencia d
                            , prestador p
                            , procedimento_sus a
                        where i.cd_reg_fat      = m.cd_reg_fat(+)
                          and i.cd_lancamento   = m.cd_lancamento(+)
                          and p.cd_prestador    = decode(i.cd_prestador,null,m.cd_prestador
                                                        ,decode(fnc_ffis_prestador_exportacao(i.cd_reg_fat,i.cd_lancamento),0
                                                        ,i.cd_prestador,fnc_ffis_prestador_exportacao(i.cd_reg_fat,i.cd_lancamento)))
                          and i.cd_procedimento = d.cd_procedimento
                          and dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(r.nr_identificacao, r.dt_inicio, r.dt_final, i.dt_lancamento)
                              between d.dt_validade_inicial
                              and nvl(d.dt_validade_final, dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(r.nr_identificacao, r.dt_inicio, r.dt_final, i.dt_lancamento))
                          and a.cd_procedimento = d.cd_procedimento
                          and i.sn_pertence_pacote = 'N'
                          and d.sn_exige_cpf_cbo   = 'S'
                          and i.cd_reg_fat         = r.cd_reg_fat
                          and i.cd_reg_fat         = pReg_Fat) loop
        -- Procedimento x CBO
        nControle:= 0;
        --
        dCompetencia := dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(rCBO.nr_identificacao, rCBO.dt_inicio, rCBO.dt_final, rCBO.dt_lancamento);
        select Count(*)
          into nControle
          from dbamv.procedimento_cbo_vigencia
         where cd_procedimento = rCBO.cd_procedimento
           and cd_cbo          = rCBO.cd_cbo_prestador
           and trunc(dCompetencia, 'MM') between dt_validade_inicial
                                         and nvl(dt_validade_final, trunc(dCompetencia, 'MM'));
/*
        select Count(*)
          into nControle
          from procedimento_sus_cbo
         where cd_procedimento = rCBO.cd_procedimento
           and cd_cbos         = rCBO.cd_cbo_prestador
           and sn_ativo        = 'S';
*/
        -- Aplico um no controle quando a atividade for anestesista e CBO 223104 ------------------------------
        if nvl(rCBO.cd_cbo_prestador,'0') IN ('223104','225151') and Nvl(rCBO.cd_ati_med,'00') = '06' then
          nControle:= 1;
        end if;
        -------------------------------------------------------------------------------------------------------
        -- Aplico um no controle quando a atividade for auxiliares e CBO iniciar pelos quatro -----------------
        -- dígitos do CBO do cirurgião
        if rCBO.sn_exige_equipe_medica = 'S' and Nvl(rCBO.cd_ati_med,'00') in ('02','03','04','05') then
        --[ início PDA 460989 ]
        /*open cDadosCirurgiao(record.cd_lancamento);
          fetch cDadosCirurgiao into rDadosCirurgiao;
        close cDadosCirurgiao;
        if substr(nvl(record.cd_cbo_prestador,'0'),1,4) = substr(nvl(rDadosCirurgiao.cd_cbo_prestador,'0'),1,4) then
            nControle:= 1;
        end if;
        */
        P_message := null;
        dbamv.pkg_sus_regra_cbo.p_valida_ato_medico_cbo_aux( rCBO.cd_ati_med
                                                           , pReg_Fat
                                                           , rCBO.cd_lancamento
                                                           , rCBO.cd_procedimento
                                                           , rCBO.cd_cbo_prestador
                                                           , Trunc(dCompetencia, 'MM')
                                                           , P_message );
        if P_message is null then
            nControle:= 1;
        end if;
        --[ Fim PDA 460989 ]
      end if;
        ---------------------------------------------------------------------------------------------------------
        if nControle = 0 and rCBO.cd_cbo_prestador is not null Then
          select count(procedimento_sus_complexidade.cd_procedimento)
            into nContNaoAC
            from procedimento_sus_complexidade
           where procedimento_sus_complexidade.cd_procedimento = rCBO.cd_procedimento
             and procedimento_sus_complexidade.sn_ativo = 'S'
             and procedimento_sus_complexidade.tp_complexidade_procedimento <> 'AC';
          select count(procedimento_sus_detalhe.cd_procedimento)
            into nSN_ADMITE_QUALQUER_CBO
            from procedimento_sus_detalhe
           where procedimento_sus_detalhe.sn_admite_qualquer_cbo = 'S'
             and procedimento_sus_detalhe.cd_procedimento = rCBO.cd_procedimento;
          -- Se o procedimento não for da alta complexidade e não admite qualquer CBO
          if ( nContNaoAC > 0 ) and ( nSN_ADMITE_QUALQUER_CBO = 0 ) then
            nI:= nI+1;
            pMessage:= pMessage||'  '||nI||' '|| rCBO.cd_procedimento ||'  '||Rpad(Substr(rCBO.Ds_Procedimento,1,39),39,' ')||'  '||rCBO.Cd_CBO_Prestador||Chr(10);
          end if;
        end if;
      End Loop;
    End;
  End If;
  pMessage:= pMessage||Chr(10)||'Verifique a possibilidade de inconsistências no lançamento dos dados antes de autorizar.';
  Return(pMessage);
END;
FUNCTION F_RETORNA_DETAL_GESTOR (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
	xml PKG_XML.XmlContext;
	pReg_Fat Number;
	pId_Critica Varchar2(4000);
	result Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pReg_Fat:= PKG_XML.GetNumber(xml, 'pReg_Fat');
		pId_Critica:= PKG_XML.GetVarchar2(xml, 'pId_Critica');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_RETORNA_DETAL_GESTOR_E(xml) THEN
				result:= F_RETORNA_DETAL_GESTOR(xml, pReg_Fat, pId_Critica);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_RETORNA_DETAL_GESTOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN Number IS
nDiasUTI Number;
BEGIN
         Select Sum(Qt_Lancada) Qt_Lancamento
          Into nDiasUTI
          From Diaria_UTI_SUS
         Where Cd_Reg_Fat = pRegFat;
  Return Nvl(nDiasUTI,0);
END;
FUNCTION F_GET_DIAS_UTI (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_UTI_E(xml) THEN
				result:= F_GET_DIAS_UTI(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_UTI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_CLINICO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_CLINICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pNrIdentificacao in varchar2,pDtInicio in date, pDtFinal in date) RETURN Number IS
Cursor cDiasClinico Is Select Sum(nvl(it.qt_lancamento,0))
                           from itreg_fat it
                              , procedimento_detalhe_vigencia pd
                          where pd.cd_procedimento = it.cd_procedimento
                            and dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(pNrIdentificacao, pDtInicio, pDtFinal, it.dt_lancamento)
                                BETWEEN pd.dt_validade_inicial
                                AND Nvl(pd.dt_validade_final, dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(pNrIdentificacao, pDtInicio, pDtFinal, it.dt_lancamento))
                            and pd.sn_proced_cirurgico     = 'N'
                            And it.sn_proced_realizado = 'S'
                            and it.cd_reg_fat          = pRegFat;
  nQtd_cli Number;
BEGIN
  Open cDiasClinico;
    Fetch cDiasClinico Into nQtd_cli;
  Close cDiasClinico;
  Return nvl(nQtd_cli,1);
END;
FUNCTION F_GET_DIAS_CLINICO (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pNrIdentificacao varchar2(1);
	pdtInicio date;
	pDtFinal date;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pNrIdentificacao:= PKG_XML.GetVarchar2(xml, 'pNrIdentificacao');
		pDtInicio := PKG_XML.GetDate(xml, 'pDtInicio');
		pDtFinal := PKG_XML.GetDate(xml, 'pDtFinal');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_CLINICO_E(xml) THEN
				result:= F_GET_DIAS_CLINICO(xml, pRegFat,pNrIdentificacao,pDtInicio,pDtFinal);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_CLINICO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_INTERNACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
FUNCTION F_GET_DIAS_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pTipo In Varchar2 Default 'C', reg_fat IN OUT NOCOPY REG_FATRec) RETURN Number IS
CURSOR cDados Is
  SELECT TRUNC(Dt_Inicio)       Dt_Inicio
       , TRUNC(Dt_Final)        Dt_Final
       , Cd_Mot_Alt             Cd_Motivo
       , tp_modalidade_atendimento
	   , Cd_Procedimento_Realizado
    FROM Reg_Fat
   WHERE Cd_Reg_Fat = pRegFat;

   rDados          cDados%RowType;
   nDias_Cobranca  Number;
   nDias_Periodo   Number;
   nDias_Unificado Number;
   vProcedimento   Varchar2(10);
   bPgDIA          Boolean;
   bPgDIA_Util     Boolean;
  /*Tipo do calculo****************************************************/
  /*  pTipo = 'N' Retorna o calculo normal.                           */
  /*  pTipo = 'C' Considera o motivo e soma um dia quando necessário. */
  /*  pTipo = 'U' Calculo especifico para os dias de UTI.             */
  /*  pTipo = 'D' Calculo especifico para DA                          */
  /*  pTipo = 'P' Calculo especifico para PM                          */ -- OP: 3622 início/Fim.
  /* ******************************************************************/
BEGIN
   Open  cDados;
   Fetch cDados Into rDados;
   Close cDados;
   IF rDados.Dt_Final IS NOT NULL THEN
    nDias_Periodo   := rDados.Dt_Final - rDados.Dt_Inicio;
    nDias_Unificado := Pkg_ffis_M_LACTO_AIH_P321.F_DIAS_DIFERENCA_UNIFICACAO(xml, REG_FAT.CD_REG_FAT);
    If rDados.Cd_Motivo is Null Or pTipo = 'N' then
        Return nDias_Periodo - nDias_Unificado;
    -- PDA 550328 início.
    Elsif pTipo in ('D') Then
      If  Substr(rDados.Cd_Motivo,1,1) In ('2','3','4')    OR
          NVL(rDados.tp_modalidade_atendimento, ' ') = 'H' OR
		  DBAMV.FNC_FFIS_CHECA_REGRA_SUS('10036', rDados.Cd_Procedimento_Realizado,TRUNC(rDados.Dt_Final, 'MM')) = 'S' Then -- OP 30932
        nDias_Cobranca := ((nDias_Periodo) + 1 ) - nDias_Unificado;
      Else
        nDias_Cobranca := nDias_Periodo - nDias_Unificado;
      End If;
      Return nDias_Cobranca;
    -- OP: 3622 início.
    Elsif pTipo in ('P') Then
      If  (Substr(rDados.Cd_Motivo,1,1) In ('2','3','4') OR rDados.Cd_Motivo in ('65', '66','67')) Then
        nDias_Cobranca := ((nDias_Periodo) + 1 ) - nDias_Unificado;
      Else
        nDias_Cobranca := nDias_Periodo - nDias_Unificado;
      End If;
      Return nDias_Cobranca;
   -- OP: 3622 Fim.
    Elsif pTipo in ('U') Then
     If  (rDados.Cd_Motivo In ('27','25') Or Substr(rDados.Cd_Motivo,1,1) In ('3','4')) Then
       nDias_Cobranca := ((nDias_Periodo) + 1 ) - nDias_Unificado;
     Else
       nDias_Cobranca := nDias_Periodo - nDias_Unificado;
     End If;
     Return nDias_Cobranca;
   -- PDA 550328 Fim.
    Elsif pTipo = 'C' Then
      vProcedimento:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat);
      bPgDIA      := Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PAGO_POR_DIA(xml, vProcedimento);
      bPgDIA_Util := Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PAGO_POR_DIA_UTIL(xml, vProcedimento);
      --If (pkg_ffis_m_lacto_aih_p321.f_f_sn_pago_por_dia(xml,vProcedimento)) Then
      If bPgDIA_Util Then
         nDias_Periodo:=  dbamv.Pack_SUS.Fnc_SUS_Dias_Do_Periodo(rDados.Dt_Inicio, rDados.Dt_Final, TRUE); -- pda 532349
         IF to_char(rDados.Dt_Final, 'D') NOT IN ('1','7') THEN
           nDias_Periodo := nDias_Periodo + 1; -- adiciona último dia
         END IF;
      --Else
      ElsIf Not bPgDIA_Util And bPgDIA Then
         nDias_Periodo:=  dbamv.Pack_SUS.Fnc_SUS_Dias_Do_Periodo(rDados.Dt_Inicio, rDados.Dt_Final, FALSE); -- pda 532349
         If Substr(rDados.Cd_Motivo,1,1) In ('2','3','4') Then
           nDias_Periodo := nDias_Periodo + 1; -- adiciona último dia
         END IF;
      Else
         nDias_Periodo := 1;
      End If;
      nDias_Cobranca := (nDias_Periodo) - nDias_Unificado;
      If nDias_Cobranca < 1 Then
         nDias_Cobranca := 1;
      End if;
      Return nDias_Cobranca;
    Else
      Return nDias_Periodo;
    End if;
  ELSE
    RETURN 0;
  END IF;
END;
FUNCTION F_GET_DIAS_INTERNACAO (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pTipo Varchar2(4000);
	reg_fat REG_FATRec;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pTipo:= PKG_XML.GetVarchar2(xml, 'pTipo');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_INTERNACAO_E(xml) THEN
				result:= F_GET_DIAS_INTERNACAO(xml, pRegFat, pTipo, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_INTERNACAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_DEFINE_ATI_MED_ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_ATI_MED_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, pCompet in Date) RETURN Varchar2 IS
BEGIN
 --------------------------------------------------------------------------
 -- Carrega atividade médica 01 quando o procedimento exigir equipe médica
 -- sem anestesista e prestadores auxiliares.
 -- Saulo Rocha - PDA 289672 - 28/05/2009
 --------------------------------------------------------------------------
  for record in (select nvl(d.sn_exige_equipe_medica,'N') sn_equipe
                      , nvl(d.nr_auxiliar,0)              nr_auxiliar
                      , nvl(p.sn_ato_anestesico,'N')      sn_ato_anestesico
                   from procedimento_sus         p
                      , procedimento_detalhe_vigencia d
                  where p.cd_procedimento                 = d.cd_procedimento
                    and p.cd_procedimento                 = pProcedimento
                    and nvl(d.nr_auxiliar,0)              = 0
                    and nvl(p.sn_ato_anestesico,'N')      = 'N'
                    and pCompet BETWEEN d.dt_validade_inicial
                                    AND Nvl(d.dt_validade_final, pCompet)
                    and nvl(d.sn_exige_equipe_medica,'N') = 'S') loop
    Return '01';
  end loop;
  Return '';
END;
FUNCTION F_DEFINE_ATI_MED_ITEM (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result Varchar2(4000);
	pCompet Date;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCompet := PKG_XML.GetVarchar2(xml, 'pCompet');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_ATI_MED_ITEM_E(xml) THEN
				result:= F_DEFINE_ATI_MED_ITEM(xml, pProcedimento, pCompet);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_ATI_MED_ITEM_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_ITEM_CENTRO_CIRURGICO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_ITEM_CENTRO_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento in Varchar2) RETURN Boolean IS
nAchou Number;
BEGIN
    Select Count(*)
     Into nAchou
     From itreg_Fat
    Where Cd_Procedimento = pProcedimento
      And cd_mvto is not null
      And tp_mvto = 'Cirurgia'
      And cd_reg_fat = pRegFat;
   If nvl(nAchou,0) > 0  Then
        Return True;
   End If;
   Return False;
END;
FUNCTION F_ITEM_CENTRO_CIRURGICO (in_params in Clob, out_params out Clob) RETURN Boolean IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento Varchar2(4000);
	result Boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_ITEM_CENTRO_CIRURGICO_E(xml) THEN
				result:= F_ITEM_CENTRO_CIRURGICO(xml, pRegFat, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_ITEM_CENTRO_CIRURGICO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_CONTA_CIR_MULTIPLA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_CONTA_CIR_MULTIPLA (xml IN OUT NOCOPY PKG_XML.XmlContext
                                    ,pProcedimento In Varchar2 Default ''
                                    ,pCompet in Date) RETURN Boolean IS
Cursor cDadosProc Is Select SN_Cirurgia_Multipla
                           From Procedimento_Detalhe_vigencia pd
                          Where pd.Cd_Procedimento = pProcedimento
                            AND pCompet BETWEEN pd.dt_validade_inicial
                                            AND Nvl(pd.dt_validade_final, pCompet);
  vSN_Multipla Varchar2(1);
BEGIN
  -- Se for passado algum procedimento o teste será feito em cima dele
  -- se o procedimento for de cir. multipla, retorna TRUE.
  If pProcedimento Is Not Null Then
    Open cDadosProc;
      Fetch cDadosProc Into vSN_Multipla;
    Close cDadosProc;
      If vSN_Multipla = 'S' AND pProcedimento <> '0308010043' Then
          Return True;
      End if;
  End If;
  Return False;
END;
FUNCTION F_F_CONTA_CIR_MULTIPLA (in_params in Clob, out_params out Clob) RETURN Boolean IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento Varchar2(4000);
	pCompet date;
	result Boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCompet:= PKG_XML.GetDate(xml, 'pCompet');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_CONTA_CIR_MULTIPLA_E(xml) THEN
				result:= F_F_CONTA_CIR_MULTIPLA(xml, pProcedimento,pCompet);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_CONTA_CIR_MULTIPLA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PROC_PACOTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PROC_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Varchar2 IS
Cursor cPct Is Select SN_Procedimento_Faturado
                   From Procedimento_SUS_Detalhe
                  Where Cd_Procedimento = pProcedimento;
  vSN_P_Faturado Varchar2(1);
BEGIN
    Open cPct;
      Fetch cPct Into vSN_P_Faturado;
    Close cPct;
  If pProcedimento Is Not Null And Nvl(vSN_P_Faturado,'S') = 'N' Then
    Return 'S';
  Else
    Return 'N';
  End if;
END;
FUNCTION F_GET_PROC_PACOTE (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_PACOTE_E(xml) THEN
				result:= F_GET_PROC_PACOTE(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_PACOTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN IS
Cursor cSN_UTI Is Select SN_Diaria_UTI
                        From Procedimento_SUS_Detalhe
                       WHere Cd_Procedimento = pProcedimento;
  vSN_UTI Varchar2(1);
BEGIN
  Open cSN_UTI;
    Fetch cSN_UTI Into vSN_UTI;
  Close cSN_UTI;
  If vSN_UTI = 'S' Then
    Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_SN_UTI (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_UTI_E(xml) THEN
				result:= F_F_SN_UTI(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_UTI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_OPM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean IS
Cursor cOPM Is Select Nvl(pDetal.SN_Ortese_Protese,'N')       SN_OPM
                   From Procedimento_SUS                  pSUS
                      , Procedimento_SUS_Detalhe          pDetal
                  Where pSUS.Cd_Procedimento = pDetal.Cd_Procedimento
                    And pSUS.Cd_Procedimento = pProcedimento;
  vOPM Varchar2(1);
BEGIN
  Open  cOPM;
    Fetch cOPM Into vOPM;
  Close cOPM;
  If vOPM = 'S' Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_OPM (in_params in Clob, out_params out Clob) RETURN Boolean IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result Boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_OPM_E(xml) THEN
				result:= F_F_SN_OPM(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_OPM_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_ABRE_EQUIPE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_ABRE_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN Boolean IS
vSN_ExgEquipe   Varchar2(1);
  nAuxiliares     Varchar2(1);
  vSN_Anestesista Varchar2(1);
BEGIN
  Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, pProcedimento
                       ,vSN_ExgEquipe
                       ,nAuxiliares
                       ,vSN_Anestesista);
  If vSN_ExgEquipe = 'S' Then
    If nAuxiliares > 0 Or  vSN_Anestesista = 'S' Then
      Return True;
    End If;
  End If;
  Return False;
END;
FUNCTION F_F_SN_ABRE_EQUIPE (in_params in Clob, out_params out Clob) RETURN Boolean IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result Boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ABRE_EQUIPE_E(xml) THEN
				result:= F_F_SN_ABRE_EQUIPE(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ABRE_EQUIPE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_PROC_CIRURGICO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_PROC_CIRURGICO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN IS
Cursor cDadosProc Is Select Nvl(SN_Proced_Cirurgico,'N') SN_Proced_Cirurgico
                         From Procedimento_SUS_Detalhe
                        Where Cd_Procedimento = pProcedimento;
  vSNProcCir    varchar(1);
BEGIN
    Open cDadosProc;
      Fetch cDadosProc Into vSNProcCir;
    Close cDadosProc;
  If vSNProcCir = 'S' Then
      Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_SN_PROC_CIRURGICO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PROC_CIRURGICO_E(xml) THEN
				result:= F_F_SN_PROC_CIRURGICO(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PROC_CIRURGICO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_DEFINE_VINCULO_CREDITO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_DEFINE_VINCULO_CREDITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pData in Date, pPrestador in Number,pTpCredito in Number) RETURN Number IS
cursor cPrestador is select nr_cnes
                            , sn_cessao_credito
                            , tp_vinculo
                            , nr_cpf_cgc
                         from prestador
                        where cd_prestador = pPrestador;
  Cursor cDadosProc Is Select SN_Hemoterapia
                         From Procedimento_Detalhe_Vigencia -- PDA 551096
                        Where Cd_Procedimento = pProcedimento
                          And TRUNC(pData, 'MM') BETWEEN dt_validade_inicial AND NVL(dt_validade_final, TRUNC(pData, 'MM'));
  rDadosProc  cDadosProc%RowType;
  rPrestador  cPrestador%RowType;
  Saida       Exception;
  nCdVinculo  Number;
Begin
    If pProcedimento Is Null Then
        Raise Saida;
    End If;
    Open  cPrestador;
      Fetch cPrestador Into rPrestador;
    Close cPrestador;
    Open cDadosProc;
      Fetch cDadosProc Into rDadosProc;
  Close cDadosProc;
/*
-- Recupera o valor vigente do procedimento -------------------------
  Dbamv.Prc_SUS_Valor_Vigente (pProcedimento
                              ,pData
                              ,'I'
                              ,nQtPtos
                              ,nVlSH
			  					            ,nVlSP
				  				            ,nVlSA
					  			            ,nVlTotal);
	---------------------------------------------------------------------
*/
    If pTpCredito = 1 Then
        If length(rPrestador.Nr_Cpf_Cgc) > 11 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_7)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_7', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não possui um CPF em seu cadastro.%sAção: Verifique o cadastro dos prestadores.', arg_list(chr(10))),true);
        Else
            nCdVinculo:= 3;
        End if;
      If rDadosProc.SN_Hemoterapia = 'S' And Length(rPrestador.Nr_Cpf_Cgc) <= 11 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_8)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_8', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimentos de Hemoterapia não podem ser apurado para pessoa física.'),true);
      End If;
    End if;
    --
    If pTpCredito = 2 Then
        If rPrestador.Tp_Vinculo <> 'J' Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_9)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_9', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado como Pessoa Juridica.'),true);
        Elsif rPrestador.NR_CNES is null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_10)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_10', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não possui CNES em seu cadastro.'),true);
        Else
            nCdVinculo:= 3;
        End if;
  End if;
  --
    If pTpCredito = 3 And Fnc_FFIS_Define_Tipo_Vinculo(pPrestador) <> 1 Then
    nCdVinculo:= 2;
    End If;
    If pTpCredito = 3 And Fnc_FFIS_Define_Tipo_Vinculo(pPrestador) = 1 Then
    nCdVinculo:= 1;
    End If;
    If pTpCredito = 4 Then
      If rPrestador.NR_CNES is null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_10)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_10', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não possui CNES em seu cadastro.'),true);
      Else
        nCdVinculo:= 3;
      End if;
    End if;
    --
    If (dbamv.pkg_ffis_calc_aih.fnc_sus_max_valor_sp(pProcedimento,nvl(pData,sysdate)) = 0
        And dbamv.pkg_ffis_calc_aih.fnc_sus_max_valor_pontos(pProcedimento,nvl(pData,sysdate)) =0)
        And pTpCredito = 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_11)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_11', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento (%s) não permite apurar valor para o Profissional.', arg_list(pProcedimento)),true);
    End if;
  Return nCdVinculo;
End;
FUNCTION F_DEFINE_VINCULO_CREDITO (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pData Date;
	pPrestador Number;
	pTpCredito Number;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pData:= PKG_XML.GetDate(xml, 'pData');
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		pTpCredito:= PKG_XML.GetNumber(xml, 'pTpCredito');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_VINCULO_CREDITO_E(xml) THEN
				result:= F_DEFINE_VINCULO_CREDITO(xml, pProcedimento, pData, pPrestador, pTpCredito);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_DEFINE_VINCULO_CREDITO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_LAQUEADURA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_LAQUEADURA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2) RETURN BOOLEAN IS
Cursor cLaqueadura is    Select Nvl(SN_Laqueadura,'N') SN_Laqueadura
                          From Procedimento_SUS_Detalhe
                         Where Cd_Procedimento = pProcedimento;
    vSnLaqueadura varchar2(1);
Begin
    Open cLaqueadura;
      Fetch cLaqueadura Into vSnLaqueadura;
    Close cLaqueadura;
  If vSnLaqueadura = 'S' Then
      Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_LAQUEADURA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_LAQUEADURA_E(xml) THEN
				result:= F_F_LAQUEADURA(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_LAQUEADURA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_TOTAL_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_TOTAL_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number) RETURN Number IS
nQtUTI Number;
BEGIN
  Select Sum(Nvl(Qt_Lancada,0))
    Into nQtUTI
    From Diaria_UTI_SUS
   Where Cd_Reg_Fat    = pRegFat
    And Cd_Lancamento = pLacto;
  Return nQtUTI;
Exception
    When NO_DATA_FOUND Then
    Return 0;
END;
FUNCTION F_F_TOTAL_UTI (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLacto Number;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_TOTAL_UTI_E(xml) THEN
				result:= F_F_TOTAL_UTI(xml, pRegFat, pLacto);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_TOTAL_UTI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_TP_COMPLEXIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_TP_COMPLEXIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pModo In Varchar2) RETURN VARCHAR2 IS
Cursor cComplexidade Is
    select tp_complexidade_procedimento
      from procedimento_sus_complexidade
     where cd_procedimento = pProcedimento
       and sn_ativo = 'S';
  vDs Varchar2(200);
BEGIN
  Open cComplexidade;
    Fetch cComplexidade Into vDs;
  Close cComplexidade;
    -- Descritivo
    If pModo = 'D' Then
      If vDs = 'MC' Then
        vDs:= 'Mídia Complexidade';
      ElsIf vDs = 'AC' Then
        vDs:= 'Alta Complexidade';
    Else
      vDs:= 'não se aplica';
    End If;
    Return vDs;
    Else
      Return vDs;
    End If;
END;
FUNCTION F_GET_TP_COMPLEXIDADE (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pModo Varchar2(4000);
	result VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pModo:= PKG_XML.GetVarchar2(xml, 'pModo');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_TP_COMPLEXIDADE_E(xml) THEN
				result:= F_GET_TP_COMPLEXIDADE(xml, pProcedimento, pModo);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_TP_COMPLEXIDADE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_RET_INCREMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_RET_INCREMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2,pDate in Date) RETURN NUMBER IS
Cursor cIncremento Is
     Select Procedimento_SUS_Habilitacao.Vl_Percentual_SH
       From Procedimento_SUS_Habilitacao
          , Empresa_Habilitacoes_SUS
          , (Select PHAB.Cd_Procedimento               Cd_Procedimento
                  , Max(PHAB.Nr_Percentual_Incremento) Nr_Percentual_Incremento
               From Procedimento_SUS_Habilitacao PHAB
                  , Empresa_Habilitacoes_SUS     EHAB
              Where PHAB.Cd_Habilitacao      = EHAB.Cd_Habilitacao
                And PHAB.SN_Incremento       = 'S'
              Group By PHAB.Cd_Procedimento) Max_Incremento
      Where Empresa_Habilitacoes_SUS.Cd_Habilitacao      = Procedimento_SUS_Habilitacao.Cd_Habilitacao
        And Empresa_Habilitacoes_SUS.Cd_Multi_Empresa    = xml.multiEmpresa
        And Max_Incremento.Cd_Procedimento               = Procedimento_SUS_Habilitacao.Cd_Procedimento
        And Max_Incremento.Nr_Percentual_Incremento      = Procedimento_SUS_Habilitacao.Nr_Percentual_Incremento
        And Procedimento_SUS_Habilitacao.SN_Incremento   = 'S'
        And Procedimento_SUS_Habilitacao.Cd_Procedimento = pProcedimento
        And Trunc(pDate,'MM') < Trunc(Nvl(Empresa_Habilitacoes_SUS.Dt_Validade_Final,Sysdate),'MM');
  nPerc Number;
BEGIN
  Open cIncremento;
    Fetch cIncremento Into nPerc;
  Close cIncremento;
  Return nPerc;
END;
FUNCTION F_RET_INCREMENTO (in_params in Clob, out_params out Clob) RETURN NUMBER IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pDate Date;
	result NUMBER;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pDate:= PKG_XML.GetDate(xml, 'pDate');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_INCREMENTO_E(xml) THEN
				result:= F_RET_INCREMENTO(xml, pProcedimento, pDate);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_INCREMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>FNC_RET_TIPO_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_RET_TIPO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pCompet in Date) RETURN VARCHAR2 IS
Cursor cTpPrestador Is
     select  decode(sn_exige_cpf_cbo,'S','CPF/CBO'
             ,decode(sn_exige_cnes_hosp,'S','CNES/HOSP',decode(sn_exige_cnes,'S','CNES/CNPJ'
             ,decode(sn_ortese_protese,'S','CNPJ',null)))) PREST
--         , tp_complexidade_procedimento
      from dbamv.procedimento_detalhe_vigencia
     where (nvl(sn_aih_principal, 'N') = 'S' or nvl(sn_aih_secundario, 'N') = 'S' or nvl(sn_aih_especial, 'N') = 'S')
       and nvl(sn_cirurgia_multipla, 'N') = 'N'
       and cd_procedimento = pProcedimento
       and trunc(pCompet, 'MM') between dt_validade_inicial
                             and nvl(dt_validade_final, trunc(pCompet, 'MM'));
  vTipo Varchar2(200);
BEGIN
  Open cTpPrestador;
    Fetch cTpPrestador Into vTipo;
  Close cTpPrestador;
  Return vTipo;
END;
FUNCTION F_RET_TIPO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pCompet Date;
	result VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
    	pCompet:= PKG_XML.GetDate(xml, 'pCompet');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_TIPO_PRESTADOR_E(xml) THEN
				result:= F_RET_TIPO_PRESTADOR(xml, pProcedimento, pCompet);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_RET_TIPO_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_ULTIMA_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_ULTIMA_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, nAtend   in number) RETURN number IS
nRegFat number;
begin
   SELECT max(reg_fat.CD_REG_FAT) REG_FAT
     into nRegFat
     FROM REG_FAT reg_fat
    WHERE reg_fat.CD_ATENDIMENTO   = nAtend;
   return(nRegFat);
end;
FUNCTION F_GET_ULTIMA_CONTA (in_params in Clob, out_params out Clob) RETURN number IS
	xml PKG_XML.XmlContext;
	nAtend number;
	result number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nAtend:= PKG_XML.Getnumber(xml, 'nAtend');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ULTIMA_CONTA_E(xml) THEN
				result:= F_GET_ULTIMA_CONTA(xml, nAtend);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_ULTIMA_CONTA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_IDADE_PACIENTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
FUNCTION F_GET_IDADE_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN NUMBER IS
  Cursor cIdadePaciente Is Select Atendime.cd_paciente, Reg_Fat.Dt_Inicio
                             From Atendime
                                , Reg_Fat
                            Where Atendime.Cd_Atendimento = Reg_Fat.Cd_Atendimento
                              And Reg_Fat.Cd_Reg_Fat = pRegFat;
  rIdadePaciente cIdadePaciente%ROWTYPE;
BEGIN
  Open cIdadePaciente;
    Fetch cIdadePaciente Into rIdadePaciente;
  Close cIdadePaciente;
  Return dbamv.PKG_SUS_REGRA_PACIENTE.F_PACIENTE_IDADE(rIdadePaciente.cd_paciente, rIdadePaciente.Dt_Inicio); -- PDA 516516
END;
FUNCTION F_GET_IDADE_PACIENTE (in_params in Clob, out_params out Clob) RETURN NUMBER IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result NUMBER;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_IDADE_PACIENTE_E(xml) THEN
				result:= F_GET_IDADE_PACIENTE(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_IDADE_PACIENTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In VARCHAR2) RETURN BOOLEAN IS
Cursor cParto Is Select Nvl(SN_Parto,'N')
                     From Procedimento_SUS_Detalhe
                    Where Cd_Procedimento = pProcedimento;
  vSN_Parto Varchar2(1);
BEGIN
  Open cParto;
    Fetch cParto Into vSN_Parto;
  Close cParto;
  If vSN_Parto = 'S' Then
      Return True;
  Else
      Return False;
  End If;
END;
FUNCTION F_F_SN_PARTO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento VARCHAR2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVARCHAR2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PARTO_E(xml) THEN
				result:= F_F_SN_PARTO(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PARTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PROC_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PROC_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN VARCHAR2 IS
Cursor cRealizado Is Select Cd_Procedimento_Realizado
                         From Reg_Fat
                        Where Cd_Reg_Fat = pRegFat;
  vRealizado Procedimento_SUS.Cd_Procedimento%Type;
BEGIN
  Open cRealizado;
    Fetch cRealizado Into vRealizado;
  Close cRealizado;
  Return vRealizado;
END;
FUNCTION F_GET_PROC_REALIZADO (in_params in Clob, out_params out Clob) RETURN VARCHAR2 IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_REALIZADO_E(xml) THEN
				result:= F_GET_PROC_REALIZADO(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_REALIZADO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PROC_DIARIA_IDOSO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PROC_DIARIA_IDOSO (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN Varchar2 IS
Cursor cProcDiaria Is Select Valor
                          From Configuracao
                         Where Cd_Sistema = 'FFIS'
                           And Chave = 'CD_PROC_DIARIA_IDOSO'
                           And Cd_Multi_Empresa = xml.multiEmpresa;
  vProcDiaria Procedimento_SUS.Cd_Procedimento%Type;
BEGIN
    Open cProcDiaria;
      Fetch cProcDiaria Into vProcDiaria;
  Close cProcDiaria;
  Return vProcDiaria;
END;
FUNCTION F_GET_PROC_DIARIA_IDOSO (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
	xml PKG_XML.XmlContext;
	result Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_DIARIA_IDOSO_E(xml) THEN
				result:= F_GET_PROC_DIARIA_IDOSO(xml);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PROC_DIARIA_IDOSO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_SETOR_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_SETOR_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN Number IS
Cursor cSetor Is Select Cd_Setor
                     From ItReg_Fat
                    Where Cd_Reg_Fat = pRegFat
                      And SN_Proced_Realizado = 'S';
  nSetor Number;
BEGIN
  Open cSetor;
    Fetch cSetor Into nSetor;
  Close cSetor;
  Return nSetor;
END;
FUNCTION F_GET_SETOR_REALIZADO (in_params in Clob, out_params out Clob) RETURN Number IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_SETOR_REALIZADO_E(xml) THEN
				result:= F_GET_SETOR_REALIZADO(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_SETOR_REALIZADO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_PRESTADOR_AIH</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_PRESTADOR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext) RETURN NUMBER IS
Cursor cPrestador Is Select Cd_Prestador_AIH
                         From Multi_Empresas
                        Where Cd_Multi_Empresa = xml.multiEmpresa;
  nPrestador Number;
BEGIN
  Open cPrestador;
    Fetch cPrestador Into nPrestador;
  Close cPrestador;
  Return nPrestador;
END;
FUNCTION F_GET_PRESTADOR_AIH (in_params in Clob, out_params out Clob) RETURN NUMBER IS
	xml PKG_XML.XmlContext;
	result NUMBER;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRESTADOR_AIH_E(xml) THEN
				result:= F_GET_PRESTADOR_AIH(xml);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_PRESTADOR_AIH_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DIAS_AIH_5</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DIAS_AIH_5 (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pTipo In Varchar2 Default 'C') RETURN NUMBER IS
Cursor cDados Is Select To_Number(To_Char(Dt_Final,'DD'))-1
                        , Cd_Mot_Alt
                     From Reg_Fat
                    Where Cd_Reg_Fat = pRegFat;
  nDias   Number;
  nMotivo Number;
BEGIN
  Open cDados;
    Fetch cDados Into nDias,nMotivo;
  Close cDados;
  If pTipo = 'C' Then
    If nMotivo = 27 Or Substr(nMotivo,1,1) In ('2','3','4') Then
      nDias:= nDias + 1;
    End if;
  End IF;
  Return nDias;
END;
FUNCTION F_GET_DIAS_AIH_5 (in_params in Clob, out_params out Clob) RETURN NUMBER IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pTipo Varchar2(4000);
	result NUMBER;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pTipo:= PKG_XML.GetVarchar2(xml, 'pTipo');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_AIH_5_E(xml) THEN
				result:= F_GET_DIAS_AIH_5(xml, pRegFat, pTipo);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DIAS_AIH_5_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_DT_INTERNACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_DT_INTERNACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE IS
Cursor cDtInt Is Select Dt_Inicio
                     From Reg_Fat
                    Where Cd_Reg_Fat = pRegFat;
  dDate Date;
BEGIN
    Open cDtInt;
      Fetch cDtInt Into dDate;
    Close cDtInt;
  Return Trunc(dDate);
END;
FUNCTION F_GET_DT_INTERNACAO (in_params in Clob, out_params out Clob) RETURN DATE IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result DATE;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DT_INTERNACAO_E(xml) THEN
				result:= F_GET_DT_INTERNACAO(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_DT_INTERNACAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_FECHADA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_FECHADA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN BOOLEAN IS
Cursor C Is Select SN_Fechada
                From Reg_Fat
               Where Cd_Reg_Fat = pRegFat;
  vSN Varchar2(1);
BEGIN
    Open C;
      Fetch C Into vSN;
  Close C;
  If vSN = 'S' Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_FECHADA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_FECHADA_E(xml) THEN
				result:= F_F_SN_FECHADA(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_FECHADA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>GET_CBO_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_GET_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number, pProcedimento in Varchar2, pCompet in Date) RETURN Varchar2 IS
    Cursor cCboPrest is
      Select distinct cbo.Cd_CBOS
--           , cbo.Ds_CBOS
        From Dbamv.CBO
           , Dbamv.Multi_Empresas_CBO
           , Dbamv.prestador_cbo
           , Dbamv.Procedimento_Cbo_Vigencia pcv
       Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
         And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
         And Multi_Empresas_Cbo.cd_cbo           = pcv.cd_cbo
         And prestador_cbo.cd_multi_empresa      = Multi_Empresas_Cbo.cd_multi_empresa
         And pcv.cd_procedimento = pProcedimento
         and pCompet between pcv.dt_validade_inicial
                      and nvl(pcv.dt_validade_final, pCompet)
         And prestador_cbo.cd_prestador          = pPrestador
         And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
         And Multi_Empresas_CBO.SN_Ativo         = 'S'
         and prestador_cbo.sn_regra_vinculo  = 'S'
         -- Op 5624
         and pCompet between prestador_cbo.dt_validade_inicial
                      and nvl(prestador_cbo.dt_validade_final, pCompet);
/*
   Select distinct cbo.Cd_CBOS
      From Dbamv.CBO
         , Dbamv.Multi_Empresas_CBO
         , Dbamv.prestador_cbo
         , Dbamv.Procedimento_Sus_Cbo
     Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
       And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
       And Multi_Empresas_Cbo.cd_cbo           = procedimento_sus_cbo.cd_cbos
       And procedimento_sus_cbo.cd_procedimento = pProcedimento
       And prestador_cbo.cd_prestador          = pPrestador
       And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
       And Multi_Empresas_CBO.SN_Ativo         = 'S'
       And prestador_cbo.sn_ativo              = 'S'  -- PDA 348791
       And procedimento_sus_cbo.sn_ativo       = 'S'  -- PDA 348791
       And CBO.Cd_CBOS Not In ('000001','000002');
*/
 --[ início PDA 368158 ]
  Cursor cQualquerCbo is
    Select distinct cbo.Cd_CBOS
      From Dbamv.CBO
         , Dbamv.Multi_Empresas_CBO
         , Dbamv.prestador_cbo
         , Dbamv.Procedimento_cbo_vigencia pcv
     Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
       And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
       And Multi_Empresas_Cbo.cd_cbo           = pcv.cd_cbo
       and pCompet between pcv.dt_validade_inicial and nvl(pcv.dt_validade_final, pCompet)
       And prestador_cbo.cd_prestador          = pPrestador
       And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
       And Multi_Empresas_CBO.SN_Ativo         = 'S'
       And prestador_cbo.sn_ativo              = 'S'
       And CBO.Cd_CBOS Not In ('000001','000002');
/*
    Select distinct cbo.Cd_CBOS
      From Dbamv.CBO
         , Dbamv.Multi_Empresas_CBO
         , Dbamv.prestador_cbo
         , Dbamv.Procedimento_Sus_Cbo
     Where Multi_Empresas_CBO.Cd_CBO           = CBO.Cd_CBOS
       And Multi_Empresas_Cbo.cd_cbo           = prestador_cbo.cd_cbo
       And Multi_Empresas_Cbo.cd_cbo           = procedimento_sus_cbo.cd_cbos
       And prestador_cbo.cd_prestador          = pPrestador
       And Multi_Empresas_CBO.Cd_Multi_Empresa = Dbamv.Pkg_Mv2000.Le_Empresa
       And Multi_Empresas_CBO.SN_Ativo         = 'S'
       And prestador_cbo.sn_ativo              = 'S'
       And procedimento_sus_cbo.sn_ativo       = 'S'
       And CBO.Cd_CBOS Not In ('000001','000002');
*/
  -- [ Fim PDA 368158 ]
  Cursor cCboObriga is
    Select nvl(SN_Exige_CPF_CBO, 'N')
      From procedimento_detalhe_vigencia
     where cd_procedimento = pProcedimento
       and pCompet between dt_validade_inicial and nvl(dt_validade_final, pCompet);
  --
  vSnObriga        Varchar2(1);
  vCBO        CBO.Cd_CBOS%Type;
  --
BEGIN
      Open  cCboObriga;
        Fetch cCboObriga Into vSnObriga;
      Close cCboObriga;
      If vSnObriga = 'S' And FNC_FFIS_Define_Tipo_Vinculo(pPrestador) <> 1 then
        If pProcedimento = '0802020011' Then
          Open  cQualquerCbo;
            Fetch cQualquerCbo into vCBO;
          Close cQualquerCbo;
          Return vCBO;
        End If;
        Open  cCboPrest;
          Fetch cCboPrest into vCBO;
        Close cCboPrest;
        Return vCBO;
      Else
          Return Null;
      End if;
END;
FUNCTION F_GET_CBO_PRESTADOR (in_params in Clob, out_params out Clob) RETURN Varchar2 IS
	xml PKG_XML.XmlContext;
	pPrestador Number;
	pProcedimento Varchar2(4000);
	pCompet Date;
	result Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCompet:= PKG_XML.GetDate(xml, 'pCompet');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_CBO_PRESTADOR_E(xml) THEN
				result:= F_GET_CBO_PRESTADOR(xml, pPrestador, pProcedimento, pCompet);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_GET_CBO_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_PAGO_POR_DIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
FUNCTION F_F_SN_PAGO_POR_DIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN IS
Cursor cProcedimento Is Select Nvl(SN_Pago_Por_Dia,'N') SN_Pago_Por_Dia -- PDA 554017 (início/Fim).
                            From Procedimento_SUS_Detalhe
                           Where Cd_Procedimento = pProcedimento;
  vSN Varchar2(1);
BEGIN
    Open cProcedimento;
      Fetch cProcedimento Into vSN;
    Close cProcedimento;
    If vSN = 'S' Then
    Return True;
    Else
    Return False;
    End If;
END;
FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2) RETURN BOOLEAN IS
Cursor cProcedimento Is Select Nvl(SN_Pago_Por_Dia_Util,'N') SN_Pago_Por_Dia -- PDA 554017 (início/Fim).
                            From Procedimento_SUS_Detalhe
                           Where Cd_Procedimento = pProcedimento;
  vSN Varchar2(1);
BEGIN
    Open cProcedimento;
      Fetch cProcedimento Into vSN;
    Close cProcedimento;
    If vSN = 'S' Then
    Return True;
    Else
    Return False;
    End If;
END;
FUNCTION F_F_SN_PAGO_POR_DIA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_E(xml) THEN
				result:= F_F_SN_PAGO_POR_DIA(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
FUNCTION F_F_SN_PAGO_POR_DIA_UTIL (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_UTIL_E(xml) THEN
				result:= F_F_SN_PAGO_POR_DIA_UTIL(xml, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_PAGO_POR_DIA_UTIL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_AIH_CONTINUACAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_AIH_CONTINUACAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In NUmber) RETURN BOOLEAN IS
Cursor cReg Is Select Decode(Nr_Identificacao,'5','S','N') Nr_Identificacao
                   From Reg_Fat
                  Where Cd_Reg_Fat = pRegFat;
  vSN Varchar2(1);
BEGIN
    Open cReg;
      Fetch cReg Into vSN;
    Close cReg;
  If vSN = 'S' Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_AIH_CONTINUACAO (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pRegFat NUmber;
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNUmber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_AIH_CONTINUACAO_E(xml) THEN
				result:= F_F_AIH_CONTINUACAO(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_AIH_CONTINUACAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_COMPET_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_COMPET_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) RETURN DATE IS
Cursor cCompet Is Select ft.Dt_Competencia
                     From Remessa_Fatura re
                        , Fatura ft
                        , Reg_Fat rg
                    Where re.Cd_Remessa = rg.Cd_Remessa
                      And re.Cd_Fatura  = ft.Cd_Fatura
                      And rg.Cd_Reg_Fat = pRegFat;
  dCompet Date;
BEGIN
     Open cCompet;
       Fetch cCompet into dCompet;
     Close cCompet;
     If dCompet Is Null Then
          Return Null;
     Else
          Return dCompet;
     End If;
END;
FUNCTION F_F_COMPET_CONTA (in_params in Clob, out_params out Clob) RETURN DATE IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result DATE;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_COMPET_CONTA_E(xml) THEN
				result:= F_F_COMPET_CONTA(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_COMPET_CONTA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_TEM_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_TEM_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN IS
nAchou_DA Number;
BEGIN
  Select Count(*)
    Into nAchou_DA
    From ItReg_Fat it
       , Procedimento_detalhe_vigencia pd
   Where it.cd_reg_fat = pRegFat
     and pd.cd_procedimento = it.cd_procedimento
     and trunc(it.dt_lancamento) between pd.dt_validade_inicial
                                 and nvl(pd.dt_validade_final,it.dt_lancamento)
     and pd.sn_diaria_acompanhante = 'S';
  If nAchou_DA > 0 Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_TEM_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_TEM_DA_E(xml) THEN
				result:= F_F_SN_TEM_DA(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_TEM_DA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>F_SN_ATUALIZA_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	FUNCTION F_F_SN_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) RETURN BOOLEAN IS
Cursor cDA Is Select Nvl(Nr_Diaria_Acompanhante,0) Nr_Diaria_Acompanhante
                     , Sum(Qt_Lancamento) Qt_Lancamento
                  From Reg_Fat r
                     , ItReg_Fat i
                 Where r.Cd_Reg_Fat = i.Cd_Reg_Fat
                   And r.Cd_Reg_Fat = pRegFat
                   And i.Cd_Procedimento In (Select Cd_Procedimento
                                               From Procedimento_SUS_Detalhe
                                              Where SN_Diaria_Acompanhante = 'S')
                 Group By Nr_Diaria_Acompanhante;
  nConta   Number;
  nTotalIT Number;
BEGIN
  Open cDA;
    Fetch cDa Into nConta,nTotalIT;
  Close cDA;
  If nTotalIT <> nConta Then
    Return True;
  Else
    Return False;
  End If;
END;
FUNCTION F_F_SN_ATUALIZA_DA (in_params in Clob, out_params out Clob) RETURN BOOLEAN IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	result BOOLEAN;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ATUALIZA_DA_E(xml) THEN
				result:= F_F_SN_ATUALIZA_DA(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.F_F_SN_ATUALIZA_DA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
	 return result;
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_NR_AIH</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_NR_AIH (xml IN OUT NOCOPY PKG_XML.XmlContext, P_REG_FAT   NUMBER,
                         PNR_AIH     VARCHAR2,
                         PTIPO_AIH   VARCHAR2,
                         PGUIA_ANT   VARCHAR2,
                         PGUIA_POS   VARCHAR2) IS
Cursor cGuia Is select a.cd_atendimento
                    from reg_fat r
                       , reg_fat espelho
                       , atendime a
                       , atendime a_espelho
                       , responsa
                       , paciente p
                    where r.cd_reg_fat = P_REG_FAT
                      and r.nr_aih_posterior = espelho.nr_guia
                      and r.cd_atendimento = a.cd_atendimento
                      and espelho.cd_atendimento = a_espelho.cd_atendimento
                      and responsa.cd_atendimento(+) = espelho.cd_atendimento
                      and p.cd_paciente = a.cd_paciente
                      and a.cd_atendimento <> a_espelho.cd_atendimento
                      and a.cd_paciente <> a_espelho.cd_paciente
                      and p.nm_paciente <> nvl(responsa.nm_responsavel,p.nm_paciente) ;
  vAtendimento   atendime.cd_atendimento%type;
begin
   if    ptipo_aih = 'P' then
       Open cGuia;
         Fetch cGuia Into vAtendimento;
       Close cGuia;
    If vAtendimento Is Not Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_12)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_12', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: O numero da AIH já consta em outro atendimento, para outro paciente! (ATENDIMENTO %s).', arg_list(to_char(vAtendimento))),True);
    End If;
    if PGUIA_POS IS NOT NULL AND PNR_AIH IS NOT NULL then
      if PNR_AIH = PGUIA_POS then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_13)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_13', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número de AIH Posterior não pode ser igual ao Número da guia AIH.'),True);
      end if;
    end if;
  end if;
  If PTIPO_AIH = 'A' Then
      if PGUIA_ANT IS NOT NULL AND PNR_AIH IS NOT NULL then
      if PNR_AIH = PGUIA_ANT then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_14)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_14', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número de AIH Anterior não pode ser igual ao Número da AIH.'),True);
      end if;
    end if;
  End If;
end;
PROCEDURE P_VALIDA_NR_AIH (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	P_REG_FAT NUMBER;
	PNR_AIH VARCHAR2(4000);
	PTIPO_AIH VARCHAR2(4000);
	PGUIA_ANT VARCHAR2(4000);
	PGUIA_POS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		P_REG_FAT:= PKG_XML.GetNUMBER(xml, 'P_REG_FAT');
		PNR_AIH:= PKG_XML.GetVARCHAR2(xml, 'PNR_AIH');
		PTIPO_AIH:= PKG_XML.GetVARCHAR2(xml, 'PTIPO_AIH');
		PGUIA_ANT:= PKG_XML.GetVARCHAR2(xml, 'PGUIA_ANT');
		PGUIA_POS:= PKG_XML.GetVARCHAR2(xml, 'PGUIA_POS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_AIH_E(xml) THEN
				P_VALIDA_NR_AIH(xml, P_REG_FAT, PNR_AIH, PTIPO_AIH, PGUIA_ANT, PGUIA_POS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_AIH_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>HABILITA_DADOS_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_HABILITA_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, vProcedimento in varchar2) IS
Cursor cParto (pnCdProc In Varchar2) Is
      Select nvl(SN_PARTO, 'N')
        From procedimento_sus_detalhe
       Where cd_procedimento = pnCdProc;
   vParto      procedimento_sus_detalhe.SN_PARTO%type;
lParto boolean;
begin
     Open cParto(vProcedimento);
     Fetch cParto into vParto;
     Close cParto;
   if Nvl(vParto,'N') = 'S' then
      lParto := True;
   else
      lParto := False;
   end if;
   if lParto then
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','UPDATE_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','ENABLED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','NAVIGABLE',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','INSERT_ALLOWED',true);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','UPDATE_ALLOWED',true);
   else
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_VIVO','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_MORTO','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_ALTA','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_TRANSFERIDO','ENABLED',false);
      PKG_XML.SetPropBoolean(xml, 'ITEM','IT_PARTO.QT_RN_OBITO','ENABLED',false);
   end if;
end;
PROCEDURE P_HABILITA_DADOS_PARTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	vProcedimento varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		vProcedimento:= PKG_XML.Getvarchar2(xml, 'vProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DADOS_PARTO_E(xml) THEN
				P_HABILITA_DADOS_PARTO(xml, vProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DADOS_PARTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_DIA_ACOMPANHANTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDiarias in Number, cg$ctrl IN OUT NOCOPY CG$CTRLRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
  nDias   Number;     -- Numero de Dias de  Internacao
  nUti    Number;     -- Total de UTI/UCI
  nTotal  Number;     -- Total de Diarias
BEGIN
  -- Calcula os dias do período
  -- PDA 550328 início.
  -- nDias:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT);
  nDias:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT, pTipo => 'D');
  -- PDA 550328 Fim.
  -- Retorna o lançamento de UTI/UCI
  nUti:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
  -- Calcula os dias da conta para cobrança
  -- PDA 550328 início.
  -- nTotal := Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_INTERNACAO(xml, pRegFat, reg_fat => REG_FAT) - Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
  nTotal := nDias - nUti;
  -- PDA 550328 Fim.
  -- Limita em 99 dias caso ultrapasse -----
  If nTotal > 99 Then
    nTotal:= 99;
  Elsif Nvl(nTotal,0) < 0 Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_15', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: cobrança de diárias de UTI superior ao permitido aos dias de Internação da conta.%sAção: Verifique a possibilidade de existir duplicidade nos lançamentos.'
		, arg_list(chr(10))),false);
    nTotal:= 0;
  End If;
  ------------------------------------------
  if  pDiarias > nTotal then
    CG$CTRL.GO_ACOMPANHANTE := 'S';
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'), pkg_rmi_traducao.extrair_pkg_msg(
	'MSG_16', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Quantidade de diárias de acompanhante superior ao permitido.%sMotivo: lançamento de D.A: %s | lançamento de UTI: %s | Máx. Permitido: %s.%sAção: Recalcular a quantidade de diárias de acompanhante.'
	, arg_list(chr(10), pDiarias, nUTI, nTotal, chr(10))),True);
  end if;
END;
PROCEDURE P_VALIDA_DIA_ACOMPANHANTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pDiarias Number;
	cg$ctrl CG$CTRLRec;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pDiarias:= PKG_XML.GetNumber(xml, 'pDiarias');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		CG$CTRL.GO_ACOMPANHANTE:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DIA_ACOMPANHANTE_E(xml) THEN
				P_VALIDA_DIA_ACOMPANHANTE(xml, pRegFat, pDiarias, CG$CTRL, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DIA_ACOMPANHANTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE', CG$CTRL.GO_ACOMPANHANTE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_PONTO_PROFISSIONAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
   if REG_FAT.CD_PROCEDIMENTO_REALIZADO is null or
      REG_FAT.DT_FINAL             is null or
      REG_FAT.CD_MOT_ALT           is null then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_17)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_17', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não foi possível Efetuar Cálculo de Pontos Profissionais.%sMotivo: não existem dados suficientes para o calculo.', arg_list(chr(10))),FALSE);
   end if;
END;
PROCEDURE P_VALIDA_PONTO_PROFISSIONAL (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
		REG_FAT.CD_MOT_ALT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_MOT_ALT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PONTO_PROFISSIONAL_E(xml) THEN
				P_VALIDA_PONTO_PROFISSIONAL(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PONTO_PROFISSIONAL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_MOT_ALT', REG_FAT.CD_MOT_ALT);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Define_Prestador_Auto</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_PRESTADOR_AUTO (XML IN OUT NOCOPY PKG_XML.XMLCONTEXT
                                      ,NCDSETOR      IN      NUMBER
                                      ,NCDPRESTADOR  IN OUT  NOCOPY NUMBER
                                      ,PPROCEDIMENTO IN      VARCHAR2
                                      ,PCBO          IN OUT  VARCHAR2) IS
  CURSOR C_AUTO1(P_PROCEDIMENTO VARCHAR2) IS
      SELECT CD_PRESTADOR
        FROM AUTOMATIZA_LANCAMENTO_AIH ALAIH
       WHERE CD_GRUPO_PROCEDIMENTO          = SUBSTR(P_PROCEDIMENTO,1,2)
         AND CD_SUB_GRUPO_PROCEDIMENTO      = SUBSTR(P_PROCEDIMENTO,3,2)
         AND CD_ORGANIZA_GRUPO_PROCEDIMENTO = SUBSTR(P_PROCEDIMENTO,5,2)
         AND CD_PROCEDIMENTO                IS NULL
         AND CD_MULTI_EMPRESA               = DBAMV.PKG_MV2000.LE_EMPRESA;
    CURSOR C_AUTO2(P_PROCEDIMENTO VARCHAR2) IS
      SELECT CD_PRESTADOR,
             CD_CBO_PRESTADOR
        FROM DBAMV.AUTOMATIZA_LANCAMENTO_AIH ALAIH
       WHERE CD_PROCEDIMENTO                = P_PROCEDIMENTO
         AND CD_MULTI_EMPRESA               = DBAMV.PKG_MV2000.LE_EMPRESA;
 N_PRESTADOR        NUMBER;
 V_CBO_PRESTADOR    VARCHAR2(6);
 ESAIDA             EXCEPTION;
BEGIN
     IF PKG_MV2000.LE_CLIENTE = 406 THEN
      SELECT DISTINCT SET_EXA.CD_PRESTADOR
        INTO NCDPRESTADOR
        FROM SET_EXA SET_EXA
       WHERE SET_EXA.CD_SETOR = NCDSETOR;
   ELSE
      OPEN C_AUTO2(PPROCEDIMENTO);
        FETCH C_AUTO2 INTO N_PRESTADOR,V_CBO_PRESTADOR;
      CLOSE C_AUTO2;
      IF NVL(N_PRESTADOR,0) = 0 THEN
        OPEN C_AUTO1(PPROCEDIMENTO);
          FETCH C_AUTO1 INTO N_PRESTADOR;
        CLOSE C_AUTO1;
      END IF;
      IF NVL(N_PRESTADOR,0) = 0 THEN
        RAISE ESAIDA;
      END IF;
      NCDPRESTADOR:= N_PRESTADOR;
      PCBO:= V_CBO_PRESTADOR;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        NULL;
   WHEN ESAIDA THEN
        NULL;
END;
PROCEDURE P_DEFINE_PRESTADOR_AUTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	nCdSetor number;
	nCdPrestador number;
	pProcedimento Varchar2(4000);
	pCbo Varchar2(6);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nCdSetor:= PKG_XML.Getnumber(xml, 'nCdSetor');
		nCdPrestador:= PKG_XML.Getnumber(xml, 'nCdPrestador');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCbo:= PKG_XML.GetVarchar2(xml, 'pCbo');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUTO_E(xml) THEN
				P_DEFINE_PRESTADOR_AUTO(xml, nCdSetor, nCdPrestador, pProcedimento,pCbo);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.Setnumber(xml, 'nCdPrestador', nCdPrestador);
		PKG_XML.SetVarchar2(xml, 'pCbo', pCbo);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CONTA_CLOSED</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CONTA_CLOSED (xml IN OUT NOCOPY PKG_XML.XmlContext, vClosed in varchar2, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec) IS
BEGIN
    if vClosed = 'S' then
         Pkg_ffis_M_LACTO_AIH_P321.P_STATUS_LOCK(xml, 'BLC', CG$CTRL);   -- Define Lock de Bloco
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_ESPEC_SUS','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_CARATER_ATENDIMENTO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_REALIZADO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_SOLICITADO','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.TP_MODALIDADE_ATENDIMENTO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_IDENTIFICACAO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_SEQAIH5','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_REMESSA','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_INICIO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_FINAL','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_MOT_ALT','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_EMISSAO_LAUDO','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_ANTERIOR','UPDATE_ALLOWED',false);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_POSTERIOR','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_PRINCIPAL','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_SECUNDARIO','UPDATE_ALLOWED',false);
	   PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_CAUSAS_ASSOCIADAS','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_RESPONSAVEL','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_AUDITOR','UPDATE_ALLOWED',false);
       if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','ENABLED') = 'TRUE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','UPDATE_ALLOWED',false);
       end if;
       PKG_XML.SetPropBoolean(xml, 'BLOCK','REG_FAT','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','DELETE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','INSERT_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','UPDATE_ALLOWED',false);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','DELETE_ALLOWED',false);
    else
         Pkg_ffis_M_LACTO_AIH_P321.P_STATUS_LOCK(xml, Null, CG$CTRL);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_ESPEC_SUS','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_CARATER_ATENDIMENTO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_REALIZADO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_PROCEDIMENTO_SOLICITADO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.TP_MODALIDADE_ATENDIMENTO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_IDENTIFICACAO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_SEQAIH5','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_REMESSA','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_INICIO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_FINAL','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.CD_MOT_ALT','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_EMISSAO_LAUDO','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_ANTERIOR','UPDATE_ALLOWED',true);
         PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_AIH_POSTERIOR','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_PRINCIPAL','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_SECUNDARIO','UPDATE_ALLOWED',true);
	   PKG_XML.SetPropBoolean(xml, 'ITEM','CD_CID_CAUSAS_ASSOCIADAS','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_RESPONSAVEL','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','CD_PRESTADOR_AUDITOR','UPDATE_ALLOWED',true);
       if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','ENABLED') = 'TRUE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_DIARIA_ACOMPANHANTE','UPDATE_ALLOWED',true);
       end if;
       PKG_XML.SetPropBoolean(xml, 'BLOCK','REG_FAT','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITREG_FAT','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITLAN_MED','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','ITCOB_PRE','DELETE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','UPDATE_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'BLOCK','IT_PARTO','DELETE_ALLOWED',true);
    end if;
      -- PDA 155918(início) - Habilita/Desabilita o campo nr_guia de acordo com a configuração "Mutirão"
      --                      da remessa SUS
      Pkg_ffis_M_LACTO_AIH_P321.P_HABILITA_DESABILITA_GUIA(xml, pbLimpaCampo => false, reg_fat => REG_FAT);
       -- PDA 155918(Fim)
END;
PROCEDURE P_CONTA_CLOSED (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	vClosed varchar2(4000);
	reg_fat REG_FATRec;
	cg$ctrl CG$CTRLRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		vClosed:= PKG_XML.Getvarchar2(xml, 'vClosed');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.SN_FECHADA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.SN_FECHADA');
		CG$CTRL.STATUS_LOCK:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CONTA_CLOSED_E(xml) THEN
				P_CONTA_CLOSED(xml, vClosed, REG_FAT, CG$CTRL);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CONTA_CLOSED_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.SN_FECHADA', REG_FAT.SN_FECHADA);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK', CG$CTRL.STATUS_LOCK);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DADOS_PARTO_DEFAULT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DADOS_PARTO_DEFAULT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number
                              ,pProcedimento in varchar2, it_parto IN OUT NOCOPY IT_PARTORec) IS
Cursor cParto Is Select Nvl(SN_Parto,'N')
                     From Procedimento_SUS_Detalhe
                    Where Cd_Procedimento = pProcedimento;
  nRegFat   number := 0;
  vSN_Parto Varchar2(1);
  nResult   Number :=0;
begin
  Open cParto;
    Fetch cParto Into vSN_Parto;
  Close cParto;
  SELECT COUNT(*)
    INTO nRegFat
    FROM IT_PARTO it_parto
   WHERE it_parto.CD_REG_FAT = pRegFat;
  nResult:= Nvl(IT_PARTO.QT_RN_VIVO,0)
           +Nvl(IT_PARTO.QT_RN_MORTO,0)
           +Nvl(IT_PARTO.QT_RN_ALTA,0)
           +Nvl(IT_PARTO.QT_RN_TRANSFERIDO,0)
           +Nvl(IT_PARTO.QT_RN_OBITO,0);
  if nRegFat = 0 then
      If vSN_Parto = 'S' Then
        If nResult= 0 Then
          IT_PARTO.QT_RN_VIVO:= 1;
          IT_PARTO.QT_RN_ALTA:= 1;
            end if;
      end if;
    End If;
End;
PROCEDURE P_DADOS_PARTO_DEFAULT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento varchar2(4000);
	it_parto IT_PARTORec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.Getvarchar2(xml, 'pProcedimento');
		IT_PARTO.QT_RN_VIVO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_VIVO');
		IT_PARTO.QT_RN_MORTO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_MORTO');
		IT_PARTO.QT_RN_ALTA:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_ALTA');
		IT_PARTO.QT_RN_TRANSFERIDO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_TRANSFERIDO');
		IT_PARTO.QT_RN_OBITO:= PKG_XML.GetNUMBER(xml, 'IT_PARTO.QT_RN_OBITO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DADOS_PARTO_DEFAULT_E(xml) THEN
				P_DADOS_PARTO_DEFAULT(xml, pRegFat, pProcedimento, IT_PARTO);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DADOS_PARTO_DEFAULT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_VIVO', IT_PARTO.QT_RN_VIVO);
		PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_MORTO', IT_PARTO.QT_RN_MORTO);
		PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_ALTA', IT_PARTO.QT_RN_ALTA);
		PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_TRANSFERIDO', IT_PARTO.QT_RN_TRANSFERIDO);
		PKG_XML.SetNUMBER(xml, 'IT_PARTO.QT_RN_OBITO', IT_PARTO.QT_RN_OBITO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Check_contas_remessa</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHECK_CONTAS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, nRemessa in number) IS
nCtsRems number :=0;
nCtsDig  number :=0;
eSaida   Exception;
BEGIN
  If nRemessa Is Null Then
    Raise eSaida;
  End If;
      SELECT count(*)
        into nCtsDig
        FROM REG_FAT reg_fat
       WHERE reg_fat.cd_remessa = nRemessa
       AND REG_FAT.CD_MULTI_EMPRESA = xml.multiEmpresa; -- PDA 118607/127754
      SELECT nvl(remessa_fatura.qt_contas_remessa,0)
        into nCtsRems
        FROM REMESSA_FATURA
       WHERE REMESSA_FATURA.cd_remessa = nRemessa;
      if nCtsRems < nCtsDig then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_18)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_18', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Quantidade de contas digitadas maior que o estimado para a remessa.'),False);
      end if;
EXCEPTION
   When no_data_found then
        Null;
  When eSaida Then
    Null;
END;
PROCEDURE P_CHECK_CONTAS_REMESSA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	nRemessa number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nRemessa:= PKG_XML.Getnumber(xml, 'nRemessa');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECK_CONTAS_REMESSA_E(xml) THEN
				P_CHECK_CONTAS_REMESSA(xml, nRemessa);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECK_CONTAS_REMESSA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DEFINE_PRESTADOR_AUDITOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
begin
   if REG_FAT.CD_PRESTADOR_AUDITOR is null then
        REG_FAT.CD_PRESTADOR_AUDITOR := REG_FAT.CD_PRESTADOR_RESPONSAVEL;
        REG_FAT.NM_PRESTADOR_AUDITOR := REG_FAT.NM_PRESTADOR_RESPONSAVEL;
   end if;
end;
PROCEDURE P_DEFINE_PRESTADOR_AUDITOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.CD_PRESTADOR_RESPONSAVEL:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUDITOR_E(xml) THEN
				P_DEFINE_PRESTADOR_AUDITOR(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PRESTADOR_AUDITOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL', REG_FAT.CD_PRESTADOR_RESPONSAVEL);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL', REG_FAT.NM_PRESTADOR_RESPONSAVEL);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>STATUS_LOCK</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_STATUS_LOCK (xml IN OUT NOCOPY PKG_XML.XmlContext, vModo in varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec) IS
begin
   if vModo is Null then
         CG$CTRL.STATUS_LOCK := 'AUT';
   else
         if     vModo = 'BLC'                                                     then
                 CG$CTRL.STATUS_LOCK := vModo;
         elsif    (vModo = 'REG' or vModo = 'SUS') and CG$CTRL.STATUS_LOCK  = 'BLC' then
                 Null;
         elsif    (vModo = 'REG' or vModo = 'SUS') and CG$CTRL.STATUS_LOCK <> 'BLC' then
                 CG$CTRL.STATUS_LOCK := vModo;
         else
            CG$CTRL.STATUS_LOCK := vModo;
         end if;
   end if;
end;
PROCEDURE P_STATUS_LOCK (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	vModo varchar2(4000);
	cg$ctrl CG$CTRLRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		vModo:= PKG_XML.Getvarchar2(xml, 'vModo');
		CG$CTRL.STATUS_LOCK:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_STATUS_LOCK_E(xml) THEN
				P_STATUS_LOCK(xml, vModo, CG$CTRL);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_STATUS_LOCK_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.STATUS_LOCK', CG$CTRL.STATUS_LOCK);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_ATIVIDADE_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador In Number,pAtiMed In Varchar2,pProcedimento in Varchar2) IS
Cursor cPrestador Is Select Nvl(SN_Cirurgiao,'N')   SN_Cirurgiao
                            , Nvl(SN_Auxiliar,'N')    SN_Auxiliar
                            , Nvl(SN_Anestesista,'N') SN_Anestesista
                         From Prestador
                         Where Cd_Prestador = pPrestador;
  rPrestador       cPrestador%Rowtype;
  Saida            Exception;
  vSN_Equipe       Varchar2(1);
  vNr_Auxiliar     Varchar2(1);
  vSN_Anestesista  Varchar2(1);
Begin
  If pPrestador Is Null Then
      Raise Saida;
  End If;
  Open cPrestador;
    Fetch cPrestador Into rPrestador;
  Close cPrestador;
  Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, pProcedimento
                       ,vSN_Equipe
                       ,vNr_Auxiliar
                       ,vSN_Anestesista);
   IF pAtiMed = '01' And rPrestador.SN_Cirurgiao = 'N' THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_19)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_19', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado para cirurgião.'),true);
   END IF;
   IF pAtiMed in ('02','03','04','05') Then
        If rPrestador.SN_Auxiliar = 'N' THEN
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_20)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_20', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado para auxiliar.'),true);
     End If;
     If vNr_Auxiliar = 0 then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_21)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_21', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento não permite prestador auxiliar.'),true);
       End if;
   END IF;
   IF pAtiMed in ('06') Then
        If rPrestador.SN_Anestesista = 'N' THEN
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_22)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_22', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador não cadastrado para anestesista.'),true);
        End If;
        If vSN_Anestesista = 'N' Then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_23)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_23', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s não permite anestesista.', arg_list(pProcedimento)),true);
        End If;
   END IF;
   If to_number(pAtiMed) > 6 Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_24)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_24', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Atividade não compõe equipe médica.'),true);
   End If;
Exception
  When Saida Then
     Null;
End;
PROCEDURE P_VALIDA_ATIVIDADE_PRESTADOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pPrestador Number;
	pAtiMed Varchar2(4000);
	pProcedimento Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		pAtiMed:= PKG_XML.GetVarchar2(xml, 'pAtiMed');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATIVIDADE_PRESTADOR_E(xml) THEN
				P_VALIDA_ATIVIDADE_PRESTADOR(xml, pPrestador, pAtiMed, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATIVIDADE_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CRIA_NOVA_REG_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CRIA_NOVA_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pdAlta in Date,pMotAlt in Number) IS
Cursor c_CapturaItens is
    Select itreg_fat.cd_reg_fat
               , itreg_fat.cd_lancamento
                 , itreg_fat.dt_lancamento
                 , itreg_fat.hr_lancamento
                 , itreg_fat.qt_lancamento
                 , itreg_fat.vl_percentual_multipla
                 , itreg_fat.vl_unitario
                 , itreg_fat.vl_filme_unitario
                 , itreg_fat.vl_acrescimo
                 , itreg_fat.vl_desconto
                 , itreg_fat.cd_gru_fat
                 , itreg_fat.cd_pro_fat
                 , itreg_fat.cd_prestador
                 , itreg_fat.nr_padrao
                 , itreg_fat.vl_honorario_unitario
                 , itreg_fat.vl_operacional_unitario
                 , itreg_fat.cd_pres_con
                 , itreg_fat.vl_percentual_paciente
                 , itreg_fat.vl_total_conta
                 , itreg_fat.cd_importa_reg_fat
                 , itreg_fat.cd_guia
                 , itreg_fat.sn_pertence_pacote
                 , itreg_fat.vl_base_repassado
                 , itreg_fat.cd_motivo_glosa
                 , itreg_fat.qt_ch_unitario
                 , itreg_fat.tp_pagamento
                 , itreg_fat.cd_setor_produziu
                 , itreg_fat.cd_setor
                 , itreg_fat.cd_padrao
                 , itreg_fat.sn_horario_especial
                 , itreg_fat.qt_pontos
                 , itreg_fat.sn_proced_autorizado
                 , itreg_fat.tp_alta_uti_neo
                 , itreg_fat.qt_peso_rn
                 , itreg_fat.qt_mes_gestacao
                 , itreg_fat.cd_tipo_vinculo
                 , itreg_fat.cd_ati_med
                 , itreg_fat.vl_sp
                 , itreg_fat.vl_sh
                 , itreg_fat.vl_sd
                 , itreg_fat.vl_ato
                 , itreg_fat.cd_reg_fat_pai
                 , itreg_fat.cd_lancamento_pai
                 , itreg_fat.sn_proced_realizado
                 , itreg_fat.cd_franquia
                 , itreg_fat.cd_regra_acoplamento
                 , itreg_fat.vl_perc_acoplamento
                 , itreg_fat.sn_paciente_paga
                 , itreg_fat.cd_regra_atendimento
                 , itreg_fat.cd_regra_atendimento_pro_fat
                 , itreg_fat.cd_reg_fat_rel
                 , itreg_fat.cd_lancamento_rel
                 , itreg_fat.cd_usuario
                 , itreg_fat.cd_mvto
                 , itreg_fat.tp_mvto
                 , itreg_fat.hr_lancamento_final
                 , itreg_fat.vl_desconto_conta
                 , itreg_fat.sn_repassou_virtual
                 , itreg_fat.vl_nota
                 , itreg_fat.sn_imp_laudo_alteracao
                 , itreg_fat.vl_ponto_repassado
                 , itreg_fat.cd_itmvto
                 , itreg_fat.sn_repassado
                 , itreg_fat.cd_procedimento
                 , itreg_fat.cd_cbo_prestador
                 , itreg_fat.tp_apurar_valor
                 , itreg_fat.tp_apurar_valor_origem
                 , procedimento_sus_detalhe.sn_parto
      From itreg_fat
         , procedimento_sus_detalhe
     Where cd_reg_fat           = pRegFat
       And itreg_fat.cd_procedimento = procedimento_sus_detalhe.cd_procedimento
       And trunc(dt_lancamento) >= (trunc(pdAlta) + 1 )
       And procedimento_sus_detalhe.sn_diaria_uti = 'N'
       And procedimento_sus_detalhe.sn_diaria_acompanhante = 'N';
  Cursor c_ExcluiItens is
    Select cd_reg_fat
         , cd_lancamento
      From itreg_fat
     Where cd_reg_fat    = pRegFat
       And trunc(dt_lancamento) > trunc(pdAlta);
  Cursor c_ItLan_Med ( nCdRegFat in Number
                                       , nCdLanc   in Number) is
    Select cd_reg_fat
         , cd_lancamento
            , cd_ati_med
         , cd_prestador
         , vl_ato
         , cd_pres_con
         , tp_pagamento
         , vl_base_repassado
         , qt_pontos
         , cd_tipo_vinculo
         , sn_paciente_paga
         , cd_itmvto
         , sn_repassou_virtual
         , vl_nota
         , vl_desconto
         , vl_acrescimo
         , vl_desconto_conta
         , vl_liquido
         , sn_repassado
         , cd_cbo_prestador
         , tp_apurar_valor
         , tp_apurar_valor_origem
      From itlan_med
     Where cd_reg_fat    = nCdRegFat
       And cd_lancamento = nCdLanc;
  Cursor c_ItCob_Pre ( nCdRegFat in Number
                                       , nCdLanc   in Number) is
    Select cd_reg_fat
           , cd_lancamento
           , nr_documento
           , vl_preco_unitario
           , vl_preco_total
           , ds_observacao
           , cd_fornecedor
           , nr_lote
           , nr_serie
           , nr_cnpj_fabricante
           , nr_registro_anvisa
      From itcob_pre
     Where cd_reg_fat    = nCdRegFat
       And cd_lancamento = nCdLanc;
  Cursor c_It_Parto ( nCdRegFat in Number) is
    Select cd_reg_fat
            , qt_rn_vivo
            , qt_rn_morto
            , qt_rn_alta
            , qt_rn_transferido
            , qt_rn_obito
            , qt_filhos
            , cd_cid
            , sn_gestacao_risco
            , cd_contraceptivo_anterior
            , cd_contraceptivo_atual
      From it_parto
     Where cd_reg_fat    = nCdRegFat;
  Cursor c_RegCivil ( nCdRegFat in Number
                                      , nCdLanc   in Number) is
    Select cd_reg_fat
             , cd_lancamento
             , nr_declaracao_nascido
             , nm_recem_nascido
             , cd_cartorio
             , nr_livro_rn
             , nr_folha_rn
             , nr_termo_rn
             , dt_emissao_rn
             , nr_matricula
      From registro_civil
     Where cd_reg_fat    = nCdRegFat
       And cd_lancamento = nCdLanc;
  Cursor cItensPrescricao ( nCdRegFat in Number
                                                  , nCdLanc        in Number) is
      Select cd_atendimento
           , cd_reg_fat
           , cd_lancamento
           , cd_pro_fat
           , dt_lancamento
           , hr_lancamento
           , qt_lancamento
           , cd_mvto
           , cd_itmvto
           , tp_mvto
           , cd_procedimento
        From itens_prescricao_sus
       Where cd_reg_fat    = nCdRegFat
         And cd_lancamento = nCdLanc;
  Cursor cRegFat Is Select Cd_Atendimento
                         , Cd_Convenio
                         , Cd_Multi_Empresa
                         , Cd_Regra
                         , Cd_Tip_Acom
                         , Cd_Con_Pla
                         , Cd_Prestador_Diretor
                         , Tp_Modalidade_Atendimento
                         , Cd_Carater_Atendimento
                         , Cd_Procedimento_Realizado
                         , cd_prestador_auditor  --OP 14332
                      From Reg_Fat
                     Where Cd_Reg_Fat = pRegFat;
  rRegFat       cRegFat%RowType;
  nNewRegFat    Number;
  vDtInicio     Date;
  nRegAnt       number;
BEGIN
   ----------------------------------- Captura Novo Numero de Conta ----------------------------------
   select SEQ_REG_FAT.NEXTVAL
     into nNewRegFat
     from SYS.DUAL;
   ---------------------------------------------------------------------------------------------------
   Open cRegFat;
     Fetch cRegFat Into rRegFat;
   Close cRegFat;
   if pMotAlt Not In ('27') or pMotAlt Not In ('3','4') then
     vDtInicio := pdAlta + 1;
   else
        vDtInicio := pdAlta;
   end if;
   Insert into reg_fat (cd_reg_fat,
                              sn_fechada,
                              cd_multi_empresa,
                              cd_atendimento,
                              cd_regra,
                              cd_tip_acom,
                              cd_con_pla,
                              cd_convenio,
                              sn_fatura_impressa,
                              sn_conta_calculada,
                              cd_guia,
                              dt_inicio,
                              cd_remessa,
                              nm_usuario,
                              sn_importa_auto,
                              cd_pro_fat_solicitado,
                              cd_mot_alt,
                              nr_identificacao,
                              NR_DIARIA_ACOMPANHANTE,
                              dt_final,
                              CD_PRESTADOR_DIRETOR,
                              CD_CARATER_INTERNACAO,
                              TP_MODALIDADE_ATENDIMENTO,
                              CD_CARATER_ATENDIMENTO,
                              CD_PROCEDIMENTO_SOLICITADO,
                              CD_PRESTADOR_AUDITOR)    --OP 14332
                      Values (nNewRegFat,
                              'N',
                              rRegFat.CD_MULTI_EMPRESA,
                              rRegFat.CD_ATENDIMENTO,
                              rRegFat.CD_REGRA,
                              rRegFat.CD_TIP_ACOM,
                              rRegFat.CD_CON_PLA,
                              rRegFat.CD_CONVENIO,
                              'N',
                              'N',
                              Null,
                              vDtInicio,
                              Null,
                              xml.usuario,
                              'S',
                              Null,
                              nvl(pMotAlt,12),
                              '1',
                              0,
                              Null,
                              rRegFat.CD_PRESTADOR_DIRETOR,
                              Null,
                              rRegFat.TP_MODALIDADE_ATENDIMENTO,
                              rRegFat.CD_CARATER_ATENDIMENTO,
                              rRegFat.CD_PROCEDIMENTO_REALIZADO,
                              rRegFat.CD_PRESTADOR_AUDITOR); --OP 14332
--------------------------------   Insere Itens na Nova Conta    --------------------------------
  For rec in c_CapturaItens Loop
   Insert Into itreg_fat( cd_reg_fat
                                                        , cd_lancamento
                                                        , dt_lancamento
                                                        , hr_lancamento
                                                        , qt_lancamento
                                                        , vl_percentual_multipla
                                                        , vl_unitario
                                                        , vl_filme_unitario
                                                        , vl_acrescimo
                                                        , vl_desconto
                                                        , cd_gru_fat
                                                        , cd_pro_fat
                                                        , cd_prestador
                                                        , nr_padrao
                                                        , vl_honorario_unitario
                                                        , vl_operacional_unitario
                                                        , cd_pres_con
                                                        , vl_percentual_paciente
                                                        , vl_total_conta
                                                        , cd_importa_reg_fat
                                                        , cd_guia
                                                        , sn_pertence_pacote
                                                        , vl_base_repassado
                                                        , cd_motivo_glosa
                                                        , qt_ch_unitario
                                                        , tp_pagamento
                                                        , cd_setor_produziu
                                                        , cd_setor
                                                        , cd_padrao
                                                        , sn_horario_especial
                                                        , qt_pontos
                                                        , sn_proced_autorizado
                                                        , tp_alta_uti_neo
                                                        , qt_peso_rn
                                                        , qt_mes_gestacao
                                                        , cd_tipo_vinculo
                                                        , cd_ati_med
                                                        , vl_sp
                                                        , vl_sh
                                                        , vl_sd
                                                        , vl_ato
                                                        , cd_reg_fat_pai
                                                        , cd_lancamento_pai
                                                        , sn_proced_realizado
                                                        , cd_franquia
                                                        , cd_regra_acoplamento
                                                        , vl_perc_acoplamento
                                                        , sn_paciente_paga
                                                        , cd_regra_atendimento
                                                        , cd_regra_atendimento_pro_fat
                                                        , cd_reg_fat_rel
                                                        , cd_lancamento_rel
                                                        , cd_usuario
                                                        , cd_mvto
                                                        , tp_mvto
                                                        , hr_lancamento_final
                                                        , vl_desconto_conta
                                                        , sn_repassou_virtual
                                                        , vl_nota
                                                        , sn_imp_laudo_alteracao
                                                        , vl_ponto_repassado
                                                        , cd_itmvto
                                                        , sn_repassado
                                    , cd_procedimento
                                      , cd_cbo_prestador
                                      , tp_apurar_valor
                                      , tp_apurar_valor_origem)
                      values ( nNewRegFat
                                         , rec.cd_lancamento
                                         , rec.dt_lancamento
                                         , rec.hr_lancamento
                                         , rec.qt_lancamento
                                         , rec.vl_percentual_multipla
                                         , rec.vl_unitario
                                         , rec.vl_filme_unitario
                                         , rec.vl_acrescimo
                                         , rec.vl_desconto
                                         , rec.cd_gru_fat
                                         , rec.cd_pro_fat
                                         , rec.cd_prestador
                                         , rec.nr_padrao
                                         , rec.vl_honorario_unitario
                                         , rec.vl_operacional_unitario
                                         , rec.cd_pres_con
                                         , rec.vl_percentual_paciente
                                         , rec.vl_total_conta
                                         , rec.cd_importa_reg_fat
                                         , rec.cd_guia
                                         , rec.sn_pertence_pacote
                                         , rec.vl_base_repassado
                                         , rec.cd_motivo_glosa
                                         , rec.qt_ch_unitario
                                         , rec.tp_pagamento
                                         , rec.cd_setor_produziu
                                         , rec.cd_setor
                                         , rec.cd_padrao
                                         , rec.sn_horario_especial
                                         , rec.qt_pontos
                                         , rec.sn_proced_autorizado
                                         , rec.tp_alta_uti_neo
                                         , rec.qt_peso_rn
                                         , rec.qt_mes_gestacao
                                         , rec.cd_tipo_vinculo
                                         , rec.cd_ati_med
                                         , rec.vl_sp
                                         , rec.vl_sh
                                         , rec.vl_sd
                                         , rec.vl_ato
                                         , rec.cd_reg_fat_pai
                                         , rec.cd_lancamento_pai
                                         , rec.sn_proced_realizado
                                         , rec.cd_franquia
                                         , rec.cd_regra_acoplamento
                                         , rec.vl_perc_acoplamento
                                         , rec.sn_paciente_paga
                                         , rec.cd_regra_atendimento
                                         , rec.cd_regra_atendimento_pro_fat
                                         , rec.cd_reg_fat_rel
                                         , rec.cd_lancamento_rel
                                         , rec.cd_usuario
                                         , rec.cd_mvto
                                         , rec.tp_mvto
                                         , rec.hr_lancamento_final
                                         , rec.vl_desconto_conta
                                         , rec.sn_repassou_virtual
                                         , rec.vl_nota
                                         , rec.sn_imp_laudo_alteracao
                                         , rec.vl_ponto_repassado
                                         , rec.cd_itmvto
                                         , rec.sn_repassado
                                   , rec.cd_procedimento
                                     , rec.cd_cbo_prestador
                                     , rec.tp_apurar_valor
                                     , rec.tp_apurar_valor_origem);
--------------- Insere os itens na tabela itlan_med relacionados ao item da conta ------------------
    For rec2 in c_ItLan_Med(rec.cd_reg_fat, rec.cd_lancamento) Loop
        Insert Into itlan_med (cd_reg_fat
                                                       , cd_lancamento
                                                       , cd_ati_med
                                                       , cd_prestador
                                                       , vl_ato
                                                       , cd_pres_con
                                                       , tp_pagamento
                                                       , vl_base_repassado
                                                       , qt_pontos
                                                       , cd_tipo_vinculo
                                                       , sn_paciente_paga
                                                       , cd_itmvto
                                                       , sn_repassou_virtual
                                                       , vl_nota
                                                       , vl_desconto
                                                       , vl_acrescimo
                                                       , vl_desconto_conta
                                                       , vl_liquido
                                                       , sn_repassado
                                 , cd_cbo_prestador
                                 , tp_apurar_valor
                                 , tp_apurar_valor_origem)
        Values ( nNewRegFat
               , rec2.cd_lancamento
               , rec2.cd_ati_med
               , rec2.cd_prestador
               , rec2.vl_ato
               , rec2.cd_pres_con
               , rec2.tp_pagamento
               , rec2.vl_base_repassado
               , rec2.qt_pontos
               , rec2.cd_tipo_vinculo
               , rec2.sn_paciente_paga
               , rec2.cd_itmvto
               , rec2.sn_repassou_virtual
               , rec2.vl_nota
               , rec2.vl_desconto
               , rec2.vl_acrescimo
               , rec2.vl_desconto_conta
               , rec2.vl_liquido
               , rec2.sn_repassado
             , rec2.cd_cbo_prestador
             , rec2.tp_apurar_valor
             , rec2.tp_apurar_valor_origem);
    End Loop;
--------------- Insere os itens na tabela itcob_pre relacionados ao item da conta ------------------
    For rec3 in c_ItCob_Pre(rec.cd_reg_fat, rec.cd_lancamento) Loop
        Insert into itcob_pre (
                           cd_reg_fat
                    , cd_lancamento
              , nr_documento
              , vl_preco_unitario
              , vl_preco_total
              , ds_observacao
              , cd_fornecedor
              , nr_lote
              , nr_serie
              , nr_cnpj_fabricante
              , nr_registro_anvisa)
        Values( nNewRegFat
              , rec3.cd_lancamento
              , rec3.nr_documento
              , rec3.vl_preco_unitario
              , rec3.vl_preco_total
              , rec3.ds_observacao
              , rec3.cd_fornecedor
              , rec3.nr_lote
              , rec3.nr_serie
              , rec3.nr_cnpj_fabricante
              , rec3.nr_registro_anvisa);
    End Loop;
--------------- Insere o Parto na tabela it_parto ------------------
    For rec4 in c_It_Parto (rec.cd_reg_fat) Loop
      if rec.sn_parto = 'S' then
            Insert into it_parto
             Values( nNewRegFat
                   , rec4.qt_rn_vivo
                   , rec4.qt_rn_morto
                   , rec4.qt_rn_alta
                   , rec4.qt_rn_transferido
                   , rec4.qt_rn_obito
                   , rec4.qt_filhos
                   , rec4.cd_cid
                   , rec4.sn_gestacao_risco
                   , rec4.cd_contraceptivo_anterior
                   , rec4.cd_contraceptivo_atual);
           End if;
    End Loop;
--------------- Insere os itens na tabela REGISTRO_CIVIL relacionados ao item da conta ------------------
      For rec5 in c_RegCivil(rec.cd_reg_fat, rec.cd_lancamento) Loop
          Insert Into registro_civil
          Values ( nNewRegFat
                 , rec5.cd_lancamento
                 , rec5.nr_declaracao_nascido
                 , rec5.nm_recem_nascido
                 , rec5.cd_cartorio
                 , rec5.nr_livro_rn
                 , rec5.nr_folha_rn
                 , rec5.nr_termo_rn
                 , rec5.dt_emissao_rn
                 , rec5.nr_matricula);
      End Loop;
-- PDA 187104 Inicio
------------ Insere os itens na tabela ITENS_PRESCRICAO_SUS relacionados ao item da conta ---------------
      For rec6 in cItensPrescricao(rec.cd_reg_fat, rec.cd_lancamento) Loop
          Insert Into itens_prescricao_sus
          (cd_atendimento
           , cd_reg_fat
           , cd_lancamento
           , cd_pro_fat
           , dt_lancamento
           , hr_lancamento
           , qt_lancamento
           , cd_mvto
           , cd_itmvto
           , tp_mvto
           , cd_procedimento)
          Values ( rec6.cd_atendimento
                 , nNewRegFat
                 , rec6.cd_lancamento
                 , rec6.cd_pro_fat
                 , rec6.dt_lancamento
                 , rec6.hr_lancamento
                 , rec6.qt_lancamento
                 , rec6.cd_mvto
                 , rec6.cd_itmvto
                 , rec6.tp_mvto
                 , rec6.cd_procedimento);
      End Loop;
-- PDA 187104 Fim
  End Loop;
---------------- Exclui os itens da REG_FAT anterior ------------------------
  For rec_exclui in c_ExcluiItens loop
       Delete
         From itens_prescricao_sus
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
       Delete
         From itlan_med
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
       Delete
         From itcob_pre
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
       Delete
         From it_parto
        Where cd_reg_fat    = rec_exclui.cd_reg_fat;
       Delete
         From registro_civil
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
      Delete
         From itreg_fat
        Where cd_reg_fat    = rec_exclui.cd_reg_fat
          And cd_lancamento = rec_exclui.cd_lancamento;
  End Loop;
-------------------------------
Exception
  When no_data_found then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_25)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_25', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Problemas ao criar nova conta, entre em contato com a MV Sistemas.'),false);
  When Others Then
    raise form_trigger_failure;
END;
PROCEDURE P_CRIA_NOVA_REG_FAT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pdAlta Date;
	pMotAlt Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pdAlta:= PKG_XML.GetDate(xml, 'pdAlta');
		pMotAlt:= PKG_XML.GetNumber(xml, 'pMotAlt');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CRIA_NOVA_REG_FAT_E(xml) THEN
				P_CRIA_NOVA_REG_FAT(xml, pRegFat, pdAlta, pMotAlt);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CRIA_NOVA_REG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CPF_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pCdPrestador in number) IS
Cursor cPrestador (nCdPrest in number) is
        Select tp_vinculo
             , length(nr_cpf_cgc)
          From prestador
         Where cd_prestador = nCdPrest;
    vTpVinculo    prestador.tp_vinculo%type;
    nTamanho        Number;
BEGIN
  Open cPrestador (pCdPrestador);
    Fetch cPrestador into vTpVinculo, nTamanho;
  Close cPrestador;
  If vTpVinculo = 'J' or nTamanho > 11 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_26)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_26', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Campo só permite lançamento de prestador cadastrado com CPF.%sAção: Entre com um prestador Válido.', arg_list(chr(10))),TRUE);
  End if;
END;
PROCEDURE P_VALIDA_CPF_PRESTADOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCdPrestador number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCdPrestador:= PKG_XML.Getnumber(xml, 'pCdPrestador');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CPF_PRESTADOR_E(xml) THEN
				P_VALIDA_CPF_PRESTADOR(xml, pCdPrestador);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CPF_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>HABILITA_DT_AUT_HOMONIMO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
  IF REG_FAT.CD_PRESTADOR_AUDITOR IS NOT NULL THEN
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','ENABLED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','NAVIGABLE',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','INSERT_ALLOWED',true);
       PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','UPDATE_ALLOWED',true);
  ELSE
        PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.DT_AUT_HOMONIMO','ENABLED',false);
  END IF;
END;
PROCEDURE P_HABILITA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DT_AUT_HOMONIMO_E(xml) THEN
				P_HABILITA_DT_AUT_HOMONIMO(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DT_AUT_HOMONIMO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_DT_AUT_HOMONIMO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
    IF TRUNC(REG_FAT.DT_INICIO) > TRUNC(REG_FAT.DT_AUT_HOMONIMO) THEN
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_27)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_27', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: A data Informada não Pode Ser Inferior a Data Inicial da Conta'),TRUE);
  END IF;
    DECLARE
         Cursor cCPF is
        Select Prestador.Nr_Cpf_Cgc
          From Prestador
         Where Prestador.Cd_Prestador  = Reg_Fat.Cd_Prestador_Auditor;
          vCPF Prestador.Nr_Cpf_Cgc%type;
    BEGIN
      Open cCPF;
      Fetch cCPF into vCPF;
      Close cCPF;
        IF REG_FAT.CD_GESTOR_AUTORIZOU IS NULL THEN
             IF REG_FAT.DT_AUT_HOMONIMO IS NOT NULL THEN
                 REG_FAT.NR_CPF_GESTOR := vCPF;
             ELSE
            REG_FAT.NR_CPF_GESTOR := '';
             END IF;
        END IF;
    END;
END;
PROCEDURE P_VALIDA_DT_AUT_HOMONIMO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.DT_AUT_HOMONIMO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO');
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.CD_GESTOR_AUTORIZOU:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_GESTOR_AUTORIZOU');
		REG_FAT.NR_CPF_GESTOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_CPF_GESTOR');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DT_AUT_HOMONIMO_E(xml) THEN
				P_VALIDA_DT_AUT_HOMONIMO(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DT_AUT_HOMONIMO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO', REG_FAT.DT_AUT_HOMONIMO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_GESTOR_AUTORIZOU', REG_FAT.CD_GESTOR_AUTORIZOU);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_CPF_GESTOR', REG_FAT.NR_CPF_GESTOR);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_GLOSA_TOTAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_GLOSA_TOTAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
Cursor cChecaGlosaTotal is
        Select cd_motivo_glosa_sus
          From glosas_sus
         Where cd_reg_fat = pRegFat;
  vTpMotGlosaSus        glosas_sus.cd_motivo_glosa_sus%type;
BEGIN
   vTpMotGlosaSus := null;
   Open  cChecaGlosaTotal;
     Fetch cChecaGlosaTotal into vTpMotGlosaSus;
   Close cChecaGlosaTotal;
   If vTpMotGlosaSus = 'T' Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_28)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_28', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Conta registrada como glosa TOTAL, não é possivel apresentá-la'),TRUE);
   End if;
END;
PROCEDURE P_VALIDA_GLOSA_TOTAL (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GLOSA_TOTAL_E(xml) THEN
				P_VALIDA_GLOSA_TOTAL(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GLOSA_TOTAL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>prc_habilita_desabilita_guia</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_HABILITA_DESABILITA_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pbLimpaCampo in boolean, reg_fat IN OUT NOCOPY REG_FATRec) IS
vSnMutirao remessa_fatura.sn_mutirao%type;
begin
  vSnMutirao := pack_sus.fnc_retorna_remessa_mutirao( pnCdMultiEmpresa => xml.multiEmpresa
                                                           ,pnCdRemessa      => reg_fat.cd_remessa );
  -- Desabilita o campo nr_guia pois o mesmo é preenchido automaticamente
    if vSnMutirao = 'S' then
      if pbLimpaCampo then
        reg_fat.nr_guia := null;
      end if;
        if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE') = 'TRUE' then
        PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE',false);
        end if;
      if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED') = 'TRUE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED',false);
       end if;
    -- Habilita o campo nr_guia pois o mesmo é preenchido manualmente
    elsif ( (vSnMutirao is null) or (vSnMutirao = 'N') ) and
            ( nvl(reg_fat.sn_fechada,'N') = 'N' )         then
        if pbLimpaCampo and
             length(reg_fat.nr_guia) < 13 then
            reg_fat.nr_guia := null;
        end if;
        if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE') = 'FALSE' then
          PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','UPDATEABLE',true);
        end if;
    if PKG_XML.GetPropVarChar2(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED') = 'FALSE' then
      PKG_XML.SetPropBoolean(xml, 'ITEM','REG_FAT.NR_GUIA','INSERT_ALLOWED',true);
    end if;
    end if;
exception
  when others then
    RAISE;
END;
PROCEDURE P_HABILITA_DESABILITA_GUIA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pbLimpaCampo boolean;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pbLimpaCampo:= PKG_XML.Getboolean(xml, 'pbLimpaCampo');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.SN_FECHADA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.SN_FECHADA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DESABILITA_GUIA_E(xml) THEN
				P_HABILITA_DESABILITA_GUIA(xml, pbLimpaCampo, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_HABILITA_DESABILITA_GUIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.SN_FECHADA', REG_FAT.SN_FECHADA);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Insere_ITREG_FAT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_INSERE_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat          in     number  ,
                             nLancto          IN OUT NOCOPY number  ,
                             vProcedimento    in     varchar2,
                             dDate            in     date    ,
                             nSetor           in     number  ,
                             pPrestador       in     number  ,
                             nQtd             in     number  ,
                             vSN_Realizado    in     varchar2,
                             vAtualizaIT      out    varchar2) IS
  Cursor cHora Is
     Select Decode(to_char(a.dt_alta,'dd/mm'), to_char(a.dt_atendimento, 'dd/mm'), a.hr_alta, Sysdate)
          , r.nr_identificacao
          , r.dt_inicio
          , r.dt_final
       From Atendime a
          , Reg_Fat r
      Where a.Cd_Atendimento = r.Cd_Atendimento
        And r.Cd_Reg_Fat     = pRegFat;
  vTpPagto       Varchar2(1);
  dHora                 Date;
  nCdTpVin       Tipo_Vinculo.Cd_Tipo_Vinculo%Type;
  nGruFat        Gru_Fat.Cd_Gru_Fat%Type;
  vAtiMed        Ati_Med.Cd_Ati_Med%Type;
  vCBO_Prestador CBO.Cd_CBOS%Type;
  nApurarValor   Number;
  Saida          Exception;
  Conta_Fechada  Exception;
  dCompet        date;
  vnr_identificacao varchar2(1);
  vdt_inicio     date;
  vdt_final      date;
begin
  -- Recupera a hora para inserção do procedimento
  Open cHora;
      Fetch cHora into dHora, vnr_identificacao, vdt_inicio, vdt_final;
  Close cHora;
  --dCompet := trunc(dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(vnr_identificacao, vdt_inicio, vdt_final, null),'MM');
  dCompet:= dbamv.PKG_SUS_REGRA_PROCEDIMENTO.F_DATA_AVALIACAO(vProcedimento, vdt_final); -- PDA 565313
  -- Abandona processo se a conta estiver fechada.
  If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_FECHADA(xml, pRegFat) Then
    Raise Conta_Fechada;
  End If;
  -- Caso o item já conste nos itens da conta oriundo do centro cirúrgico
  -- o processo é encerrado.
  If Pkg_ffis_M_LACTO_AIH_P321.F_ITEM_CENTRO_CIRURGICO(xml, pRegFat,vProcedimento) Then
    Raise Saida;
  End If;
    -- Caso o procedimento seja de cirurgia multipla o processo é cancelado
    If Pkg_ffis_M_LACTO_AIH_P321.F_F_CONTA_CIR_MULTIPLA(xml, vProcedimento,dCompet) Then
        Raise Saida;
    End If;
  -- Recupero o próximo lançamento (cd_lançamento)
  nLancto   := Pkg_ffis_M_LACTO_AIH_P321.F_PK_ITREG_FAT(xml, pRegFat);
  -- Recupero o próximo grupo de faturamento (cd_gru_fat)
  nGruFat := Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_GRU_FAT(xml, vProcedimento, dDate); --OP 35293
  -- Recupero a Atividade médica para os itens da conta (quando houver)
  vAtiMed:= Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_ATI_MED_ITEM(xml, vProcedimento,dCompet);
  -- Recupero os dados do prestador
  if pPrestador is not null then
    nCdTpVin := FNC_FFIS_DEFINE_TIPO_VINCULO(pPrestador);
    vTpPagto := Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_TIPO_PAGTO(xml, pPrestador);
    -- lançamento Automático do CBO relacionados com a Empresa, Procedimento e Prestador.
    vCBO_Prestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_CBO_PRESTADOR(xml, pPrestador,vProcedimento, dCompet);
    -- lançamento padrão da apurAção do valor para o prestador.
    nApurarValor:= Pkg_ffis_M_LACTO_AIH_P321.F_LANCA_APURAR_VALOR(xml, pPrestador);
  end if;
  -- Se o procedimento for de parto seráo inserido os dados padrões
  Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_DADOS_PARTO(xml, pRegFat,vProcedimento);
  -------------------------------------------------------
  INSERT INTO ITREG_FAT ( CD_GRU_FAT,
                                 CD_LANCAMENTO,
                                 CD_SUS,
                                 CD_PRO_FAT,
                                 CD_REG_FAT,
                                 CD_ATI_MED,
                                 CD_SETOR,
                                 CD_SETOR_PRODUZIU,
                                 CD_PRESTADOR,
                                 CD_TIPO_VINCULO,
                                 TP_PAGAMENTO,
                                 DT_LANCAMENTO,
                                 HR_LANCAMENTO,
                                 QT_LANCAMENTO,
                                 SN_PERTENCE_PACOTE,
                                 VL_PERCENTUAL_MULTIPLA,
                                 SN_PROCED_AUTORIZADO,
                                 SN_PROCED_REALIZADO,
                                 CD_PROCEDIMENTO,
                                 TP_APURAR_VALOR,
                                 CD_CBO_PRESTADOR)
                        VALUES ( Nvl(nGruFat,10),
                                 nLancto,
                                 '00000000',
                                 'X0000000',
                                 pRegFat,
                                 vAtiMed,
                                 nSetor,
                                 nSetor,
                                 pPrestador,
                                 nCdTpVin,
                                 vTpPagto,
                                 dDate,
                                 dHora,
                                 Decode(nQtd,0,1,nQtd),
                                 'N',
                                 1,
                                 'N',
                                 vSN_Realizado,
                                 vProcedimento,
                                 nApurarValor,
                                 vCBO_Prestador);
   -- Atualiza bloco de itens conta
   vAtualizaIT := 'S';
Exception
    When No_Data_Found Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_29)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_29', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Grupo de Faturamento não cadastrado para procedimento %s.%sAção: Entre em contato com o setor de informática e solicite atualização das tabelas.'
				  , arg_list(vProcedimento, chr(10))),true);
  When Conta_Fechada Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_30)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_30', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é possível inserir registro com conta fechada!.'),False);
  When Saida Then
   -- não Atualiza bloco de itens conta
   vAtualizaIT := 'N';
end;
PROCEDURE P_INSERE_ITREG_FAT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat number;
	nLancto number;
	vProcedimento varchar2(4000);
	dDate date;
	nSetor number;
	pPrestador number;
	nQtd number;
	vSN_Realizado varchar2(4000);
	vAtualizaIT varchar2(4000);
	pnr_identificacao varchar2(1);
    pdt_inicio date;
    pdt_final date;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
		nLancto:= PKG_XML.Getnumber(xml, 'nLancto');
		vProcedimento:= PKG_XML.Getvarchar2(xml, 'vProcedimento');
		dDate:= PKG_XML.Getdate(xml, 'dDate');
		nSetor:= PKG_XML.Getnumber(xml, 'nSetor');
		pPrestador:= PKG_XML.Getnumber(xml, 'pPrestador');
		nQtd:= PKG_XML.Getnumber(xml, 'nQtd');
		vSN_Realizado:= PKG_XML.Getvarchar2(xml, 'vSN_Realizado');
		vAtualizaIT:= PKG_XML.Getvarchar2(xml, 'vAtualizaIT');
		pnr_identificacao:= PKG_XML.Getvarchar2(xml, 'pnr_identificacao');
        pdt_inicio:= PKG_XML.Getvarchar2(xml, 'pdt_inicio');
        pdt_final:= PKG_XML.Getvarchar2(xml, 'pdt_final');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_ITREG_FAT_E(xml) THEN
				P_INSERE_ITREG_FAT(xml, pRegFat, nLancto, vProcedimento, dDate, nSetor, pPrestador, nQtd, vSN_Realizado, vAtualizaIT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_ITREG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.Setnumber(xml, 'nLancto', nLancto);
		PKG_XML.Setvarchar2(xml, 'vAtualizaIT', vAtualizaIT);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>MONTAR_EQUIPE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_MONTAR_EQUIPE (xml IN OUT NOCOPY PKG_XML.XmlContext, nRegFat  in number,
                         nLancto  in number,
                         vProced  in Varchar2, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec) IS
Cursor cCirurgiaMultipla IS Select nvl(sn_cirurgia_multipla, 'N')
                                From procedimento_sus_detalhe
                               where cd_procedimento = vProced;
    vTpPagto       varchar2(1);
    vExigeEquipe     Varchar2(1);
  nNumeroAux         Number;
  vAtoAnest             Varchar2(1);
  vSnCirMult       Varchar2(1);
  nPrestador     Number;
  nVinculo       Number;
    Cancela_Equipe Exception;
begin
    Open  cCirurgiaMultipla;
      Fetch cCirurgiaMultipla Into vSnCirMult;
    Close cCirurgiaMultipla;
    If vSnCirMult = 'S' AND vProced <> '0308010043' Then
        return;
    End if;
  -- Verifica se o procedimento exige equipe médica, Anestesista e se tem Auxiliares
  Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, vProced
                       ,vExigeEquipe
                       ,nNumeroAux
                       ,vAtoAnest);
  If vExigeEquipe = 'S' then --and (nNumeroAux > 0 or vAtoAnest = 'S') Then   --OP 33984
      -------------------------- Analisa Remonte de Equipe Medica -----------------------------
        if global.vChange  = 'S' then
        global.vChange := 'N';
        DELETE FROM ITLAN_MED
         WHERE itlan_med.CD_REG_FAT    = nRegFat
           AND itlan_med.CD_LANCAMENTO = nLancto;
      else
        raise Cancela_Equipe;
      end if;
        -----------------------------------------------------------------------------------------
    nPrestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_PRESTADOR_AIH(xml);
    If nPrestador Is Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_31)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_31', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador padrão não cadastrado para esta empresa. '),TRUE);
    End If;
    vTpPagto := Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_TIPO_PAGTO(xml, nPrestador);
    nVinculo := FNC_FFIS_DEFINE_TIPO_VINCULO(nPrestador);
    -- não monta a equipe médica se o item for oriundo do FSCC
    If Pkg_ffis_M_LACTO_AIH_P321.F_ITEM_CENTRO_CIRURGICO(xml, nRegFat,vProced) Then
      Raise Cancela_Equipe;
    End If;
    -- VALORES FIXOS PARA EQUIPE
      ----------------------------
      -- 01 cirurgião
      -- 02 1. AUXILIAR
      -- 03 2. AUXILIAR
      -- 04 3. AUXILIAR
      -- 05 DEMAIS AUXILIARES
      -- 06 ANESTESISTA
    -- Lança um Cirurgiao na equipe
        vTpPagto   := 'F';
        insert into itlan_med (cd_reg_fat,
                                     cd_lancamento,
                                     cd_ati_med,
                                     cd_prestador,
                                     cd_tipo_vinculo,
                                     tp_pagamento)
               values               (nRegFat,
                                     nLancto,
                                     '01',
                                     nPrestador,
                                     nVinculo,
                                     vTpPagto );
      --
      if vAtoAnest = 'S' then
          insert into itlan_med (cd_reg_fat,
                                       cd_lancamento,
                                       cd_ati_med,
                                       cd_prestador,
                                       cd_tipo_vinculo,
                                       tp_pagamento)
                 values               (nRegFat,
                                       nLancto,
                                       '06',
                                       nPrestador,
                                       nVinculo,
                                       vTpPagto);
      End if;
    -- Lança Auxiliares na equipe
    if nNumeroAux > 0 then
      for i in 2 .. (nNumeroAux + 1) loop
        insert into itlan_med (cd_reg_fat,
                                     cd_lancamento,
                                     cd_ati_med,
                                     cd_prestador,
                                     cd_tipo_vinculo,
                                     tp_pagamento)
               values               (nRegFat,
                                     nLancto,
                                     '0'||to_char(i),
                                     nPrestador,
                                     nVinculo,
                                     vTpPagto);
      end loop;
      end if;
      CG$CTRL.REFRESH_ITLAN_MED := 'S';      -- Atualiza Bloco de Equipe Medica
  Else
      DELETE FROM ITLAN_MED
       WHERE itlan_med.CD_REG_FAT    = nRegFat
         AND itlan_med.CD_LANCAMENTO = nLancto;
  End if;
Exception
  when Cancela_Equipe then
    Null;
END;
PROCEDURE P_MONTAR_EQUIPE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	nRegFat number;
	nLancto number;
	vProced Varchar2(4000);
	cg$ctrl CG$CTRLRec;
	global GlobalsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nRegFat:= PKG_XML.Getnumber(xml, 'nRegFat');
		nLancto:= PKG_XML.Getnumber(xml, 'nLancto');
		vProced:= PKG_XML.GetVarchar2(xml, 'vProced');
		CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
		global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_EQUIPE_E(xml) THEN
				P_MONTAR_EQUIPE(xml, nRegFat, nLancto, vProced, CG$CTRL, global);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_EQUIPE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>chk_lcto_uti</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHK_LCTO_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat  In Number
                      ,pLcto    In Number
                      ,DtComp   In Date) IS
nAchou        Number;
BEGIN
  Select Count(*)
    Into nAchou
    From Diaria_UTI_SUS
   Where Cd_Reg_Fat                 = pRegFat
     And Cd_Lancamento              = pLcto
     And Trunc(Dt_Competencia,'MM') = Trunc(DtComp,'MM');
  If nAchou > 1 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_32)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_32', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Competência de UTI já informada, verifique!'),true);
  End If;
End;
PROCEDURE P_CHK_LCTO_UTI (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLcto Number;
	DtComp Date;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLcto:= PKG_XML.GetNumber(xml, 'pLcto');
		DtComp:= PKG_XML.GetDate(xml, 'DtComp');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_LCTO_UTI_E(xml) THEN
				P_CHK_LCTO_UTI(xml, pRegFat, pLcto, DtComp);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_LCTO_UTI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_MODALIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pModalidade In Varchar2) IS
nAchou Number;
  Saida Exception;
BEGIN
    If pProcedimento Is Null Then
        Raise Saida;
    End If;
 If pModalidade Is Null Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_33)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_33', 'PKG_FFIS_M_LACTO_AIH_P321', 'Aviso: Modalidade de atendimento da conta não informado, verifique!'),false);
 Else
    Select Count(*)
      Into nAchou
      From Procedimento_SUS_Modalidade
     Where Cd_Procedimento = pProcedimento
       And Tp_Modalidade_Atendimento = pModalidade;
   If nAchou = 0 Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_34)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_34', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Modalidade de atendimento informado inválido para procedimento realizado.'),false);
   End If;
  End If;
 Exception
      When Saida Then
        Null;
EnD;
PROCEDURE P_VALIDA_MODALIDADE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pModalidade Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pModalidade:= PKG_XML.GetVarchar2(xml, 'pModalidade');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_MODALIDADE_E(xml) THEN
				P_VALIDA_MODALIDADE(xml, pProcedimento, pModalidade);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_MODALIDADE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>VALIDA_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
/*	PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
nAchou Number;
BEGIN
  Select Count(*)
    Into nAchou
    From Procedimento_SUS_Espec_Leito
   Where Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
     And Cd_Espec_SUS    = Reg_Fat.Cd_Espec_SUS;
  If Reg_Fat.Cd_Espec_SUS Is Not Null And Reg_Fat.Cd_Procedimento_Realizado Is Not Null Then
    If nAchou < 1 Then
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                    ,'Atenção: Especialidade informada '||Reg_Fat.Cd_Espec_SUS||' inválida para procedimento realizado '||Reg_Fat.Cd_Procedimento_Realizado,false);
         Reg_Fat.Cd_Espec_SUS:= Null;
    ElsIf Reg_Fat.Cd_Espec_SUS Is Null And Reg_Fat.Cd_Procedimento_Realizado Is Not Null Then
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                    ,'Aviso: Especialidade não informada, verifique.',false);
    End If;
  End If;
END;
PROCEDURE P_VALIDA_ESPEC_SUS_REG_FAT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.CD_ESPEC_SUS:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_REG_FAT_E(xml) THEN
				P_VALIDA_ESPEC_SUS(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_REG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS', REG_FAT.CD_ESPEC_SUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
*/
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PROCEDIMENTO_HOSPITAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, formParams IN OUT NOCOPY FormParamsRec) IS
nPrestador Number;
BEGIN
  nPrestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_PRESTADOR_AIH(xml);
  For record in (Select itre.Cd_Procedimento
                   From ItReg_Fat  itre
                      , procedimento_sus_detalhe  prdt
                  Where itre.cd_procedimento = prdt.cd_procedimento
                    and itre.Cd_Reg_Fat = pRegFat
                    And (prdt.SN_DIARIA_ACOMPANHANTE = 'S'
                     Or  prdt.SN_DIARIA_UTI = 'S')
                    And itre.Cd_Prestador <> nPrestador) Loop
    If Nvl(dbamv.pkg_mv2000.le_cliente,0) <> 971 then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_35)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_35', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s só permite lançamento para prestador padrão do hospital (%s).', arg_list(record.Cd_Procedimento, nPrestador)),true);
    End if;
  End loop;
END;
PROCEDURE P_VAL_PROCEDIMENTO_HOSPITAL (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
--		formParams.P_HOSPITAL:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_HOSPITAL');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PROCEDIMENTO_HOSPITAL_E(xml) THEN
				P_VAL_PROCEDIMENTO_HOSPITAL(xml, pRegFat, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PROCEDIMENTO_HOSPITAL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CHK_ATI_MED_06</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHK_ATI_MED_06 (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Reg_Fat Number, pCd_Lancamento Number) IS
Cursor cCBO_Ati01 Is Select Cd_Prestador
                            , Cd_CBO_Prestador
                         From ItLan_Med
                        Where Cd_Reg_Fat    = pCd_Reg_Fat
                          And Cd_Lancamento = pCd_Lancamento
                          And Cd_Ati_Med    = '01';
  Cursor cCBO_Ati06 Is Select Cd_Prestador
                            , Cd_CBO_Prestador
                         From ItLan_Med
                        Where Cd_Reg_Fat    = pCd_Reg_Fat
                          And Cd_Lancamento = pCd_Lancamento
                          And Cd_Ati_Med    = '06';
  rCBO_Ati01 cCBO_Ati01%RowType;
  rCBO_Ati06 cCBO_Ati06%RowType;
  vCboAnest Dbamv.CBOS.Cd_CBOS%Type;
Begin
  Open cCBO_Ati01;
    Fetch cCBO_Ati01 Into rCBO_Ati01;
  Close cCBO_Ati01;
  Open cCBO_Ati06;
    Fetch cCBO_Ati06 Into rCBO_Ati06;
  Close cCBO_Ati06;
  if F_GET_DT_INTERNACAO(xml,pCd_Reg_Fat) < to_date('01082011', 'ddmmyyyy') then
		vCboAnest := '223104';
	else
		vCboAnest := '225151';
  end if;
 If rCBO_Ati01.Cd_Prestador = rCBO_Ati06.Cd_Prestador And (Nvl(rCBO_Ati01.Cd_CBO_Prestador,'0') <> Nvl(rCBO_Ati06.Cd_CBO_Prestador,'0') And rCBO_Ati06.Cd_CBO_Prestador <> vCboAnest) Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_113)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_113', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro1: cirurgião mesmo que o Anestesista, lançar o CBO %s.', arg_list(rCBO_Ati01.Cd_CBO_Prestador)),true);
  ElsIf rCBO_Ati01.Cd_Prestador <> rCBO_Ati06.Cd_Prestador And rCBO_Ati06.Cd_CBO_Prestador <> vCboAnest Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_114)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_114', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro2: CBO não é Anestesiologia, por favor lançar o CBO %s.', arg_list(vCboAnest)),true); -- PDA 535088
 End If;
End;
PROCEDURE P_CHK_ATI_MED_06 (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCd_Reg_Fat Number;
	pCd_Lancamento Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCd_Reg_Fat:= PKG_XML.GetNumber(xml, 'pCd_Reg_Fat');
		pCd_Lancamento:= PKG_XML.GetNumber(xml, 'pCd_Lancamento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_ATI_MED_06_E(xml) THEN
				P_CHK_ATI_MED_06(xml, pCd_Reg_Fat, pCd_Lancamento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_ATI_MED_06_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_PACOTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_PACOTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) IS
BEGIN
  Update ItReg_fat
   Set SN_Pertence_Pacote = 'S'
 Where Cd_Reg_Fat = pRegFat
   And Cd_Procedimento In (Select Cd_Procedimento
                             From Procedimento_SUS_Detalhe
                            Where SN_Procedimento_Faturado = 'N')
  And Substr(Cd_Procedimento,1,2)= '99';
END;
PROCEDURE P_DEFINE_PACOTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PACOTE_E(xml) THEN
				P_DEFINE_PACOTE(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_PACOTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_CORRIGE_LCTO_CBO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_CORRIGE_LCTO_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pCompet in Date, pAtualiza in out Varchar2) IS
    	Cursor cExecRegrExp(P_PROCEDIMENTO varchar2) Is
		Select count(*)
          From DBAMV.EXCECAO_REGRA_EXPORTACAO
         Where CD_PROCEDIMENTO = P_PROCEDIMENTO
		   And CD_MULTI_EMPRESA = PKG_MV2000.LE_EMPRESA;
		nExcecao number := 0;
    nControle number:= 0;
BEGIN
  For record In (Select i.Cd_Reg_Fat
                      , i.Cd_lancamento
                      , i.Cd_Procedimento
                      , v.sn_exige_cpf_cbo
                      ,Decode(dbamv.fnc_ffis_prestador_exportacao(i.Cd_Reg_Fat,i.Cd_Lancamento)
                              ,0,i.Cd_Prestador
                              ,Dbamv.Fnc_FFIS_Prestador_Exportacao(i.Cd_Reg_Fat,i.Cd_Lancamento)) cd_prestador
                   From dbamv.Reg_Fat r
                      , dbamv.ItReg_Fat i
                      , dbamv.procedimento_detalhe_vigencia v
                  Where r.Cd_Reg_Fat = i.Cd_Reg_Fat
                    and i.cd_procedimento = v.cd_procedimento
                    and pCompet BETWEEN v.dt_validade_inicial
                                    AND Nvl(v.dt_validade_final, pCompet)
                    And i.cd_prestador Is Not Null
                    And i.Cd_CBO_Prestador Is Not Null
                    And i.Cd_Tipo_Vinculo = 1
                    And r.Cd_Reg_Fat = pRegFat) Loop
    Open cExecRegrExp(record.cd_procedimento);
    Fetch cExecRegrExp Into nExcecao;
    Close cExecRegrExp;
    If nExcecao <= 0 Then
        select Count(*)
          into nControle
          from dbamv.procedimento_cbo_vigencia
         where cd_procedimento = record.cd_procedimento
           and Trunc(pCompet, 'MM') BETWEEN dt_validade_inicial
                                        AND Nvl(dt_validade_final, Trunc(pCompet, 'MM'));
        if nControle > 0 and record.sn_exige_cpf_cbo = 'S' Then
            PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:','Prestador ('||record.cd_prestador||') CNPJ com o procedimento ('||record.cd_procedimento||') que exige CNS/CBO.',true);
        END IF;
    END IF;
    Update ItReg_Fat
       Set Cd_CBO_Prestador = Null
     Where Cd_Reg_Fat       = record.Cd_Reg_Fat
       And Cd_lancamento    = record.Cd_lancamento
       And Cd_Procedimento  = record.Cd_Procedimento;
    pAtualiza := 'S';
  End Loop;
  For record In (Select ItReg_Fat.Cd_Reg_Fat
                      , ItReg_Fat.Cd_lancamento
                      , ItReg_Fat.Cd_Procedimento
                   From Reg_Fat
                      , ItReg_Fat
                  Where Reg_Fat.Cd_Reg_Fat = ItReg_Fat.Cd_Reg_Fat
                    And ItReg_Fat.cd_prestador Is Null
                    And ItReg_Fat.Cd_CBO_Prestador Is Not Null
                    And Reg_Fat.Cd_Reg_Fat = pRegFat) Loop
      Update ItReg_Fat
         Set Cd_CBO_Prestador = Null
       Where Cd_Reg_Fat       = record.Cd_Reg_Fat
         And Cd_lancamento    = record.Cd_lancamento
         And Cd_Procedimento  = record.Cd_Procedimento;
      pAtualiza := 'S';
  End Loop;
  Commit;
  if pAtualiza is null or pAtualiza = '' then
    pAtualiza := 'N';
  end if;
END;
PROCEDURE P_DML_CORRIGE_LCTO_CBO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
    pCompet DATE;
    pAtualiza char(1);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat := PKG_XML.GetNumber(xml, 'pRegFat');
        pCompet := PKG_XML.GetDate(xml, 'pCompet');
        pAtualiza := PKG_XML.GetVARCHAR2(xml, 'pAtualiza');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_LCTO_CBO_E(xml) THEN
				P_DML_CORRIGE_LCTO_CBO(xml, pRegFat, pCompet, pAtualiza);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_LCTO_CBO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Prc_Lanca_CBO_Prestador</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_LANCA_CBO_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
Cursor cCBO Is
    Select SN_Exige_CPF_CBO, trunc(dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(reg.nr_identificacao,reg.dt_inicio,reg.dt_final, null),'MM') compet
      From dbamv.Procedimento_detalhe_vigencia pdv
         , dbamv.reg_fat reg
         , dbamv.itreg_fat itr
     Where itr.cd_reg_fat = reg.cd_reg_fat
       and reg.cd_reg_fat = itreg_fat.CD_REG_FAT
       and pdv.Cd_Procedimento = itr.cd_procedimento
       and itr.cd_procedimento = itreg_fat.CD_PROCEDIMENTO
       and dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(reg.nr_identificacao,reg.dt_inicio,reg.dt_final, null)
           between pdv.dt_validade_inicial AND Nvl(pdv.dt_validade_final, dbamv.pkg_ffis_valida_lancamento_aih.FNC_RETORNA_CMPT_DETALHE(reg.nr_identificacao,reg.dt_inicio,reg.dt_final, null));
  Saida Exception;
      vSN Varchar2(1);
  pCompet date;
Begin
    Open cCBO;
      Fetch cCBO Into vSN, pCompet;
  Close cCBO;
    -- Aborta se já estiver preenchido e o procedimento obrigar
    If  ItReg_Fat.Cd_CBO_Prestador Is Not Null And vSN = 'S' Then
      Raise Saida;
    End If;
    -- Limpa o campo se o procedimento não obrigar
    If  ItReg_Fat.Cd_CBO_Prestador Is Not Null And vSN = 'N' Then
      ItReg_Fat.Cd_CBO_Prestador := null;
    End If;
  If ItReg_Fat.Cd_Tipo_Vinculo <> 1 Then
      If ItReg_Fat.Cd_CBO_Prestador Is Null Then
        ItReg_Fat.Cd_CBO_Prestador:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_CBO_PRESTADOR(xml,ITREG_FAT.CD_PRESTADOR,ITREG_FAT.CD_PROCEDIMENTO, pCompet);
      End If;
  Else
      If ItReg_Fat.Cd_CBO_Prestador is not null then
        ItReg_Fat.Cd_CBO_Prestador := null;
      end if;
  End if;
Exception
      When Saida Then
        Null;
End;
PROCEDURE P_LANCA_CBO_PRESTADOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itreg_fat ITREG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		ITREG_FAT.CD_CBO_PRESTADOR:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_CBO_PRESTADOR');
		ITREG_FAT.CD_TIPO_VINCULO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_TIPO_VINCULO');
		ITREG_FAT.CD_PRESTADOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_PRESTADOR');
		ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_CBO_PRESTADOR_E(xml) THEN
				P_LANCA_CBO_PRESTADOR(xml, ITREG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_CBO_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_CBO_PRESTADOR', ITREG_FAT.CD_CBO_PRESTADOR);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_TIPO_VINCULO', ITREG_FAT.CD_TIPO_VINCULO);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_PRESTADOR', ITREG_FAT.CD_PRESTADOR);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CHK_DIAS_PERIODO_VS_LACTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, pProcedimento In Varchar2) IS
BEGIN
  If FNC_FFIS_VALIDA_CALC_AIH (pProcedimento) Then
    Declare
      Cursor cDados Is select decode(nr_identificacao, 1, nvl((trunc(reg_fat.dt_final) - trunc(reg_fat.dt_inicio)),0), (to_number(substr(to_char(dt_final,'DDMMYYYY'),1,2))-1)) Qt_Lancamento
                            , motivo_cobranca_sus.cd_motivo
                            , sn_pago_por_dia
                         from reg_fat reg_fat
                            , motivo_cobranca_sus
                            , procedimento_sus_detalhe pdetal
                        where reg_fat.cd_reg_fat       = pRegFat
                          and reg_fat.cd_procedimento_realizado = pdetal.cd_procedimento
                          and reg_fat.cd_mot_alt       = motivo_cobranca_sus.cd_motivo;
      rDados      cDados%RowType;
      nQtLancItem Number;
      nUTI        Number;
      nUnificada  Number;
    Begin
      Open cDados;
        Fetch cDados Into rDados;
      Close cDados;
      nUTI:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_DIAS_UTI(xml, pRegFat);
      nUnificada:= Pkg_ffis_M_LACTO_AIH_P321.F_DIAS_DIFERENCA_UNIFICACAO(xml, pRegFat);
      If substr(rDados.Cd_motivo,1,1) in (2,3,4) then
        rDados.Qt_Lancamento:= (rDados.Qt_Lancamento + 1 ) - nUnificada - nUTI;
      End If;
      If rDados.Qt_Lancamento = 0 and rDados.SN_Pago_Por_Dia = 'S' Then
        rDados.Qt_Lancamento:= 1;
      End If;
      Select Sum(Qt_Lancamento) Qt_Lancamento
        Into nQtLancItem
        From ItReg_Fat
       Where ItReg_Fat.Cd_Reg_Fat = pRegFat
         And ItReg_Fat.Cd_Procedimento = pProcedimento;
      If rDados.Qt_Lancamento > nQtLancItem Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_38)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_38', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s com cobrança de dias (%s) inferior ao permitido pelo período da conta (%s) - Dias de UTI(%s).'
					  , arg_list(pProcedimento, nQtLancItem, (rDados.Qt_Lancamento+nUTI), nUTI)),false);
      End If;
      If rDados.Qt_Lancamento < nQtLancItem  Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_39)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_39', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s com cobrança de dias (%s) superior ao permitido pelo período da conta (%s) - Dias de UTI(%s).'
					  , arg_list(pProcedimento, nQtLancItem, (rDados.Qt_Lancamento+nUTI), nUTI)),true);
      End If;
    End;
  End If;
END;
PROCEDURE P_CHK_DIAS_PERIODO_VS_LACTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_DIAS_PERIODO_VS_LACTO_E(xml) THEN
				P_CHK_DIAS_PERIODO_VS_LACTO(xml, pRegFat, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CHK_DIAS_PERIODO_VS_LACTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_NR_GUIA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pAIH In Varchar2) IS
Cursor cNrGuia is
  Select Cd_reg_fat
       , Nr_Guia
       , Cd_Remessa
    From Reg_Fat
   Where Cd_Atendimento in (Select Cd_Atendimento
                              From Reg_fat
                             Where Cd_Reg_Fat = pRegFat)
     And Cd_Reg_Fat <> pRegFat;
  vNrGuia  cNrGuia%Rowtype;
  dCompet1 Date;
  dCompet2 Date;
  Saida    Exception;
BEGIN
    For Record in cNrGuia Loop
    dCompet1:=    Pkg_ffis_M_LACTO_AIH_P321.F_F_COMPET_CONTA(xml, pRegFat);
    dCompet2:=    Pkg_ffis_M_LACTO_AIH_P321.F_F_COMPET_CONTA(xml, record.Cd_Reg_Fat);
        if not Pkg_ffis_M_LACTO_AIH_P321.F_F_AIH_CONTINUACAO(xml, pRegFat) and to_char(dCompet1,'mm/rrrr') = to_char(dCompet2,'mm/rrrr') and pAIH = Record.nr_guia then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_40)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_40', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro:  Número de Guia já Existente, Favor Digitar Outro Número de Guia Válido.'),true);
        end if;
  End Loop;
END;
PROCEDURE P_VALIDA_NR_GUIA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pAIH Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pAIH:= PKG_XML.GetVarchar2(xml, 'pAIH');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_GUIA_E(xml) THEN
				P_VALIDA_NR_GUIA(xml, pRegFat, pAIH);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_NR_GUIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_REG_CIVIL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_REG_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
BEGIN
  For record In (Select Sum(Nvl(Cd_Pai,0))   Cd_Pai
                      , Sum(Nvl(Cd_Filho,0)) Cd_Filho
                   From (Select Cd_Lancamento Cd_Pai, 0 Cd_Filho
                           From ItReg_Fat
                          Where Cd_Reg_Fat = pRegFat
                            And Cd_Procedimento = '0801010047'
                            And Rownum = 1
                          Union
                         Select 0 cd_Pai, Cd_Lancamento Cd_Filho
                           From Registro_Civil
                          Where Cd_Reg_Fat = pRegFat)) Loop
    If record.Cd_Pai <> record.Cd_Filho Then
      Update Registro_Civil
         Set Cd_Lancamento = record.Cd_Pai
       Where Cd_Reg_Fat = pRegFat
         And Cd_Lancamento = record.Cd_Filho;
    End If;
    If record.Cd_Pai = 0 And record.Cd_Filho > 0 Then
      Delete Registro_Civil
       Where Cd_Reg_Fat = pRegFat
         And Cd_Lancamento = record.Cd_Filho;
    End If;
  End Loop;
  Commit;
END;
PROCEDURE P_DML_REG_CIVIL (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REG_CIVIL_E(xml) THEN
				P_DML_REG_CIVIL(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REG_CIVIL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_DADOS_LAQVASEC</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_DADOS_LAQVASEC (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pProcedimento in Varchar2) IS
  Cursor cDadosRea Is Select nvl(pd.sn_vasectomia, 'N') sn_vasectomia
                                             , nvl(pd.sn_laqueadura, 'N') sn_laqueadura
                                             , nvl(pd.sn_parto, 'N') sn_parto
                                             , nvl(pd.sn_cirurgia_multipla, 'N') sn_cirurgia_multipla
                                           From Dbamv.Procedimento_SUS_Detalhe pd
                                          Where pd.Cd_Procedimento = pProcedimento;
  rDadosRea cDadosRea%RowType;
  --PDA 528216 AAAJ 11/07/2012 Hosp ABC
    cursor cLaqVas is
    select it.cd_procedimento
         , pd.sn_vasectomia
         , pd.sn_laqueadura
         , pd.sn_parto
      from itreg_fat it
         , Procedimento_Detalhe_vigencia pd
     Where pd.Cd_Procedimento = it.cd_procedimento
       and trunc(it.dt_lancamento) between pd.dt_validade_inicial
                                   and Nvl(pd.dt_validade_final, trunc(it.dt_lancamento))
       and it.cd_reg_fat = pRegFat
       and it.sn_pertence_pacote = 'N'
       and nvl(it.sn_proced_realizado, 'N') = 'S'
       and (nvl(pd.sn_vasectomia, 'N') = 'S' or
            nvl(pd.sn_laqueadura, 'N') = 'S');
  rLaqVas cLaqVas%RowType;
  nAchou    Number;
  vAcao     varchar2(1);
  v_sn_vasectomia VARCHAR2(1):= 'N';
  v_sn_laqueadura VARCHAR2(1):= 'N';
BEGIN
  --PDA 528216AAAJ 11/07/2012 Hosp ABC --------------------------------------------------
  If pProcedimento Is Not Null Then
    Open cDadosRea;
      Fetch cDadosRea Into rDadosRea;
    Close cDadosRea;
    if nvl(rDadosRea.sn_cirurgia_multipla, 'N') = 'S' then
     rDadosRea := null;
      Select Count('X')
        into nAchou
        From Dbamv.Procedimento_Detalhe_vigencia pd
           , Dbamv.itreg_fat it
       Where pd.Cd_Procedimento = it.cd_procedimento
         and trunc(it.dt_lancamento) between pd.dt_validade_inicial
                                     and Nvl(pd.dt_validade_final, trunc(it.dt_lancamento))
         and it.cd_reg_fat = pRegFat
         and it.sn_pertence_pacote = 'N'
         and nvl(it.sn_proced_realizado, 'N') = 'S'
         and nvl(pd.sn_parto, 'N') = 'S';
      If nAchou > 0 then
          rDadosRea.SN_Parto := 'S';
      Else
          rDadosRea.SN_Parto := 'N';
      End if;
      for record in cLaqVas loop
            if v_sn_vasectomia = 'N' and record.sn_vasectomia = 'S' then
              v_sn_vasectomia := 'S';
            end if;
            if v_sn_laqueadura = 'N' and record.sn_laqueadura = 'S' then
              v_sn_laqueadura := 'S';
            end if;
      end loop;
      If v_sn_vasectomia = 'N' And v_sn_laqueadura = 'N' And rDadosRea.SN_Parto = 'N' Then
        vAcao := 'D';
      Elsif (v_sn_vasectomia = 'N' And v_sn_laqueadura = 'N') Then
        vAcao := 'U';
      End If;
    end if;
    if vAcao = 'D' then
      Select Count(*)
        Into nAchou
        From It_Parto
       Where Cd_Reg_Fat = pRegFat;
      If nAchou > 0 Then
        Delete It_Parto
         Where Cd_Reg_Fat = pRegFat;
      End If;
    elsif vAcao = 'U' then
      Update It_Parto
         Set cd_cid = null
           , qt_filhos = null
           , sn_gestacao_risco = null
           , cd_contraceptivo_anterior = null
           , cd_contraceptivo_atual = null
       Where Cd_Reg_Fat = pRegFat;
    end if;
    Commit;
  End If;
  -------------------------------------------------------------
END;
PROCEDURE P_DML_DADOS_LAQVASEC (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DADOS_LAQVASEC_E(xml) THEN
				P_DML_DADOS_LAQVASEC(xml, pRegFat, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DADOS_LAQVASEC_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_GRUPO_PROC_PADRAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2) IS
BEGIN
    For rec in (Select cd_procedimento
                            From procedimento_sus_detalhe
                           where cd_gru_pro is null ) Loop
        Update procedimento_sus_detalhe
           set cd_gru_pro = 70
         where cd_procedimento = rec.cd_procedimento;
         Pkg_ffis_M_LACTO_AIH_P321.P_P_COMMIT_FORM(xml, FSV_BLOCK_STATUS, FSV_MESSAGE_LEVEL);
  End Loop;
END;
PROCEDURE P_DEFINE_GRUPO_PROC_PADRAO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	FSV_BLOCK_STATUS VARCHAR2(4000);
	FSV_MESSAGE_LEVEL VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		FSV_MESSAGE_LEVEL:= PKG_XML.GetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_GRUPO_PROC_PADRAO_E(xml) THEN
				P_DEFINE_GRUPO_PROC_PADRAO(xml, FSV_BLOCK_STATUS, FSV_MESSAGE_LEVEL);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_GRUPO_PROC_PADRAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		PKG_XML.SetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL', FSV_MESSAGE_LEVEL);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_LANCAMENTO_PAI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_LANCAMENTO_PAI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
nAchou Number;
BEGIN
  -- Corrige a coluna de lançamento pai caso tenha perdido a referência.
  Select Count(*)
    Into nAchou
    From ITREG_FAT
   where CD_LANCAMENTO_PAI is not null;
   if nAchou > 0 then
     UPDATE ITREG_FAT
        SET CD_LANCAMENTO_PAI = NULL
      WHERE CD_REG_FAT = pRegFat
        AND CD_LANCAMENTO_PAI NOT IN (SELECT CD_LANCAMENTO
                                        FROM ITREG_FAT
                                       WHERE CD_REG_FAT = pRegFat);
   end if;
   Commit;
END;
PROCEDURE P_DML_LANCAMENTO_PAI (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_LANCAMENTO_PAI_E(xml) THEN
				P_DML_LANCAMENTO_PAI(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_LANCAMENTO_PAI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_DIARIA_ACOMPANHANTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_DIARIA_ACOMPANHANTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pDA_Acomp in Number) IS
Cursor cDA_Item Is Select SUM(Qt_Lancamento)
                       From ItReg_Fat
                      Where Cd_Reg_Fat = pRegFat
                        And Cd_Procedimento In (Select Cd_Procedimento
                                                  From Procedimento_SUS_Detalhe
                                                 Where SN_Diaria_Acompanhante = 'S');
  Cursor cDA_Conta Is Select Nr_Diaria_Acompanhante
                        From Reg_Fat
                       Where Cd_Reg_Fat = pRegFat;
  nQtDA_Reg   number;
  nQtDA_ItReg number;
  vMsg        VARCHAR2(2000); -- pda 534769
BEGIN
    Open cDA_Item;
      Fetch cDA_Item into nQtDA_ItReg;
    Close cDA_Item;
  Open cDA_Conta;
    Fetch cDA_Conta into nQtDA_Reg;
  Close cDA_Conta;
  -- Executo a exclusão da diária de acompanhante
  If nvl(pDA_AComp,0) =  0 then
    Delete Diaria_UTI_SUS
      Where Cd_Reg_Fat = pRegFat
        And Cd_Lancamento in (Select Cd_Lancamento
                                From itreg_Fat
                               Where cd_procedimento in (select cd_procedimento
                                                           from procedimento_sus_detalhe
                                                          where sn_diaria_acompanhante = 'S')
                                 and cd_reg_fat = pRegFat);
    Delete
      From Itreg_Fat
     Where Cd_procedimento in (select cd_procedimento
                                 from procedimento_sus_detalhe
                                where sn_diaria_acompanhante = 'S')
       and Cd_reg_fat = pRegFat;
  End if;
  -- Caso encontre divergência, o lançamento de diária é atualizado
  If nQtDA_Reg <> nQtDA_ItReg And nQtDA_ItReg <> Nvl(pDA_Acomp,0) then
    -- PDA 534769 INI
    DBAMV.PKG_FFIS_VALIDA_LANCAMENTO_AIH.PRC_LANCA_QTD_COMPETENCIA(pRegFat, 'A', 'ACOMP', pDA_Acomp, vMsg);
/*
        UPDATE ITREG_FAT
           SET ITREG_FAT.QT_LANCAMENTO = nQtDA_ItReg
         WHERE ITREG_FAT.CD_REG_FAT = pRegFat
       AND ITREG_FAT.CD_PROCEDIMENTO IN (select cd_procedimento
                                           from procedimento_sus_detalhe
                                          where sn_diaria_acompanhante = 'S');
*/
    -- PDA 534769 FIM
  end if;
  Commit;
END;
PROCEDURE P_DML_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pDA_Acomp Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pDA_Acomp:= PKG_XML.GetNumber(xml, 'pDA_Acomp');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DIARIA_ACOMPANHANTE_E(xml) THEN
				P_DML_DIARIA_ACOMPANHANTE(xml, pRegFat, pDA_Acomp);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DIARIA_ACOMPANHANTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_CEP_PACIENTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_CEP_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec) IS
Cursor cCEP1 Is  SELECT cep.NM_LOCALIDADE,
                          cep.CD_UF
                     FROM CEP_LOCALIDADES cep,
                          CIDADE cida
                    WHERE cep.NM_LOCALIDADE = cida.NM_CIDADE
                      AND cep.CD_UF         = cida.CD_UF
                      AND cep.NR_CEP        = PACIENTE.NR_CEP;
  Cursor cCEP2 Is SELECT cida.CD_UF,
                         cida.NM_CIDADE
                    FROM CIDADE cida,
                         CEP_LOCALIDADES loca,
                         CEP_LOGRADOUROS logr
                   WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
                     AND loca.CD_UF         = cida.CD_UF
                     AND loca.NM_LOCALIDADE = cida.NM_CIDADE
                     AND logr.NR_CEP        = PACIENTE.NR_CEP;
  Cursor cCEP3 Is SELECT muem.NR_CEP,
                         loca.NM_LOCALIDADE,
                         muem.CD_UF,
                         muem.CD_CIDADE
                    FROM MULTI_EMPRESAS muem,
                         CEP_LOCALIDADES loca
                   where muem.CD_MULTI_EMPRESA = xml.multiEmpresa
                     and muem.NR_CEP           = loca.NR_CEP;
  Cursor cCEP4 Is SELECT muem.NR_CEP,
                     cida.CD_UF,
                     cida.NM_CIDADE,
                     cida.CD_CIDADE
                FROM CEP_LOCALIDADES loca
                   , CIDADE cida
                   , CEP_LOGRADOUROS logr
                   , MULTI_EMPRESAS muem
               WHERE logr.CD_LOCALIDADE    = loca.CD_LOCALIDADE
                 AND loca.CD_UF            = cida.CD_UF
                 AND loca.NM_LOCALIDADE    = cida.NM_CIDADE
                 AND muem.CD_MULTI_EMPRESA = xml.multiEmpresa
                 AND muem.NR_CEP           = logr.NR_CEP;
  Cursor cCEP5 Is SELECT muem.NR_CEP,
                         cida.CD_UF,
                         cida.NM_CIDADE,
                         cida.CD_CIDADE
                    FROM CEP_LOCALIDADES loca
                       , CIDADE cida
                       , CEP_LOGRADOUROS logr
                       , MULTI_EMPRESAS muem
                   WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
                     AND loca.CD_UF         = cida.CD_UF
                     AND loca.NM_LOCALIDADE = cida.NM_CIDADE
                     AND muem.NR_CEP        = logr.NR_CEP;
  Cursor cCEP6 Is SELECT cep.NR_CEP,
                         cida.CD_CIDADE
                    FROM CEP_LOCALIDADES cep,
                         CIDADE cida
                   WHERE cep.NM_LOCALIDADE = PACIENTE.DSP_NM_CIDADE
                     and cep.CD_UF         = PACIENTE.DSP_CD_UF
                     and cep.NM_LOCALIDADE = cida.NM_CIDADE
                     and cep.CD_UF         = cida.CD_UF;
   vCidade   varchar2(50);
   vUF       varchar2(02);
   nCEP      number;
   nCdCidade number;
   CEP_Cidade_UF_Nao_Condiz exception;
   Digite_o_CEP             exception;
begin
   begin
   -- ------------- Informado CEP, Cidade e UF ----------------
      if PACIENTE.NR_CEP        is Not Null and
         PACIENTE.DSP_NM_CIDADE is Not Null and
         PACIENTE.DSP_CD_UF     is Not Null then
         OPEN cCEP1;
           FETCH cCEP1 INTO vCidade, vUF;
         CLOSE cCEP1;
         if vCidade <> PACIENTE.DSP_NM_CIDADE or
            vUF     <> PACIENTE.DSP_CD_UF     then
            raise CEP_Cidade_UF_Nao_Condiz;
         end if;
      end if;
   exception
      when NO_DATA_FOUND then
           begin
              OPEN cCEP2;
                FETCH cCEP2 INTO vCidade, vUF;
              CLOSE cCEP2;
              if vCidade <> PACIENTE.DSP_NM_CIDADE or
                 vUF     <> PACIENTE.DSP_CD_UF     then
                 raise CEP_Cidade_UF_Nao_Condiz;
              end if;
           exception
              when NO_DATA_FOUND then
                   raise NO_DATA_FOUND;
           end;
   end;
   -- ---------------------------------------------------------
   -- ------------------ Nada Informado -----------------------
   begin
      if PACIENTE.NR_CEP        is Null and
         PACIENTE.DSP_NM_CIDADE is Null and
         PACIENTE.DSP_CD_UF     is Null then
              OPEN cCEP3;
                FETCH cCEP3 INTO PACIENTE.NR_CEP,
                                 PACIENTE.DSP_NM_CIDADE,
                                 PACIENTE.DSP_CD_UF,
                                 PACIENTE.CD_CIDADE;
              CLOSE cCEP3;
      end if;
   exception
      when NO_DATA_FOUND then
           begin
              OPEN cCEP4;
                FETCH cCEP4 INTO PACIENTE.NR_CEP,
                                 PACIENTE.DSP_CD_UF,
                                 PACIENTE.DSP_NM_CIDADE,
                                 PACIENTE.CD_CIDADE;
              CLOSE cCEP4;
           exception
              when NO_DATA_FOUND then
                   raise NO_DATA_FOUND;
           end;
   end;
   -- ---------------------------------------------------------
   -- ------------ So Informado a Cidade ou Estado -------------
   declare
      vCep      varchar2(8);
      vUF       varchar2(2);
      nCdCidade number;
      vDsCidade varchar2(30);
   begin
      if PACIENTE.NR_CEP is Null then
              OPEN cCEP5;
                FETCH cCEP5 INTO vCep,
                                 vUF,
                                 vDsCidade,
                                 nCdCidade ;
              CLOSE cCEP5;
         if vDsCidade = PACIENTE.DSP_NM_CIDADE and vUF = PACIENTE.DSP_CD_UF then
            PACIENTE.NR_CEP        := vCep;
            PACIENTE.DSP_NM_CIDADE := vDsCidade;
            PACIENTE.DSP_CD_UF     := vUF;
            PACIENTE.CD_CIDADE     := nCdCidade;
         else
              OPEN cCEP6;
                FETCH cCEP6 INTO PACIENTE.NR_CEP,
                                 PACIENTE.CD_CIDADE;
              CLOSE cCEP6;
            if PACIENTE.NR_CEP is null then
               raise Digite_o_CEP;
            end if;
         end if;
      end if;
   exception
      when NO_DATA_FOUND then
           raise NO_DATA_FOUND;
   end;
   -- ---------------------------------------------------------
 Begin
   if PACIENTE.CD_PACIENTE is Null then
      select SEQ_PACIENTE.NEXTVAL
        into PACIENTE.CD_PACIENTE
        from SYS.DUAL;
   end if;
  Paciente.Cd_Multi_Empresa := formParams.P_Empresa;
  Exception
    when NO_DATA_FOUND then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_41)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_41', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro Interno: Nenhuma linha na tabela SYS.DUAL.'),TRUE);
  End;
exception
   when NO_DATA_FOUND then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_42)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_42', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CEP, Cidade ou UF  Nao Cadastrados.'),TRUE);
   when CEP_Cidade_UF_Nao_Condiz then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_43)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_43', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CEP, Cidade ou UF Incompatíveis.'),TRUE);
   when Digite_o_CEP then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_44)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_44', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CEP deve ser informado.'),TRUE);
END;
PROCEDURE P_VAL_CEP_PACIENTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.NR_CEP:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CEP');
		PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
		PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
		PACIENTE.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADE');
		PACIENTE.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_PACIENTE');
		PACIENTE.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_MULTI_EMPRESA');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CEP_PACIENTE_E(xml) THEN
				P_VAL_CEP_PACIENTE(xml, PACIENTE, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CEP_PACIENTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADE', PACIENTE.CD_CIDADE);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_PACIENTE', PACIENTE.CD_PACIENTE);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_MULTI_EMPRESA', PACIENTE.CD_MULTI_EMPRESA);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PREST_ATENDIMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PREST_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec) IS
	-- op 32400 incluido o alias atd pois o parametro atendime tinha o msm nome da tabela
Cursor cPrestador    Is Select atd.cd_prestador
                           From atendime atd
                          Where atd.cd_atendimento = Atendime.Cd_Atendimento;
    nCdPrestador     Number;
Begin
  Open cPrestador;
    Fetch cPrestador Into nCdPrestador;
  Close cPrestador;
    If nCdPrestador is not null then
        Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, nCdPrestador);
    Else
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_45)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_45', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador do atendimento deve ser informado.'),True);
    End if;
End;
PROCEDURE P_VAL_PREST_ATENDIMENTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_ATENDIMENTO_E(xml) THEN
				P_VAL_PREST_ATENDIMENTO(xml, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_ATENDIMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_FORNECEDOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_FORNECEDOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pFornecedor in number, itcob_pre IN OUT NOCOPY ITCOB_PRERec) IS
vLst_Param PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_Param     := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-FORNECEDOR');
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-FORNECEDOR-RETORNO');
  --
  -- Adicionando os parametros esperados pela procedure
  --
  pkg_parametro.pr_criar_parametro(vLst_Param,'CD_USUARIO'      , xml.usuario); -- Código do Usuario
  pkg_parametro.pr_criar_parametro(vLst_Param,'CD_MULTI_EMPRESA', xml.multiEmpresa); -- Codigo da MultiEmpresa
  pkg_parametro.pr_criar_parametro(vLst_Param,'SN_RAISE'        , TRUE ); -- será ou não levantada a Exceção - "Parar"
  pkg_parametro.pr_criar_parametro(vLst_Param,'SN_MSG'          , TRUE ); -- Mostra ou não a Mensagem
  --
  -- Chamada da Procedure
  --
  M_PKG_FNFI_FORNECEDOR.P_RETORNA_DADOS(xml, pFornecedor
                                                         ,xml.multiEmpresa
                                                 ,xml.usuario
                                                 ,True
                                                 ,True
                                                 ,vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'SN_COBRANCA_FORNEC', ITCOB_PRE.SN_Cobranca_Fornec, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'NR_CGC_CPF', ITCOB_PRE.Nr_CGC_CPF, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'SN_CESSAO_CREDITO', ITCOB_PRE.SN_Cessao_Credito, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamRet,'SN_FORNECE_OPM', ITCOB_PRE.SN_Fornece_OPM, True);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_Param);
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamRet);
  --
End;
PROCEDURE P_RETORNA_DADOS_FORNECEDOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pFornecedor number;
	itcob_pre ITCOB_PRERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pFornecedor:= PKG_XML.Getnumber(xml, 'pFornecedor');
		ITCOB_PRE.SN_COBRANCA_FORNEC:= PKG_XML.GetVARCHAR2(xml, 'ITCOB_PRE.SN_COBRANCA_FORNEC');
		ITCOB_PRE.NR_CGC_CPF:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.NR_CGC_CPF');
		ITCOB_PRE.SN_CESSAO_CREDITO:= PKG_XML.GetVARCHAR2(xml, 'ITCOB_PRE.SN_CESSAO_CREDITO');
		ITCOB_PRE.SN_FORNECE_OPM:= PKG_XML.GetVARCHAR2(xml, 'ITCOB_PRE.SN_FORNECE_OPM');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_FORNECEDOR_E(xml) THEN
				P_RETORNA_DADOS_FORNECEDOR(xml, pFornecedor, ITCOB_PRE);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_FORNECEDOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ITCOB_PRE.SN_COBRANCA_FORNEC', ITCOB_PRE.SN_COBRANCA_FORNEC);
		PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.NR_CGC_CPF', ITCOB_PRE.NR_CGC_CPF);
		PKG_XML.SetVARCHAR2(xml, 'ITCOB_PRE.SN_CESSAO_CREDITO', ITCOB_PRE.SN_CESSAO_CREDITO);
		PKG_XML.SetVARCHAR2(xml, 'ITCOB_PRE.SN_FORNECE_OPM', ITCOB_PRE.SN_FORNECE_OPM);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CID_SEXO_PACIENTE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pSexoPac In Varchar2) IS
nAchou Number:=0;
 eSaida Exception;
BEGIN
  Select Count(*)
    Into nAchou
    From CID
   Where Cd_CID = pCID
     And Tp_Sexo In(pSexoPac, 'A');
  If pCID Is Null Then
    raise eSaida;
  End If;
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_46)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_46', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CID não Cadastrado ou Incompatível com Sexo do Paciente'),TRUE);
  End IF;
Exception
  When eSaida Then
    Null;
END;
PROCEDURE P_VALIDA_CID_SEXO_PACIENTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCID Varchar2(4000);
	pSexoPac Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCID:= PKG_XML.GetVarchar2(xml, 'pCID');
		pSexoPac:= PKG_XML.GetVarchar2(xml, 'pSexoPac');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_SEXO_PACIENTE_E(xml) THEN
				P_VALIDA_CID_SEXO_PACIENTE(xml, pCID, pSexoPac);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_SEXO_PACIENTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_MODALIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_MODALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
Cursor cModalidade Is Select tp_modalidade_atendi
                          From MULTI_EMPRESAS_MOD_ATENDIMENTO ME
                             , PROCEDIMENTO_SUS_MODALIDADE MO
                         Where ME.tp_modalidade_atendi = MO.tp_modalidade_atendimento
                           And ME.cd_multi_empresa     = formParams.P_EMPRESA
                           And ME.sn_ativo             = 'S'
                           And MO.tp_modalidade_atendimento not In ('A')
                           And MO.CD_PROCEDIMENTO      = NVL(Reg_Fat.Cd_Procedimento_Realizado
                                                            ,Reg_Fat.Cd_Procedimento_Solicitado)
                         ORDER BY TP_MODALIDADE_ATENDI;
Begin
  If Reg_Fat.Tp_Modalidade_Atendimento Is Null Then
    Open cModalidade;
      Fetch cModalidade Into Reg_Fat.Tp_Modalidade_Atendimento;
    Close cModalidade;
  End if;
END;
PROCEDURE P_DEFINE_MODALIDADE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.CD_PROCEDIMENTO_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO');
		REG_FAT.TP_MODALIDADE_ATENDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.TP_MODALIDADE_ATENDIMENTO');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_MODALIDADE_E(xml) THEN
				P_DEFINE_MODALIDADE(xml, REG_FAT, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_MODALIDADE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO', REG_FAT.CD_PROCEDIMENTO_SOLICITADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.TP_MODALIDADE_ATENDIMENTO', REG_FAT.TP_MODALIDADE_ATENDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number,pSolicitado in varchar2,pRealizado in varchar2,pEsp IN OUT NOCOPY Varchar2) IS
cursor cEspec is select ESPEC_SUS.CD_ESPEC_SUS
                      from ESPEC_SUS
                          ,PROCEDIMENTO_SUS_ESPEC_LEITO
                      where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS    = ESPEC_SUS.CD_ESPEC_SUS
                        and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO        = 'S'
                        and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado)
                        and rownum = 1;
    nIdade Number;
    nAchou Number;
    vCdEsp Espec_SUS.Cd_Espec_SUS%Type;
Begin
  select Count(*)
    Into nAchou
    from ESPEC_SUS
       , PROCEDIMENTO_SUS_ESPEC_LEITO
   where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS = ESPEC_SUS.CD_ESPEC_SUS
     and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO = 'S'
     and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado);
  If nAchou = 1 Then
    Open cEspec;
      Fetch cEspec Into vCdEsp;
    Close cEspec;
  If vCdEsp <> Nvl(pEsp,'0') Then
      pEsp:= vCdEsp;
  End If;
  ElsIf nAchou > 1 Then
    select Count(*)
      Into nAchou
      from ESPEC_SUS
         , PROCEDIMENTO_SUS_ESPEC_LEITO
     where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS = ESPEC_SUS.CD_ESPEC_SUS
       and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO = 'S'
       and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado)
       and ESPEC_SUS.CD_ESPEC_SUS IN ('03','07');
    If nAchou = 2 Then
        nIdade:= Pkg_ffis_M_LACTO_AIH_P321.F_GET_IDADE_PACIENTE(xml, pRegFat);
        If nIdade > 18 Then
          If '03' <> Nvl(pEsp,'0') Then
            pEsp:= '03';
        End If;
        Else
          If '07' <> Nvl(pEsp,'0') Then
            pEsp:= '07';
          End If;
          select Count(*)
            Into nAchou
            from DBAMV.ESPEC_SUS
               , DBAMV.PROCEDIMENTO_SUS_ESPEC_LEITO
           where PROCEDIMENTO_SUS_ESPEC_LEITO.CD_ESPEC_SUS = ESPEC_SUS.CD_ESPEC_SUS
             and PROCEDIMENTO_SUS_ESPEC_LEITO.SN_ATIVO = 'S'
             and PROCEDIMENTO_SUS_ESPEC_LEITO.CD_PROCEDIMENTO = nvl(pRealizado,pSolicitado)
             and ESPEC_SUS.CD_ESPEC_SUS = pEsp;
          If nAchou = 0 Then
            pEsp:= '';
          End If;
        End If;
    End if;
  End If;
End;
PROCEDURE P_DEFINE_ESPEC_SUS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat number;
	pSolicitado varchar2(4000);
	pRealizado varchar2(4000);
	pEsp Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
		pSolicitado:= PKG_XML.Getvarchar2(xml, 'pSolicitado');
		pRealizado:= PKG_XML.Getvarchar2(xml, 'pRealizado');
		pEsp:= PKG_XML.GetVarchar2(xml, 'pEsp');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ESPEC_SUS_E(xml) THEN
				P_DEFINE_ESPEC_SUS(xml, pRegFat, pSolicitado, pRealizado, pEsp);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ESPEC_SUS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVarchar2(xml, 'pEsp', pEsp);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>CHECA_CPF_PRESTADOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_CHECA_CPF_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, nCdPrestador number) IS
nCpf        varchar2(14) := null;
BEGIN
  Select nr_cpf_cgc
    Into nCpf
    From prestador
   Where cd_prestador = nCdPrestador;
  If nCpf is null then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_47)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_47', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Prestador %s sem a informação CPF/CNPJ', arg_list(nCdPrestador)),TRUE);
  End if;
END;
PROCEDURE P_CHECA_CPF_PRESTADOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	nCdPrestador number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		nCdPrestador:= PKG_XML.Getnumber(xml, 'nCdPrestador');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECA_CPF_PRESTADOR_E(xml) THEN
				P_CHECA_CPF_PRESTADOR(xml, nCdPrestador);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_CHECA_CPF_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PREST_CONTA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PREST_CONTA (xml IN OUT NOCOPY PKG_XML.XmlContext, pReg_Fat In Varchar2) IS
Cursor cPrestador Is Select Cd_Prestador_Responsavel
                              , Cd_Prestador_Auditor
                         From Reg_Fat
                          Where Cd_Reg_Fat = pReg_Fat;
    nCdPrestResp     Number;
    nCdPrestAud     Number;
Begin
      Open cPrestador;
        Fetch cPrestador Into nCdPrestResp, nCdPrestAud;
    Close cPrestador;
    If nCdPrestResp is not null then
        Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, nCdPrestResp);
    End if;
    If nCdPrestAud is not null then
        Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, nCdPrestAud);
    End if;
End;
PROCEDURE P_VAL_PREST_CONTA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pReg_Fat Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pReg_Fat:= PKG_XML.GetVarchar2(xml, 'pReg_Fat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_CONTA_E(xml) THEN
				P_VAL_PREST_CONTA(xml, pReg_Fat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PREST_CONTA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_INSERE_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_INSERE_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec) IS
Cursor cRealizado Is Select Cd_Lancamento
                            , Cd_Procedimento
                         From ItReg_Fat
                        Where Cd_Reg_Fat = pRegFat
                          And SN_Proced_Realizado = 'S';
   rRealizado cRealizado%RowType;
   vSN_Anestesista  Varchar2(1);
   vSN_ExgEquipe    Varchar2(1);
   nAuxiliares      Number:= 0;
   nNewLancamento   Number:= 0;
   nAchou_Realizado Number:= 0;
   nAchou_EqpMedica Number:= 0;
   Saida      Exception;
begin
  If global.vCtaFechada = 'S' Then
    Raise Saida;
  End If;
  -- Verifico se existe realizado na conta
  Select Count(*)
    Into nAchou_Realizado
    From ItReg_Fat
   Where SN_Proced_Realizado = 'S'
     And Cd_Reg_Fat          = pRegFat;
     -- Verifico se a conta estar aberta e se existe procedimento realizado nos itens da conta
     if nAchou_Realizado = 0 And Reg_Fat.Cd_Procedimento_Realizado Is Not Null Then
        -- Capturo atributos do procedimento para montagem da equipe médica
        Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, Reg_Fat.Cd_Procedimento_Realizado
                             ,vSN_ExgEquipe
                             ,nAuxiliares
                             ,vSN_Anestesista);
        --------- Caso Houve Mudanca de Realizado com equipe, limpa prestador Ant ---------
        If nAuxiliares > 0 Or vSN_Anestesista = 'S' Then
              CG$CTRL.CD_PRESTADOR_REA_ANT := Null;
        End If;
        -----------------------------------------------------------------------------------
        -- Insere nos itens da conta o realizado (caso o obg equipe médica o prestador fica em branco)
        Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_ITREG_FAT(xml, pRegFat,
                         nNewLancamento,
                         Reg_Fat.Cd_Procedimento_Realizado,
                         Reg_Fat.Dt_Inicio,
                         CG$CTRL.CD_SETOR_REA_ANT,
                         CG$CTRL.CD_PRESTADOR_REA_ANT,
                         1,
                         'S',
                         CG$CTRL.REFRESH_ITREG_FAT);
        -- Aqui começa a montagem da equipe médica
        if  vSN_ExgEquipe = 'S' then --And (nAuxiliares > 0 Or vSN_Anestesista = 'S') Then
           -- Verifico se já existe lançamentos na itlan_med para o realizado
           Select Count(*)
             Into nAchou_EqpMedica
             From ItLan_Med
            Where Cd_reg_fat    = Reg_Fat.Cd_Reg_Fat
              And Cd_lancamento = nNewLancamento;
           if nAchou_EqpMedica = 0 then
                 global.vChange := 'S';
              Pkg_ffis_M_LACTO_AIH_P321.P_MONTAR_EQUIPE(xml, pRegFat,
                             nNewLancamento,
                             Reg_Fat.Cd_Procedimento_Realizado, CG$CTRL, global);
           end if;
        end if;
   ElsIf nAchou_Realizado = 1 And Reg_Fat.Cd_Procedimento_Realizado Is Not Null And NOT(F_F_CONTA_CIR_MULTIPLA(xml,Reg_Fat.Cd_Procedimento_Realizado,Reg_fat.DT_INICIO)) Then
     Open cRealizado;
       Fetch cRealizado Into rRealizado;
     Close cRealizado;
     -- Verifico a existência de mudança de procedimento
     If rRealizado.Cd_Procedimento <> Reg_Fat.Cd_Procedimento_Realizado Then
       -- Capturo atributos do procedimento para montar a equipe médica
       Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, Reg_Fat.Cd_Procedimento_Realizado
                            ,vSN_ExgEquipe
                            ,nAuxiliares
                            ,vSN_Anestesista);
       -- Executo a mudança de procedimento
       Update ItReg_Fat
          Set Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
        Where Cd_Reg_Fat = pRegFat
          And Cd_Lancamento = rRealizado.Cd_Lancamento;
       -- Se o procedimento for de parto seráo inserido os dados padrões
       Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_DADOS_PARTO(xml, pRegFat,Reg_Fat.Cd_Procedimento_Realizado);
       -- Atualizo os itens da conta.
       CG$CTRL.REFRESH_ITREG_FAT:= 'S';
       -- Procuro equipe médica para o procedimento antigo
       Select Count(*)
         Into nAchou_EqpMedica
         From ItLan_Med
        Where Cd_Reg_Fat = pRegFat
          And Cd_Lancamento = rRealizado.Cd_Lancamento;
       -- Caso o novo procedimento não permita equipe médica, faço a exclusão
       If nAchou_EqpMedica > 0 And vSN_ExgEquipe = 'N' Then
          Delete ItLan_Med
              Where Cd_Reg_Fat = pRegFat
                And Cd_Lancamento = rRealizado.Cd_Lancamento;
       -- Caso o novo procedimento permita Ato Cirúrgico '01', faço a exclusão.
        ElsIf nAchou_EqpMedica > 0 And (vSN_ExgEquipe = 'S' And vSN_Anestesista = 'N' And nAuxiliares = 0) Then
             Delete ItLan_Med
              Where Cd_Reg_Fat = pRegFat
                And Cd_Lancamento = rRealizado.Cd_Lancamento;
        -- Caso o novo procedimento permita equipe médica, aqui começa a montagem
--        ElsIf nAchou_EqpMedica = 0 And (vSN_ExgEquipe = 'S' And (vSN_Anestesista = 'S' Or nAuxiliares > 0)) Then
        ElsIf nAchou_EqpMedica = 0 And vSN_ExgEquipe = 'S'  Then
                 global.vChange := 'S';
              Pkg_ffis_M_LACTO_AIH_P321.P_MONTAR_EQUIPE(xml, pRegFat,
                             rRealizado.Cd_Lancamento,
                             Reg_Fat.Cd_Procedimento_Realizado, CG$CTRL, global);
        End if;
     End If;
   End if;
Exception
  When Saida Then
    Null;
END;
PROCEDURE P_INSERE_REALIZADO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	reg_fat REG_FATRec;
	cg$ctrl CG$CTRLRec;
	global GlobalsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		CG$CTRL.CD_PRESTADOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT');
		CG$CTRL.CD_SETOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT');
		CG$CTRL.REFRESH_ITREG_FAT:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITREG_FAT');
		CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
		global.VCTAFECHADA:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCTAFECHADA');
		global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_REALIZADO_E(xml) THEN
				P_INSERE_REALIZADO(xml, pRegFat, REG_FAT, CG$CTRL, global);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_REALIZADO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT', CG$CTRL.CD_PRESTADOR_REA_ANT);
		PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT', CG$CTRL.CD_SETOR_REA_ANT);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITREG_FAT', CG$CTRL.REFRESH_ITREG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCTAFECHADA', global.VCTAFECHADA);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CONTA_ANTERIOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CONTA_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat Number) IS
Cursor cDadosConta (pReg Number) Is Select Trunc(Dt_Inicio) Dt_Inicio
                                         , Trunc(Dt_Final)  Dt_Final
                                         , Cd_Mot_Alt       Cd_Mot_Alt
                                         , Cd_Atendimento   Cd_Atendimento
                                      From Reg_Fat
                                     Where Cd_Reg_Fat = pReg;
  Cursor cMaxReg(pAtendimento Varchar2) Is Select Max(Cd_Reg_Fat)
                                             From Reg_Fat r
                                                , Atendime a
                                            Where a.Cd_Atendimento = r.Cd_Atendimento
                                              And nvl(r.SN_Fechada,'N') = 'N'
                                              And r.Cd_Reg_Fat          < pRegFat
                                              And r.Cd_Atendimento      = pAtendimento
                                              And r.Cd_Reg_Fat_Glosa Is Null;
  nRegAnt     Number;
  rDadosConta cDadosConta%RowType;
  rDadosFat   cDadosConta%RowType;
Begin
   Open cDadosConta(pRegFat);
     Fetch cDadosConta Into rDadosFat;
   Close cDadosConta;
    Open cMaxReg(rDadosFat.Cd_Atendimento);
      Fetch cMaxReg Into nRegAnt;
    Close cMaxReg;
  if nRegAnt <> nvl(pRegFat,0) then
       Open cDadosConta(nRegAnt);
         Fetch cDadosConta Into rDadosConta;
        Close cDadosConta;
     if rDadosConta.Dt_Final is null then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_48)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_48', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Conta Anterior Sem Data de Alta.'),TRUE);
     end if;
     if rDadosConta.Cd_Mot_Alt is null then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_49)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_49', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Conta Anterior Sem Motivo de Alta.'),TRUE);
     end if;
  end if;
End;
PROCEDURE P_VALIDA_CONTA_ANTERIOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CONTA_ANTERIOR_E(xml) THEN
				P_VALIDA_CONTA_ANTERIOR(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CONTA_ANTERIOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_DATA_INICIO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_DATA_INICIO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
  if REG_FAT.DT_INICIO is null  then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_50)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_50', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data Internação não pode está em branco'),TRUE);
  end if;
  if REG_FAT.DT_INICIO < REG_FAT.DT_ATENDIMENTO then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_51)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_51', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data de Internação da conta anterior a data do Atendimento'),TRUE);
  end if;
  if REG_FAT.DT_ALTA is not null and
    REG_FAT.DT_INICIO > REG_FAT.DT_ALTA then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_52)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_52', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data de Internação após a data de alta.'),TRUE);
  end if;
  if not Pkg_ffis_M_LACTO_AIH_P321.F_VALIDA_PERIODO_CONTA(xml, reg_fat.cd_reg_fat,trunc(REG_FAT.DT_inicio),trunc(REG_FAT.DT_FINAL)) then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_53)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_53', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: A conta possui itens com data de lançamento fora do novo período.'),TRUE);
  end if;
END;
PROCEDURE P_VALIDA_DATA_INICIO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.DT_ATENDIMENTO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_ATENDIMENTO');
		REG_FAT.DT_ALTA:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_ALTA');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
--		formParams.P_HOSPITAL:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_HOSPITAL');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DATA_INICIO_E(xml) THEN
				P_VALIDA_DATA_INICIO(xml, REG_FAT, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_DATA_INICIO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_ATENDIMENTO', REG_FAT.DT_ATENDIMENTO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_ALTA', REG_FAT.DT_ALTA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_EXCLUI_DIARIAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_EXCLUI_DIARIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number
                                ,pDtAlta In Date) IS
BEGIN
  If pDtAlta is null Then
    Delete ItReg_Fat
     Where Cd_Reg_Fat = pRegFat
       And Cd_Procedimento In (Select Cd_Procedimento
                                 From Procedimento_SUS_Detalhe
                                Where SN_Diaria_UTI = 'S'
                                   Or SN_Diaria_Acompanhante = 'S'
                                   Or SN_Permanencia_Maior = 'S');
  Commit;
  End if;
END;
PROCEDURE P_DML_EXCLUI_DIARIAS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pDtAlta Date;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pDtAlta:= PKG_XML.GetDate(xml, 'pDtAlta');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_EXCLUI_DIARIAS_E(xml) THEN
				P_DML_EXCLUI_DIARIAS(xml, pRegFat, pDtAlta);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_EXCLUI_DIARIAS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                              ,pEspec_SUS    In Varchar2) IS
nAchou  Number;
  nAchou2    Number;
Begin
  If pProcedimento Is Not Null And pEspec_SUS Is Not Null Then
        Select Count(*)
          Into nAchou
          From Procedimento_SUS_Espec_Leito
         Where Cd_Procedimento = pProcedimento
           And SN_Ativo        = 'S';
    If nAchou > 0 Then
        Select Count(*)
          Into nAchou2
          From Procedimento_SUS_Espec_Leito
         Where Cd_Procedimento = pProcedimento
           And Cd_Espec_SUS    = pEspec_SUS
           And SN_Ativo        = 'S';
         If nAchou2 < 1 Then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_54)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_54', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Especialidade informada incompatível com o procedimento realizado.'),true);
         End If;
    End If;
  ElsIf pEspec_SUS Is Null And pProcedimento Is Not Null Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml,pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_55)
                                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_55', 'PKG_FFIS_M_LACTO_AIH_P321', 'Aviso: Especialidade não informada, verifique.'),false);
  End If;
End;
PROCEDURE P_VALIDA_ESPEC_SUS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pEspec_SUS Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pEspec_SUS:= PKG_XML.GetVarchar2(xml, 'pEspec_SUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_E(xml) THEN
				P_VALIDA_ESPEC_SUS(xml, pProcedimento, pEspec_SUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ESPEC_SUS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_GUIAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_GUIAS (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento In Number, pReg_Fat In Number, pNr_Guia In Varchar2) IS
vMens varchar2(500);
begin
     if pNr_Guia is not null then
      pack_sus.VALIDA_GUIA_SUS ( xml.multiEmpresa
                                     , pAtendimento
                                     , pReg_Fat
                                     , pNr_Guia
                                     , 'I'
                                     , False
                                     , vMens );
      if vMens is not null then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_56)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_56', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s', arg_list(vMens)),TRUE);
      end if;
   end if;
end;
PROCEDURE P_VALIDA_GUIAS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pAtendimento Number;
	pReg_Fat Number;
	pNr_Guia Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pAtendimento:= PKG_XML.GetNumber(xml, 'pAtendimento');
		pReg_Fat:= PKG_XML.GetNumber(xml, 'pReg_Fat');
		pNr_Guia:= PKG_XML.GetVarchar2(xml, 'pNr_Guia');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GUIAS_E(xml) THEN
				P_VALIDA_GUIAS(xml, pAtendimento, pReg_Fat, pNr_Guia);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_GUIAS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_SOL_REALIZADO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_SOL_REALIZADO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProc_Sol In Varchar2
                                                                           ,pProc_Rea In Varchar2) IS
        Cursor cProcedimento  Is Select Detal.SN_Solicitado_Igual_Realizado
                                      , Detal.SN_Admite_Mudanca_Procedimento
                                   From dbamv.Procedimento_SUS Proc
                                      , dbamv.procedimento_detalhe_vigencia  Detal    -- #OP:44246 // LPDO
                                  Where Proc.Cd_Procedimento = Detal.Cd_Procedimento
                                    And Proc.Cd_Procedimento = pProc_Sol;
    rProcedimento cProcedimento%RowType;
Begin
    Open cProcedimento;
      Fetch cProcedimento Into rProcedimento;
    Close cProcedimento;
    If rProcedimento.SN_Solicitado_Igual_Realizado = 'S' And pProc_Sol <> pProc_Rea Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_57)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_57', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento solicitado não admite cobrança de realizado diferente de %s.', arg_list(pProc_Sol)),TRUE);
    End if;
       If rProcedimento.SN_Admite_Mudanca_Procedimento = 'N'
           And Nvl(pProc_Rea, '0') <> Nvl(pProc_Sol,'0') Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_58)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_58', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento solicitado %s não admite mudanca de procedimento.', arg_list(pProc_Sol)),TRUE);
       End if;
End;
PROCEDURE P_VALIDA_SOL_REALIZADO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProc_Sol Varchar2(4000);
	pProc_Rea Varchar2(4000);
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProc_Sol:= PKG_XML.GetVarchar2(xml, 'pProc_Sol');
		pProc_Rea:= PKG_XML.GetVarchar2(xml, 'pProc_Rea');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SOL_REALIZADO_E(xml) THEN
				P_VALIDA_SOL_REALIZADO(xml, pProc_Sol, pProc_Rea);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SOL_REALIZADO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_CID_PADRAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_CID_PADRAO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec) IS
    Cursor cProcedimento(pProcedimento Varchar2) Is
        Select SN_Cirurgia_Multipla
          From Dbamv.Procedimento_SUS_Detalhe
         Where Cd_Procedimento = pProcedimento;
     rProcSUS cProcedimento%RowType;
    Cursor cCID_Padrao Is Select CID.Cd_CID
                               , CID.Ds_CID
                            From Procedimento_SUS_CID
                               , CID
                         Where Procedimento_SUS_CID.Cd_CID = CID.Cd_CID
                           And Procedimento_SUS_CID.Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
                           And Procedimento_SUS_CID.SN_Padrao = 'S';
    Cursor cCID_Compat Is Select CID.Cd_CID
                               , CID.Ds_CID
                            From Procedimento_SUS_CID
                               , CID
                         Where Procedimento_SUS_CID.Cd_CID          = CID.Cd_CID
                           And Procedimento_SUS_CID.Cd_Procedimento = Reg_Fat.Cd_Procedimento_Realizado
                           And Procedimento_SUS_CID.Cd_CID          = Atendime.Cd_CID
                           And Procedimento_SUS_CID.SN_Ativo        = 'S';
  NO_CID Exception;
  eSaida Exception;
  Begin
  Open cProcedimento(Reg_Fat.Cd_Procedimento_Realizado);
    Fetch cProcedimento Into rProcSUS;
  Close cProcedimento;
  -- Caso haja alteração de procedimento, o CID fica em branco para novo lançamento
  If Reg_Fat.Cd_Procedimento_Realizado <> Reg_Fat.Cd_Procedimento_Realizado_OLD Then
    Reg_Fat.Cd_CID_Principal:= '';
  End If;
  If  Nvl(rProcSUS.SN_Cirurgia_Multipla,'N') = 'S' Then
    Raise eSaida;
  End If;
    If Reg_Fat.Cd_CID_Principal Is Null Then
        If Nvl(dbamv.pkg_mv2000.le_cliente,0) = (1715) Then
          Open cCID_Padrao;
            Fetch cCID_Padrao Into Reg_Fat.Cd_CID_Principal
                                 , Reg_Fat.Dsp_Ds_Cid_Principal;
      If cCID_Padrao%NotFound Then
        Close cCID_Padrao;
        Raise NO_CID;
      Else
        Close cCID_Padrao;
      End If;
    Else
        Open cCID_Compat;
             Fetch cCID_Compat Into Reg_Fat.Cd_CID_Principal
                               , Reg_Fat.Dsp_Ds_Cid_Principal;
        If cCID_Compat%NotFound Then
            --
            Open cCID_Padrao;
              Fetch cCID_Padrao Into Reg_Fat.Cd_CID_Principal
                                   , Reg_Fat.Dsp_Ds_Cid_Principal;
            If cCID_Padrao%NotFound Then
              Close cCID_Padrao;
              Close cCID_Compat;
              Raise NO_CID;
            Else
              Close cCID_Padrao;
              --
              Close cCID_Compat;
            End If;
      End If;
        End If;
  End If;
    Exception
        When NO_CID Then
        --PKG_XML_MGS.msg_alert(xml,'Aviso: não existe CID padrão definido para este procedimento '||Reg_Fat.Cd_Procedimento_Realizado||'.','I',false);
        Reg_Fat.Cd_CID_Principal:= '';
        Reg_Fat.Dsp_Ds_Cid_Principal:='';
      When eSaida Then
        Null;
End;
PROCEDURE P_DEFINE_CID_PADRAO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	atendime ATENDIMERec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_CID:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.CD_CID');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD');
		REG_FAT.CD_CID_PRINCIPAL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_CID_PRINCIPAL');
		REG_FAT.DSP_DS_CID_PRINCIPAL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_DS_CID_PRINCIPAL');
--		formParams.P_HOSPITAL:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_HOSPITAL');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_CID_PADRAO_E(xml) THEN
				P_DEFINE_CID_PADRAO(xml, REG_FAT, ATENDIME, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_CID_PADRAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.CD_CID', ATENDIME.CD_CID);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD', REG_FAT.CD_PROCEDIMENTO_REALIZADO_OLD);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_CID_PRINCIPAL', REG_FAT.CD_CID_PRINCIPAL);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_DS_CID_PRINCIPAL', REG_FAT.DSP_DS_CID_PRINCIPAL);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_REMESSA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2, reg_fat IN OUT NOCOPY REG_FATRec) IS
Cursor cRemessa Is Select Cd_Remessa
                          , Ds_Remessa
                       From Remessa_Fatura
                      Where SN_Fechada = 'N'
                      and trunc(sysdate) between trunc(DT_ABERTURA,'mm') and trunc(nvl(DT_FECHAMENTO, trunc(sysdate)),'mm')   -- OP 16983 - 01/04/2014 - Diego Almeida
                        And Tp_Complexidade_Procedimento In (Select Tp_Complexidade_Procedimento
                                                               From Procedimento_SUS_Complexidade
                                                              Where Cd_Procedimento = pProcedimento
                                                                And SN_Ativo = 'S'
                                                             )
                      ORDER BY DT_ABERTURA DESC;
BEGIN
  If Reg_Fat.Cd_Remessa Is Null And pProcedimento Is Not Null Then
    Open cRemessa;
      Fetch cRemessa Into Reg_Fat.Cd_Remessa
                        , Reg_Fat.Dsp_Ds_Remessa;
    Close cRemessa;
  End If;
END;
PROCEDURE P_DEFINE_REMESSA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.DSP_DS_REMESSA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_REMESSA_E(xml) THEN
				P_DEFINE_REMESSA(xml, pProcedimento, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_REMESSA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA', REG_FAT.DSP_DS_REMESSA);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_CID_SECUNDARIO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_CID_SECUNDARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2,pCID_Pri In Varchar2 ,pCID_Sec In Varchar2,pSexPac In Varchar2) IS
Cursor cCidValid Is Select SubCat
                        From CID
                       Where Cd_CID In (Select Cd_SGru_CID
                                          From CID
                                         Where SubCat = 'S'
                                           And cd_cid = pCID_Sec
                                           And cd_cid <> Cd_SGru_CID);
  Cursor cCID Is Select Procedimento_SUS_CID.Cd_CID
                      , CID.TP_Sexo
                   From Procedimento_SUS_CID
                      , CID
                  Where Procedimento_SUS_CID.Cd_CID = CID.Cd_CID
                    And Procedimento_SUS_CID.SN_Secundario = 'S'
                    And Procedimento_SUS_CID.Cd_Procedimento = pProcedimento
                    And CID.Cd_CID = pCID_Pri;
vCID     CID.Cd_CID%Type;
vSubCat  CID.SubCat%Type;
vTpSexo  CID.Tp_Sexo%Type;
nAchou   Number;
Saida    Exception;
Begin
  If pCID_Sec Is Null Then
    Raise Saida;
  End If;
  Open  cCidValid;
    Fetch cCidValid  Into vSubCat;
  Close cCidValid;
  Open cCID;
    Fetch cCID Into vCID,vTpSexo;
  Close cCID;
/* PDA 367832
  If Nvl(vSubCat,'N') = 'S' Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                  ,'Erro: O CID informado é inválido para Internação SUS!',true);
  End If;
*/
  If vTpSexo Not In (pSexPac,'A') Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_59)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_59', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CID Secundário incompatível com sexo do paciente.!'),true);
  End If;
  Select Count(*)
    Into nAchou
    From Procedimento_SUS_CID
       , CID
   Where Procedimento_SUS_CID.Cd_CID = CID.Cd_CID
     And Procedimento_SUS_CID.SN_Secundario = 'S'
     And Procedimento_SUS_CID.Cd_Procedimento = pProcedimento;
  If Substr(pCID_Pri,1,1) not in ('S','T') Then
    If vCID Is Null And nAchou >= 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_60)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_60', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CID incompatível com o procedimento realizado. Consulte a lista de valores.'),true);
    End If;
  End If;
  If Substr(pCID_Pri,1,1) in ('S','T')
    and Substr(pCID_Sec,1,1) not in ( 'V', 'X', 'W', 'Y', 'Z' ) then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_61)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_61', 'PKG_FFIS_M_LACTO_AIH_P321', 'CID Secundário deve ser de causas externas(CID iniciado por V-X-W-Y-Z).'),true);
  End if;
Exception
     When Saida Then
       Null;
End;
PROCEDURE P_VAL_CID_SECUNDARIO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pCID_Pri Varchar2(4000);
	pCID_Sec Varchar2(4000);
	pSexPac Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCID_Pri:= PKG_XML.GetVarchar2(xml, 'pCID_Pri');
		pCID_Sec:= PKG_XML.GetVarchar2(xml, 'pCID_Sec');
		pSexPac:= PKG_XML.GetVarchar2(xml, 'pSexPac');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CID_SECUNDARIO_E(xml) THEN
				P_VAL_CID_SECUNDARIO(xml, pProcedimento, pCID_Pri, pCID_Sec, pSexPac);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CID_SECUNDARIO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_EXIGENCIA_CID_PRINCIPAL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number,pProcedimento In Varchar2,pCID In Varchar2) IS
Cursor cProcedimento Is Select SN_Cirurgia_Multipla
                            From Procedimento_SUS_Detalhe
                           Where Cd_Procedimento = pProcedimento;
  nAchou Number;
  vSN_Multiplo Procedimento_SUS_Detalhe.SN_Cirurgia_Multipla%Type;
  Saida Exception;
Begin
   If pCID Is Not Null Then
     Raise Saida;
   End If;
   Open cProcedimento;
     Fetch cProcedimento Into vSN_Multiplo;
   Close cProcedimento;
    If vSN_Multiplo = 'N' Then
      Select Count(*)
        Into nAchou
        From Procedimento_SUS_CID
       Where Cd_Procedimento = pProcedimento
         And SN_Ativo = 'S';
    Else
      Select Count(*)
        Into nAchou
        From Procedimento_SUS_CID
       Where Cd_Procedimento In (Select Cd_Procedimento
                                   From ItReg_Fat
                                  Where Cd_Reg_Fat = pRegFat
                                    And SN_Proced_Realizado = 'S')
         And SN_Ativo = 'S';
    End If;
    If nAchou > 0 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_62)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_62', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CID Principal deve ser informado, consulte lista de valores para obter CIDs Válidos.'),true);
    End If;
Exception
     When Saida Then
       Null;
End;
PROCEDURE P_EXIGENCIA_CID_PRINCIPAL (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento Varchar2(4000);
	pCID Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pCID:= PKG_XML.GetVarchar2(xml, 'pCID');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_EXIGENCIA_CID_PRINCIPAL_E(xml) THEN
				P_EXIGENCIA_CID_PRINCIPAL(xml, pRegFat, pProcedimento, pCID);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_EXIGENCIA_CID_PRINCIPAL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_EQP_MEDICA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_EQP_MEDICA (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento In Varchar2
                               ,pSN_Equipe      Out Varchar2
                               ,pNr_Auxiliar    Out Number
                               ,pSN_Anestesista Out Varchar2) IS
Cursor cProcedimento Is Select SN_Exige_Equipe_Medica
                               , Nr_Auxiliar
                               , SN_Ato_Anestesico
                            From Procedimento_SUS p
                               , Procedimento_SUS_Detalhe d
                           Where p.Cd_Procedimento = d.Cd_Procedimento
                             And p.Cd_Procedimento = pProcedimento;
BEGIN
  Open cProcedimento;
    Fetch cProcedimento Into pSN_Equipe,pNr_Auxiliar,pSN_Anestesista;
  Close cProcedimento;
END;
PROCEDURE P_DEFINE_EQP_MEDICA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pSN_Equipe Varchar2(4000);
	pNr_Auxiliar Number;
	pSN_Anestesista Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pSN_Equipe:= PKG_XML.GetVarchar2(xml, 'pSN_Equipe');
		pNr_Auxiliar:= PKG_XML.GetNumber(xml, 'pNr_Auxiliar');
		pSN_Anestesista:= PKG_XML.GetVarchar2(xml, 'pSN_Anestesista');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_EQP_MEDICA_E(xml) THEN
				P_DEFINE_EQP_MEDICA(xml, pProcedimento, pSN_Equipe, pNr_Auxiliar, pSN_Anestesista);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_EQP_MEDICA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVarchar2(xml, 'pSN_Equipe', pSN_Equipe);
		PKG_XML.SetNumber(xml, 'pNr_Auxiliar', pNr_Auxiliar);
		PKG_XML.SetVarchar2(xml, 'pSN_Anestesista', pSN_Anestesista);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_ABERTURA_TELAS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_ABERTURA_TELAS (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec) IS
Cursor cDadosProcedimento Is Select Nvl(pDetal.SN_Vasectomia,'N')           SN_Vasectomia
                                    , Nvl(pDetal.SN_Laqueadura,'N')           SN_Laqueadura
                                 From Procedimento_SUS                  pSUS
                                    , Procedimento_SUS_Detalhe          pDetal
                                Where pSUS.Cd_Procedimento = pDetal.Cd_Procedimento
                                  And pSUS.Cd_Procedimento = ItReg_Fat.Cd_Procedimento;
  rDadosProcedimento  cDadosProcedimento%RowType;
  vSN_ExgEquipe       Varchar2(1);
  vSN_Anestesista     Varchar2(1);
  nAuxiliares         Number;
begin
  Open  cDadosProcedimento;
    Fetch cDadosProcedimento Into rDadosProcedimento;
  Close cDadosProcedimento;
   -- Capturo atributos do procedimento para montagem da equipe médica.
   Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_EQP_MEDICA(xml, ItReg_Fat.Cd_Procedimento
                        ,vSN_ExgEquipe
                        ,nAuxiliares
                        ,vSN_Anestesista);
   if vSN_ExgEquipe = 'S' then --(nAuxiliares > 0 Or vSN_Anestesista = 'S') And vSN_ExgEquipe = 'S' then  -- OP 33984
        global.vChange := 'S';
          Pkg_ffis_M_LACTO_AIH_P321.P_MONTAR_EQUIPE(xml, ITREG_FAT.CD_REG_FAT,
                      ITREG_FAT.CD_LANCAMENTO,
                      ITREG_FAT.CD_PROCEDIMENTO, CG$CTRL, global);
      CG$CTRL.REFRESH_ITLAN_MED := 'S';
      CG$CTRL.DIGITA_EQUIPE     := 'S';
         global.vChange := 'N';
   end if;
   if Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_OPM(xml, ItReg_Fat.Cd_Procedimento) then
      CG$CTRL.DIGITA_NOTA := 'S';
   end if;
   if Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_UTI(xml, ItReg_Fat.Cd_Procedimento) then
      CG$CTRL.DIGITA_UTI := 'S';
   end if;
   if rDadosProcedimento.SN_Vasectomia = 'S' Or rDadosProcedimento.SN_Laqueadura = 'S' then
      CG$CTRL.DIGITA_LACVAS := 'S';
   end if;
   if ITREG_FAT.CD_PROCEDIMENTO = '0801010039' then
      CG$CTRL.DIGITA_PRE_NATAL := 'S';
   end if;
    if ITREG_FAT.CD_Procedimento = '0801010047' then
     CG$CTRL.DIGITA_REG_CIVIL := 'S';
   end if;
END;
PROCEDURE P_DEFINE_ABERTURA_TELAS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itreg_fat ITREG_FATRec;
	cg$ctrl CG$CTRLRec;
	global GlobalsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
		CG$CTRL.DIGITA_EQUIPE:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_EQUIPE');
		CG$CTRL.DIGITA_NOTA:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_NOTA');
		CG$CTRL.DIGITA_UTI:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_UTI');
		CG$CTRL.DIGITA_LACVAS:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_LACVAS');
		CG$CTRL.DIGITA_PRE_NATAL:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_PRE_NATAL');
		CG$CTRL.DIGITA_REG_CIVIL:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.DIGITA_REG_CIVIL');
		CG$CTRL.REFRESH_ITLAN_MED:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED');
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
		ITREG_FAT.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO');
		global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
		global.VCHANGE:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCHANGE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ABERTURA_TELAS_E(xml) THEN
				P_DEFINE_ABERTURA_TELAS(xml, ITREG_FAT, CG$CTRL, global);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_ABERTURA_TELAS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_EQUIPE', CG$CTRL.DIGITA_EQUIPE);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_NOTA', CG$CTRL.DIGITA_NOTA);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_UTI', CG$CTRL.DIGITA_UTI);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_LACVAS', CG$CTRL.DIGITA_LACVAS);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_PRE_NATAL', CG$CTRL.DIGITA_PRE_NATAL);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.DIGITA_REG_CIVIL', CG$CTRL.DIGITA_REG_CIVIL);
		PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.REFRESH_ITLAN_MED', CG$CTRL.REFRESH_ITLAN_MED);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO', ITREG_FAT.CD_LANCAMENTO);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCHANGE', global.VCHANGE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_PRESTADORES_ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_PRESTADORES_ITEM (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat In Number) IS
Cursor cPrest is
         Select nvl(it.cd_prestador,il.cd_prestador) cd_prestador
          From itreg_fat it
              , itlan_med il
          Where it.cd_reg_fat = il.cd_reg_fat (+)
       and it.cd_lancamento = il.cd_lancamento (+)
       and it.cd_reg_fat = pRegFat
            and nvl(it.cd_prestador,il.cd_prestador) is not null;
Begin
  For Rec_Prest in cPrest Loop
      Pkg_ffis_M_LACTO_AIH_P321.P_CHECA_CPF_PRESTADOR(xml, Rec_Prest.cd_prestador);
  End loop;
END;
PROCEDURE P_VALIDA_PRESTADORES_ITEM (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PRESTADORES_ITEM_E(xml) THEN
				P_VALIDA_PRESTADORES_ITEM(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_PRESTADORES_ITEM_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_INSERE_DADOS_PARTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_INSERE_DADOS_PARTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pProcedimento In Varchar2) IS
  nAchou    Number;
  bSN_Parto Boolean;
BEGIN
  -- Caso não encontre os dados do parto, insere os dados padrão.
  -- Retorna verdade se a conta for de parto.
  bSN_Parto:= Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PARTO(xml, Pkg_ffis_M_LACTO_AIH_P321.F_GET_PROC_REALIZADO(xml, pRegFat));
  If Not Pkg_ffis_M_LACTO_AIH_P321.F_PROCURA_PARTO(xml, pRegFat) AND bSN_Parto Then
      Select Count(*)
        Into nAchou
        From It_Parto
       Where Cd_Reg_Fat = pRegFat;
       If nAchou = 0 Then
         INSERT INTO IT_PARTO(CD_REG_FAT
                                   ,QT_RN_VIVO
                                   ,QT_RN_ALTA )
              VALUES              (pRegFat
                                   ,1
                                   ,1);
       End If;
  End If;
END;
PROCEDURE P_INSERE_DADOS_PARTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pProcedimento Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_DADOS_PARTO_E(xml) THEN
				P_INSERE_DADOS_PARTO(xml, pRegFat, pProcedimento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_INSERE_DADOS_PARTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_COD_REDUZIDO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_COD_REDUZIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in varchar, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
Cursor cCdReduzido Is Select Cd_Procedimento
                          From Procedimento_SUS_Detalhe
                         Where Cd_Codigo_Reduzido = To_Number(pProcedimento);
  nCont        Number;
Begin
    If length(Itreg_Fat.Cd_Procedimento) <= 4 Then
      Select Count(*)
        Into nCont
        From Procedimento_SUS_Detalhe
       Where cd_codigo_reduzido = To_Number(pProcedimento);
      If nCont > 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_63)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_63', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Existe mais de um procedimento com este Código Reduzido, por favor informar todo o código do procedimento!'),TRUE);
      Elsif nCont < 1 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_64)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_64', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não existe nenhum procedimento com este Código Reduzido, por favor informar todo o código do procedimento!'),TRUE);
      Else
        Open  cCdReduzido;
          Fetch cCdReduzido Into ITREG_FAT.CD_PROCEDIMENTO;
        Close cCdReduzido;
      End if;
    End if;
End;
PROCEDURE P_VALIDA_COD_REDUZIDO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento varchar(4000);
	itreg_fat ITREG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVARCHAR2(xml, 'pProcedimento');
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_COD_REDUZIDO_E(xml) THEN
				P_VALIDA_COD_REDUZIDO(xml, pProcedimento, ITREG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_COD_REDUZIDO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_QUANTIDADE_OPM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_QUANTIDADE_OPM (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar, pProc_Pai in Varchar2, pDtLacto in date,pQtLacto in Number) IS
Cursor cCompat2( vProcedimento                 varchar2
                 , vProcedimentoCompat     varchar2
                 , dDtcomp                             date) is
    Select cd_procedimento
          ,cd_procedimento_compativel
          ,qt_maxima
          ,dt_vigencia
      from procedimento_sus_compat
     where cd_procedimento            = vProcedimento
       and sn_ativo = 'S'
       and cd_procedimento_compativel = vProcedimentoCompat
       and trunc(dt_vigencia) <= trunc(dDtcomp)
       order by dt_vigencia desc;
  rCompat2  cCompat2%rowtype;
Begin
  If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_OPM(xml, pProcedimento) Then
    Open cCompat2( pProc_Pai
                 , pProcedimento
                 , pDtLActo);
    Fetch cCompat2 Into rCompat2;
    Close cCompat2;
    If (rCompat2.qt_maxima > 0) Then
         If pQtLacto > rCompat2.qt_maxima  Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_65)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_65', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Quantidade de material OPM maior que permitido.'),TRUE);
         End If;
       End If;
  End if;
End;
PROCEDURE P_VAL_QUANTIDADE_OPM (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar(4000);
	pProc_Pai Varchar2(4000);
	pDtLacto date;
	pQtLacto Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVARCHAR2(xml, 'pProcedimento');
		pProc_Pai:= PKG_XML.GetVarchar2(xml, 'pProc_Pai');
		pDtLacto:= PKG_XML.Getdate(xml, 'pDtLacto');
		pQtLacto:= PKG_XML.GetNumber(xml, 'pQtLacto');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_QUANTIDADE_OPM_E(xml) THEN
				P_VAL_QUANTIDADE_OPM(xml, pProcedimento, pProc_Pai, pDtLacto, pQtLacto);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_QUANTIDADE_OPM_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_SETOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, pEmpresa in Number, pSetor in Number) IS
nAchou Number;
Begin
  If pSetor Is Not Null Then
      Select Count(*)
        Into nAchou
        From Setor
       Where Cd_Setor             = pSetor
         And Cd_Multi_Empresa     = pEmpresa
         And SN_Aceita_Lancamento = 'S';
     If nAchou = 0 Then
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_66)
                     ,pkg_rmi_traducao.extrair_pkg_msg('MSG_66', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Setor informado não cadastrado ou não recebe lançamentos.'),TRUE);
     End If;
  End If;
End;
PROCEDURE P_VALIDA_SETOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pEmpresa Number;
	pSetor Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pEmpresa:= PKG_XML.GetNumber(xml, 'pEmpresa');
		pSetor:= PKG_XML.GetNumber(xml, 'pSetor');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SETOR_E(xml) THEN
				P_VALIDA_SETOR(xml, pEmpresa, pSetor);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_SETOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PRESTADOR_CIRURGIAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Number, pPrestador in Number) IS
Cursor cTpSituacao is Select Tp_situacao
                                 , SN_Cirurgiao
                              From Prestador
                             Where Cd_Prestador = pPrestador;
  vTpSituacao   Varchar(1);
  vSNCirurgiao  Varchar(1);
  Saida         Exception;
Begin
    If pPrestador Is Null Then
      Raise Saida;
    End If;
    Open  cTpSituacao;
      Fetch cTpSituacao into vTpSituacao,vSNCirurgiao;
    Close cTpSituacao;
    If vTpSituacao  <> 'A' Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_67)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_67', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador inativo.'),TRUE);
    End if;
    If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_PROC_CIRURGICO(xml, pProcedimento) And vSNCirurgiao = 'N' Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_68)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_68', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador %s não é cirurgião!', arg_list(pPrestador)),true);
    End If;
    Pkg_ffis_M_LACTO_AIH_P321.P_VAL_PRESTADOR_SUS(xml, pPrestador);
Exception
    When Saida Then
      Null;
End;
PROCEDURE P_VAL_PRESTADOR_CIRURGIAO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Number;
	pPrestador Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetNumber(xml, 'pProcedimento');
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CIRURGIAO_E(xml) THEN
				P_VAL_PRESTADOR_CIRURGIAO(xml, pProcedimento, pPrestador);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CIRURGIAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_ATI_MED_REPETIDO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_ATI_MED_REPETIDO (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLancamento in Number,pAtiMed in Varchar2) IS
Cursor cProcuraEspec Is Select Count(*)
                            From ItLan_Med
                           Where Cd_Reg_Fat    = pRegFat
                             And Cd_Lancamento = pLancamento
                             And Cd_Ati_Med    = pAtiMed;
  nAchou Number;
Begin
    Open cProcuraEspec;
      Fetch cProcuraEspec Into nAchou;
  Close cProcuraEspec;
  If nAchou > 1 then
      If pAtiMed = '01' Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_69)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_69', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é permitido mais que um cirurgião na equipe médica.'),TRUE);
      Elsif pAtiMed = '06' Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_70)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_70', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é permitido mais que um anestesista na equipe médica.'),TRUE);
      Else
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_71)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_71', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestadores auxiliares com atividade (%s) repetida na equipe médica, verifique.', arg_list(pAtiMed)),TRUE);
      End If;
  End If;
	--PDA 515248
  If pAtiMed NOT IN ('01','02','03','04','05','06') Then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_112)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),
	 pkg_rmi_traducao.extrair_pkg_msg('MSG_112', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Identificador de Equipe médica inválido para cobrança SUS.'),TRUE);
  End If;
	--FIM 515248
End;
PROCEDURE P_VALIDA_ATI_MED_REPETIDO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLancamento Number;
	pAtiMed Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLancamento:= PKG_XML.GetNumber(xml, 'pLancamento');
		pAtiMed:= PKG_XML.GetVarchar2(xml, 'pAtiMed');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATI_MED_REPETIDO_E(xml) THEN
				P_VALIDA_ATI_MED_REPETIDO(xml, pRegFat, pLancamento, pAtiMed);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_ATI_MED_REPETIDO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PRESTADOR_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PRESTADOR_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, pPrestador in Number) IS
nAchou Number;
  SAIDA  Exception;
BEGIN
  If pPrestador Is Null Then
    Raise Saida;
  End If;
   SELECT Count(*)
     INTO nAchou
     FROM PRES_CON pres_con
        , PRESTADOR prestador
        , CONFIG_FFIS config_ffis
        , CONVENIO convenio
          , EMPRESA_CONVENIO
    WHERE prestador.CD_PRESTADOR    = pPrestador
      AND pres_con.CD_CONVENIO      = convenio.CD_CONVENIO
      AND config_ffis.CD_CONVENIO   = convenio.CD_CONVENIO
      AND pres_con.CD_PRESTADOR     = prestador.CD_PRESTADOR
      and (pres_con.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or pres_con.cd_multi_empresa is null )  -- OP 3396 - 25/04/2013
      AND Empresa_Convenio.Cd_Convenio = Convenio.Cd_Convenio
      AND Empresa_Convenio.Cd_Multi_Empresa = config_ffis.Cd_Multi_Empresa
      AND prestador.TP_SITUACAO     = 'A';
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_72)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_72', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador (%s) não credenciado ao Convênio SUS', arg_list(pPrestador)),true);
  End If;
  Exception
      When Saida Then
        Null;
END;
PROCEDURE P_VAL_PRESTADOR_SUS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pPrestador Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_SUS_E(xml) THEN
				P_VAL_PRESTADOR_SUS(xml, pPrestador);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_SUS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_PRESTADOR_CBO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_PRESTADOR_CBO (xml IN OUT NOCOPY PKG_XML.XmlContext, pProcedimento in Varchar2, pPrestador in Number, pCBO in Varchar2,pAtiMed in Varchar2 default '00') IS
vMessage Varchar2(2000);
    nAchou   Number;
  Saida    Exception;
Begin
  If pPrestador Is Null Then
    Raise Saida;
  End If;
    If pCBO Is Not Null And pPrestador Is Null Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_73)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),pkg_rmi_traducao.extrair_pkg_msg('MSG_73', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CBO não deve ser preenchido.'),true);
    End If;
    If Pkg_Mv2000.Le_Cliente = 718 Or pCBO Is Null Then
       /*Conforme solicitAção do Cliente e do Sr. José Emílio, todas as validações do CBO estão
      sendo alteradas para o cliente 718, fazendo com que seja permitido o lançamento de qualquer
      CBO que esteja cadastrado na Empresa, independente do Prestador ou Procedimento.*/
    Raise Saida;
    End If;
  Select count(*)
      Into nAchou
        From procedimento_sus_cbo
           , prestador_cbo
   Where procedimento_sus_cbo.cd_procedimento = pProcedimento
         And prestador_cbo.cd_prestador           = pPrestador
     And procedimento_sus_cbo.cd_cbos         = pCBO
          And prestador_cbo.cd_cbo                 = procedimento_sus_cbo.cd_cbos
         And prestador_cbo.sn_ativo               = 'S';
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_74)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_74', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s não é compatível com o CBO ou Prestador.', arg_list(pProcedimento)),true);
    End If;
  -- Validações pertinentes a regra de preenchimento do CBO.
  vMessage:= Null;
  vMessage:= Pack_SUS.FNC_SUS_VALIDA_CBO(pCBO
                                              ,pProcedimento
                                              ,pPrestador);
  If vMessage Is Not Null Then
   If Pkg_ffis_M_LACTO_AIH_P321.F_OBRIGA_CBO(xml, pProcedimento) Then
     If Substr(vMessage,1,8) = 'Atenção:' And pAtiMed In ('02','03','04','06') Then
       Null;
     Else
       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
       PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),vMessage,true);
     End If;
    End If;
  End If;
Exception
  When Saida Then
    Null;
END;
PROCEDURE P_VAL_PRESTADOR_CBO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pProcedimento Varchar2(4000);
	pPrestador Number;
	pCBO Varchar2(4000);
	pAtiMed Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		pCBO:= PKG_XML.GetVarchar2(xml, 'pCBO');
		pAtiMed:= PKG_XML.GetVarchar2(xml, 'pAtiMed');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CBO_E(xml) THEN
				P_VAL_PRESTADOR_CBO(xml, pProcedimento, pPrestador, pCBO, pAtiMed);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_PRESTADOR_CBO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VAL_CBO_AUXILIARES</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VAL_CBO_AUXILIARES (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number) IS
nAchou Number;
Begin
  For record In (select Substr(ItLan_Med.Cd_CBO_Prestador, 1, 4) Cd_CBOS
                      , ItReg_Fat.Cd_Procedimento
                   from itreg_fat
                      , itlan_med
                  where itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat
                    and itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                    and itlan_med.cd_ati_med not in ('01','06')
                    and itlan_med.cd_ati_med is not null
                    and itreg_fat.cd_reg_fat = pRegFat
                  group by itreg_fat.cd_procedimento
                      , substr(itlan_med.cd_cbo_prestador, 1, 4)) Loop
    Select Count(*)
      Into nAchou
      From Procedimento_SUS_CBO
     Where Cd_Procedimento = record.Cd_Procedimento
       And Substr(Cd_CBOS,1,4) = record.Cd_CBOS
       And SN_Ativo = 'S';
    If nAchou = 0 Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_75)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_75', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Procedimento %s com lançamento de CBO incompatível com o procedimento, ver prestadores auxiliares.', arg_list(record.Cd_Procedimento)),true);
    End If;
  End Loop;
End;
PROCEDURE P_VAL_CBO_AUXILIARES (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CBO_AUXILIARES_E(xml) THEN
				P_VAL_CBO_AUXILIARES(xml, pRegFat);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VAL_CBO_AUXILIARES_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_TIPO_PAGAMENTO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_TIPO_PAGAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, pConvenio in Number,pPrestador in Number,pTpPagamento in Varchar2, FSV_MODE IN OUT NOCOPY varchar2) IS
CURSOR C IS
   SELECT COUNT(*)
     FROM PRES_CON PRES_CON
    WHERE PRES_CON.CD_PRESTADOR = pPrestador
      AND PRES_CON.CD_CONVENIO  = pConvenio
      and (pres_con.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or pres_con.cd_multi_empresa is null )  -- OP 3396 - 25/04/2013
      AND PRES_CON.SN_PAGA_PELO_CONVENIO = 'S';
  nQtd_Registro NUMBER;
  SAIDA         EXCEPTION;
  BEGIN
  IF FSV_MODE = 'QUERY' Or pTpPagamento Is Null THEN
    RAISE SAIDA;
  END IF;
  OPEN C;
    FETCH C INTO nQtd_Registro;
  CLOSE C;
  IF pTpPagamento not in ('P', 'F', 'C') THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_76)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_76', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: A forma de pagamento deve ser P - Produção ou C - Convênio ou F - Hospital.'),TRUE);
  END IF;
  IF NVL( nQtd_Registro, 0 ) = 0 AND pTpPagamento IN ('P', 'F') THEN
     RAISE SAIDA;
  END IF;
  IF NVL( nQtd_Registro, 0 ) = 0 AND pTpPagamento = 'C' THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_77)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_77', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Prestador não está credenciado para este forma de pagamento, para credencia-lo, utilize a opção Tabelas-> Gerais -> Prestadores->Credenciamento.'),TRUE);
  END IF;
EXCEPTION
     WHEN SAIDA THEN
       NULL;
END;
PROCEDURE P_VALIDA_TIPO_PAGAMENTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pConvenio Number;
	pPrestador Number;
	pTpPagamento Varchar2(4000);
	FSV_MODE VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pConvenio:= PKG_XML.GetNumber(xml, 'pConvenio');
		pPrestador:= PKG_XML.GetNumber(xml, 'pPrestador');
		pTpPagamento:= PKG_XML.GetVarchar2(xml, 'pTpPagamento');
		FSV_MODE:= PKG_XML.GetVARCHAR2(xml, 'FSV_MODE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_TIPO_PAGAMENTO_E(xml) THEN
				P_VALIDA_TIPO_PAGAMENTO(xml, pConvenio, pPrestador, pTpPagamento, FSV_MODE);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_TIPO_PAGAMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'FSV_MODE', FSV_MODE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_REMESSA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_REMESSA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Remessa number, reg_fat IN OUT NOCOPY REG_FATRec) IS
vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-REMESSA-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_FFCV_REMESSA_FATURA.P_RETORNA_DADOS(xml, pCd_Remessa
                                                                 ,xml.multiEmpresa
                                                     ,xml.usuario
                                                     ,True
                                                     ,True
                                                     ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DT_ABERTURA', Reg_Fat.Dsp_Dt_Abertura, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_FECHADA', Reg_Fat.Dsp_Remessa_SN_Fechada, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DS_REMESSA', Reg_Fat.Dsp_Ds_Remessa, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DT_COMPETENCIA', Reg_Fat.Dsp_Dt_Competencia, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_VALIDA_DATA_ALTA', Reg_Fat.DSP_REM_SN_VALIDA_DATA_ALTA, False);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'TP_COMPLEXIDADE_PROCEDIMENTO', Reg_Fat.Dsp_Tipo_Complexidade, False);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_REMESSA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCd_Remessa number;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCd_Remessa:= PKG_XML.Getnumber(xml, 'pCd_Remessa');
		REG_FAT.DSP_DT_ABERTURA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_ABERTURA');
		REG_FAT.DSP_REMESSA_SN_FECHADA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_REMESSA_SN_FECHADA');
		REG_FAT.DSP_DS_REMESSA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA');
		REG_FAT.DSP_DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA');
		REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA');
		REG_FAT.DSP_TIPO_COMPLEXIDADE:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.DSP_TIPO_COMPLEXIDADE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_REMESSA_E(xml) THEN
				P_RETORNA_DADOS_REMESSA(xml, pCd_Remessa, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_REMESSA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_ABERTURA', REG_FAT.DSP_DT_ABERTURA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_REMESSA_SN_FECHADA', REG_FAT.DSP_REMESSA_SN_FECHADA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_DS_REMESSA', REG_FAT.DSP_DS_REMESSA);
		PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA', REG_FAT.DSP_DT_COMPETENCIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA', REG_FAT.DSP_REM_SN_VALIDA_DATA_ALTA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.DSP_TIPO_COMPLEXIDADE', REG_FAT.DSP_TIPO_COMPLEXIDADE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CNPJ</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CNPJ (xml IN OUT NOCOPY PKG_XML.XmlContext, pCNPJ in Number, itcob_pre IN OUT NOCOPY ITCOB_PRERec) IS
cCpfCgcAux VARCHAR2(50);
   nTamCpfCgc NUMBER;
   cCaracter NUMBER;
   cPos varchar2(14);
BEGIN
   IF pCNPJ IS NOT NULL THEN
      cPos := lpad(pCNPJ,14,'0' );
      cCpfCgcAux := RTRIM(pCNPJ);
      nTamCpfCgc := LENGTH(cPos);
      IF cCpfCgcAux LIKE ' %' THEN
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_78)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_78', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem espaço em branco no início do CNPJ'),true);
      END IF;
      IF INSTR( cCpfCgcAux, '  ') > 0 THEN
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_79)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_79', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem espaços em branco excessivos no CNPJ na posição %s', arg_list(to_char ( INSTR( cCpfCgcAUX, '  ') ))),true);
      END IF;
      WHILE NVL(LENGTH(cCpfCgcAux), 0) > 0 LOOP
         cCaracter := ASCII ( SUBSTR(cCpfCgcAux, 1, 1) );
         IF cCaracter = 32 THEN
            NULL;
         ELSIF cCaracter < 48 THEN
            --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
            PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_80)
                          ,pkg_rmi_traducao.extrair_pkg_msg('MSG_80', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem caracteres inválidos no CNPJ ->%s', arg_list(SUBSTR(cCpfCgcAux, 1, 1))),true);
            Raise Form_Trigger_Failure;
         ELSIF cCaracter > 57 THEN
            --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
            PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_80)
                          ,pkg_rmi_traducao.extrair_pkg_msg('MSG_80', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Existem caracteres inválidos no CNPJ ->%s', arg_list(SUBSTR(cCpfCgcAux, 1, 1))),true);
         END IF;
         cCpfCgcAux := SUBSTR(cCpfCgcAux, 2);
      END LOOP;
      IF nTamCpfCgc <> 14  THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_81)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_81', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Tamanho inválido para CNPJ'),true);
      END IF;
        IF NOT Pkg_MV_MV2000.f_erro_cgc(xml, pCNPJ) THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_82)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_82', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: CNPJ inválido'),true);
        END IF;
   END IF;
END;
PROCEDURE P_VALIDA_CNPJ (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCNPJ Number;
	itcob_pre ITCOB_PRERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCNPJ:= PKG_XML.GetNumber(xml, 'pCNPJ');
		ITCOB_PRE.NR_CNPJ_FABRICANTE:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.NR_CNPJ_FABRICANTE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CNPJ_E(xml) THEN
				P_VALIDA_CNPJ(xml, pCNPJ, ITCOB_PRE);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CNPJ_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.NR_CNPJ_FABRICANTE', ITCOB_PRE.NR_CNPJ_FABRICANTE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>P_COMMIT_FORM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_P_COMMIT_FORM (xml IN OUT NOCOPY PKG_XML.XmlContext, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2, FSV_MESSAGE_LEVEL IN OUT NOCOPY varchar2) IS
BEGIN
    If FSV_BLOCK_STATUS <> 'QUERY' Then
       FSV_message_level := 20;
       commit;
       FSV_message_level := 01;
    End if;
END;
PROCEDURE P_P_COMMIT_FORM (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	FSV_BLOCK_STATUS VARCHAR2(4000);
	FSV_MESSAGE_LEVEL VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		FSV_MESSAGE_LEVEL:= PKG_XML.GetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_P_COMMIT_FORM_E(xml) THEN
				P_P_COMMIT_FORM(xml, FSV_BLOCK_STATUS, FSV_MESSAGE_LEVEL);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_P_COMMIT_FORM_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		PKG_XML.SetVARCHAR2(xml, 'FSV_MESSAGE_LEVEL', FSV_MESSAGE_LEVEL);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_REGISTRO_CIVIL</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_REGISTRO_CIVIL (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number, pLacto in Number, pProcedimento in Varchar2, pQtLancamento in Number) IS
nQtRegCivil Number;
  Saida       Exception;
BEGIN
/*Atualiza a quantidade da Registro Civil nos itens da conta*/
  Select Count(*)
    Into nQtRegCivil
    From Registro_Civil
   Where Cd_Reg_Fat = pRegFat
     And Cd_Lancamento = pLacto;
   If pProcedimento <> '0801010047' Then
        Raise Saida;
   End If;
   If Nvl(nQtRegCivil,0) <> Nvl(pQtLancamento,0) And Nvl(nQtRegCivil,0) > 0  Then
     Update ItReg_Fat
        Set Qt_Lancamento = nQtRegCivil
      Where Cd_Reg_Fat    = pRegFat
        And Cd_Lancamento = pLacto;
     Commit;
   End if;
   Exception
       When Saida Then
         Null;
END;
PROCEDURE P_DML_REGISTRO_CIVIL (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLacto Number;
	pProcedimento Varchar2(4000);
	pQtLancamento Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
		pProcedimento:= PKG_XML.GetVarchar2(xml, 'pProcedimento');
		pQtLancamento:= PKG_XML.GetNumber(xml, 'pQtLancamento');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REGISTRO_CIVIL_E(xml) THEN
				P_DML_REGISTRO_CIVIL(xml, pRegFat, pLacto, pProcedimento, pQtLancamento);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_REGISTRO_CIVIL_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_CIDADE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_CIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, pCidade in Number, rNm_Cidade out Varchar2, rCd_UF out Varchar2,pRaise in boolean) IS
Cursor cCidade Is Select Nm_cidade
                         , Cd_UF
                      From Cidade
                     Where Cd_Cidade = pCidade;
BEGIN
  Open cCidade;
    Fetch cCidade Into rNm_Cidade, rCd_UF;
  Close cCidade;
  If pRaise Then
    If rNm_Cidade Is Null Or rCd_UF Is Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_83)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_83', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidade ou UF não cadastrado'),TRUE);
    End If;
  End If;
END;
PROCEDURE P_RETORNA_CIDADE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCidade Number;
	rNm_Cidade Varchar2(4000);
	rCd_UF Varchar2(4000);
	pRaise boolean;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCidade:= PKG_XML.GetNumber(xml, 'pCidade');
		rNm_Cidade:= PKG_XML.GetVarchar2(xml, 'rNm_Cidade');
		rCd_UF:= PKG_XML.GetVarchar2(xml, 'rCd_UF');
		pRaise:= PKG_XML.Getboolean(xml, 'pRaise');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE_E(xml) THEN
				P_RETORNA_CIDADE(xml, pCidade, rNm_Cidade, rCd_UF, pRaise);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVarchar2(xml, 'rNm_Cidade', rNm_Cidade);
		PKG_XML.SetVarchar2(xml, 'rCd_UF', rCd_UF);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_CIDADE2</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_CIDADE2 (xml IN OUT NOCOPY PKG_XML.XmlContext, pNm_Cidade in Varchar2, pCd_UF in Varchar2,pCidade in Number,pRaise in boolean, responsa IN OUT NOCOPY RESPONSARec) IS
Cursor cCidade Is Select Cd_Cidade
                        From Cidade
                     Where Nm_Cidade = pNm_Cidade
                       And Cd_UF = pCd_UF;
  nCidade Number;
Begin
  Open cCidade;
    Fetch cCidade Into nCidade;
  Close cCidade;
  If pRaise Then
    If nCidade Is Null Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_84)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_84', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidade ou UF  não Cadastrados.'),pRaise);
    End If;
    If nvl(pCidade,0) <> nCidade Then
      responsa.cd_cidade:= nCidade;
    End If;
  End If;
END;
PROCEDURE P_RETORNA_CIDADE2 (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pNm_Cidade Varchar2(4000);
	pCd_UF Varchar2(4000);
	pCidade Number;
	pRaise boolean;
	responsa RESPONSARec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pNm_Cidade:= PKG_XML.GetVarchar2(xml, 'pNm_Cidade');
		pCd_UF:= PKG_XML.GetVarchar2(xml, 'pCd_UF');
		pCidade:= PKG_XML.GetNumber(xml, 'pCidade');
		pRaise:= PKG_XML.Getboolean(xml, 'pRaise');
		RESPONSA.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'RESPONSA.CD_CIDADE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE2_E(xml) THEN
				P_RETORNA_CIDADE2(xml, pNm_Cidade, pCd_UF, pCidade, pRaise, RESPONSA);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_CIDADE2_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'RESPONSA.CD_CIDADE', RESPONSA.CD_CIDADE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_CORRIGE_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_CORRIGE_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto In Number Default Null) IS
nTotal Number;
BEGIN
   Delete Diaria_UTI_SUS
    Where Cd_Reg_Fat = pRegFat
      And Cd_Lancamento in (Select Cd_Lancamento
                              From itreg_fat i
                                 , procedimento_detalhe_vigencia d -- op 26942
                             Where i.cd_procedimento = d.cd_procedimento
							   and Trunc(i.dt_lancamento) BETWEEN d.dt_validade_inicial and NVL(d.dt_validade_final, Trunc(i.dt_lancamento))
                               and Nvl(d.sn_diaria_uti, 'N') = 'N'
							   and i.cd_procedimento NOT IN (SELECT DISTINCT cd_procedimento
							                                   FROM DBAMV.PROCEDIMENTO_SUS_REGRA
															  WHERE cd_procedimento = i.cd_procedimento
															    AND cd_regra = '10012')  --OP 25461
                               and i.cd_reg_fat = pRegFat);
  Commit;
END;
PROCEDURE P_DML_CORRIGE_UTI (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLacto Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_UTI_E(xml) THEN
				P_DML_CORRIGE_UTI(xml, pRegFat, pLacto);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_CORRIGE_UTI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_ATUALIZA_ITEM_UTI</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_ATUALIZA_ITEM_UTI (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in Number,pLacto in Number, pQtd_It In Number) IS
nQtUTI Number;
BEGIN
   --Atualiza a quantidade da UTI nos itens da conta
   nQtUTI:= Pkg_ffis_M_LACTO_AIH_P321.F_F_TOTAL_UTI(xml, pRegFat,pLacto);
   If nQtUTI <> pQtd_It And nQtUTI > 0 Then
     Update ItReg_Fat
        Set Qt_Lancamento = nQtUTI
      Where Cd_Reg_Fat    = pRegFat
        And Cd_Lancamento = pLacto;
   Commit;
   End if;
END;
PROCEDURE P_DML_ATUALIZA_ITEM_UTI (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pLacto Number;
	pQtd_It Number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pLacto:= PKG_XML.GetNumber(xml, 'pLacto');
		pQtd_It:= PKG_XML.GetNumber(xml, 'pQtd_It');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_ITEM_UTI_E(xml) THEN
				P_DML_ATUALIZA_ITEM_UTI(xml, pRegFat, pLacto, pQtd_It);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_ITEM_UTI_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_LEITO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Leito number, atendime IN OUT NOCOPY ATENDIMERec) IS
vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-LEITO-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_PARI_LEITO.P_RETORNA_DADOS(xml, pCd_Leito
                                                  ,xml.multiEmpresa
                                              ,xml.usuario
                                              ,True
                                              ,True
                                              ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DS_ENFERMARIA', ATENDIME.DSP_DS_ENFERMARIA, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_UNID_INT', ATENDIME.CD_UNID_INT, True);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_LEITO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCd_Leito number;
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCd_Leito:= PKG_XML.Getnumber(xml, 'pCd_Leito');
		ATENDIME.DSP_DS_ENFERMARIA:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA');
		ATENDIME.CD_UNID_INT:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_UNID_INT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_LEITO_E(xml) THEN
				P_RETORNA_DADOS_LEITO(xml, pCd_Leito, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_LEITO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA', ATENDIME.DSP_DS_ENFERMARIA);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_UNID_INT', ATENDIME.CD_UNID_INT);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_MOT_ALT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_MOT_ALT (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Mot_Alt in number, atendime IN OUT NOCOPY ATENDIMERec) IS
vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-MOT_ALT-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_PARI_MOT_ALT.P_RETORNA_DADOS(xml, pCd_Mot_Alt
                                                  ,xml.multiEmpresa
                                              ,xml.usuario
                                              ,True
                                              ,True
                                              ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'TP_MOT_ALTA', ATENDIME.TP_MOT_ALTA, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_ALTA_SUS', ATENDIME.CD_ALTA_SUS, True);
  --
  -- Limpando a lista de Parâmetros
  --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_MOT_ALT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCd_Mot_Alt number;
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCd_Mot_Alt:= PKG_XML.Getnumber(xml, 'pCd_Mot_Alt');
		ATENDIME.TP_MOT_ALTA:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.TP_MOT_ALTA');
		ATENDIME.CD_ALTA_SUS:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ALTA_SUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_MOT_ALT_E(xml) THEN
				P_RETORNA_DADOS_MOT_ALT(xml, pCd_Mot_Alt, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_MOT_ALT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.TP_MOT_ALTA', ATENDIME.TP_MOT_ALTA);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ALTA_SUS', ATENDIME.CD_ALTA_SUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DEFINE_SN_INFECCAO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DEFINE_SN_INFECCAO (xml IN OUT NOCOPY PKG_XML.XmlContext, pAtendimento in Number,pSN_Infec in Varchar2, atendime IN OUT NOCOPY ATENDIMERec) IS
nAchou Number;
BEGIN
    If pSN_Infec = 'N' Then
     Select Count(*)
       Into nAchou
       From reg_inf
      Where Cd_atendimento = pAtendimento
        And Tp_infec       = 'H';
     If nAchou > 0 Then
       ATENDIME.SN_INFECCAO:= 'S';
     End If;
  End if;
END;
PROCEDURE P_DEFINE_SN_INFECCAO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pAtendimento Number;
	pSN_Infec Varchar2(4000);
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pAtendimento:= PKG_XML.GetNumber(xml, 'pAtendimento');
		pSN_Infec:= PKG_XML.GetVarchar2(xml, 'pSN_Infec');
		ATENDIME.SN_INFECCAO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.SN_INFECCAO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_SN_INFECCAO_E(xml) THEN
				P_DEFINE_SN_INFECCAO(xml, pAtendimento, pSN_Infec, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DEFINE_SN_INFECCAO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.SN_INFECCAO', ATENDIME.SN_INFECCAO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_LANCA_ESPEC_SUS</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_LANCA_ESPEC_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
vEsp Espec_SUS.Cd_Espec_SUS%Type;
Begin
    vEsp:= REG_FAT.CD_ESPEC_SUS;
    Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_ESPEC_SUS(xml, REG_FAT.CD_REG_FAT
                        ,REG_FAT.CD_PROCEDIMENTO_SOLICITADO
                        ,REG_FAT.CD_PROCEDIMENTO_REALIZADO
                        ,vEsp);
  If Nvl(Reg_Fat.Cd_Espec_SUS,'0') <> Nvl(vEsp,'0') Then
    Reg_Fat.Cd_Espec_SUS:= vEsp;
  End If;
End;
PROCEDURE P_LANCA_ESPEC_SUS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.CD_PROCEDIMENTO_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.CD_ESPEC_SUS:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_ESPEC_SUS_E(xml) THEN
				P_LANCA_ESPEC_SUS(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_LANCA_ESPEC_SUS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_SOLICITADO', REG_FAT.CD_PROCEDIMENTO_SOLICITADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS', REG_FAT.CD_ESPEC_SUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_RETORNA_DADOS_EMPRESA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_RETORNA_DADOS_EMPRESA (xml IN OUT NOCOPY PKG_XML.XmlContext, pCd_Multi_Empresa number, formParams IN OUT NOCOPY FormParamsRec) IS
  CURSOR C_DADOS_EMPRESA IS SELECT CD_MULTI_EMPRESA
                                 , SN_IMPORTA_ATEND
                                 , SN_GERA_DISQUETE_PERIODO
                                 , SN_GERA_ACH
                                 , CD_PRESTADOR_AIH
                                 , CD_CGC
                                 , CD_PRESTADOR_DIR_CLINICO
                                 , DS_MULTI_EMPRESA
                                 , SN_REMESSA_OBRIGATORIA
                                 , NR_AIH_INICIAL_CNRAC
                                 , NR_AIH_FINAL_CNRAC
                                 , NR_INICIAL_AIH_ESPECIFICA
                                 , NR_FINAL_AIH_ESPECIFICA
                              FROM DBAMV.MULTI_EMPRESAS
                             WHERE CD_MULTI_EMPRESA = DBAMV.PKG_MV2000.LE_EMPRESA;
  R_DADOS_EMPRESA C_DADOS_EMPRESA%ROWTYPE;
/*  vAIH1 Multi_Empresas.AIH_Inicial%Type;
  vAIH2 Multi_Empresas.AIH_Inicial%Type;
  vAIH3 Multi_Empresas.AIH_Inicial%Type;
  vAIH4 Multi_Empresas.AIH_Inicial%Type;
*/
  vLst_ParamLocal PKG_PARAMETRO.ID_LISTA_PARAM;
  vLst_ParamRet PKG_PARAMETRO.ID_LISTA_PARAM;
  --
Begin
  --
  --  CriAção da Lista de Parâmetros
  --
  vLst_ParamRet  := pkg_parametro.fn_criar_lista_parametros('PRC_RETORNA_DADOS-EMPRESA-RETORNO');
  --
  -- Chamada da Procedure
  --
  M_PKG_GLOBAL_MULTI_EMPRESAS.P_RETORNA_DADOS(xml, xml.multiEmpresa
                                                                     ,xml.multiEmpresa
                                                       ,xml.usuario
                                                       ,True
                                                       ,True
                                                       ,vLst_ParamRet);
  --
  vLst_ParamLocal := pkg_parametro.fn_recupera_lista_parametros(vLst_ParamRet);
  --
  -- RecuperAçãos dos parametros retornados pela Procedure
  --
/*
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_MULTI_EMPRESA', formParams.P_EMPRESA, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_IMPORTA_ATEND', formParams.SN_IMPORTA_ATEND, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_GERA_DISQUETE_PERIODO', formParams.SN_GERA_DISQUETE_PERIODO, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_GERA_ACH', formParams.SN_GERA_ACH, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_PRESTADOR_AIH', formParams.CD_PRESTADOR_AIH, True);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_CGC', formParams.CD_CGC, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'CD_PRESTADOR_DIR_CLINICO', formParams.CD_PRESTADOR_DIR_CLINICO, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'DS_MULTI_EMPRESA', formParams.DS_MULTI_EMPRESA, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'SN_REMESSA_OBRIGATORIA', formParams.SN_REMESSA_OBRIGATORIA, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_AIH_INICIAL_CNRAC',vAIH1, false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_AIH_FINAL_CNRAC',vAIH2 , false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_INICIAL_AIH_ESPECIFICA',vAIH3 , false);
  pkg_parametro.pr_recupera_parametro(vLst_ParamLocal,'NR_FINAL_AIH_ESPECIFICA',vAIH4 , false);
*/
  OPEN C_DADOS_EMPRESA;
    FETCH C_DADOS_EMPRESA INTO R_DADOS_EMPRESA;
  CLOSE C_DADOS_EMPRESA;
  formParams.P_EMPRESA:= R_DADOS_EMPRESA.CD_MULTI_EMPRESA;
  formParams.SN_IMPORTA_ATEND:= R_DADOS_EMPRESA.SN_IMPORTA_ATEND;
  formParams.SN_GERA_DISQUETE_PERIODO:= R_DADOS_EMPRESA.SN_GERA_DISQUETE_PERIODO;
  formParams.SN_GERA_ACH:= R_DADOS_EMPRESA.SN_GERA_ACH;
  formParams.CD_PRESTADOR_AIH:= R_DADOS_EMPRESA.CD_PRESTADOR_AIH;
  formParams.CD_CGC:= R_DADOS_EMPRESA.CD_CGC;
  formParams.CD_PRESTADOR_DIR_CLINICO:= R_DADOS_EMPRESA.CD_PRESTADOR_DIR_CLINICO;
  formParams.DS_MULTI_EMPRESA:= R_DADOS_EMPRESA.DS_MULTI_EMPRESA;
  formParams.SN_REMESSA_OBRIGATORIA:= R_DADOS_EMPRESA.SN_REMESSA_OBRIGATORIA;
  formParams.NR_AIH_INICIAL_CNRAC:= R_DADOS_EMPRESA.NR_AIH_INICIAL_CNRAC;
  formParams.NR_AIH_FINAL_CNRAC:= R_DADOS_EMPRESA.NR_AIH_FINAL_CNRAC;
  formParams.NR_INICIAL_AIH_ESPECIFICA:= R_DADOS_EMPRESA.NR_INICIAL_AIH_ESPECIFICA;
  formParams.NR_FINAL_AIH_ESPECIFICA:= R_DADOS_EMPRESA.NR_FINAL_AIH_ESPECIFICA;
/*
  formParams.NR_AIH_INICIAL_CNRAC      := TO_CHAR(vAIH1);
  formParams.NR_AIH_FINAL_CNRAC        := TO_CHAR(vAIH2);
  formParams.NR_INICIAL_AIH_ESPECIFICA := TO_CHAR(vAIH3);
  formParams.NR_FINAL_AIH_ESPECIFICA   := TO_CHAR(vAIH4);
*/
 --
 -- Limpando a lista de Parâmetros
 --
  pkg_parametro.pr_limpar_lista_parametros(vLst_ParamLocal);
  --
End;
PROCEDURE P_RETORNA_DADOS_EMPRESA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCd_Multi_Empresa number;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCd_Multi_Empresa:= PKG_XML.Getnumber(xml, 'pCd_Multi_Empresa');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.SN_IMPORTA_ATEND:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_IMPORTA_ATEND');
		formParams.SN_GERA_DISQUETE_PERIODO:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_GERA_DISQUETE_PERIODO');
		formParams.SN_GERA_ACH:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_GERA_ACH');
		formParams.CD_PRESTADOR_AIH:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_AIH');
		formParams.CD_CGC:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.CD_CGC');
		formParams.CD_PRESTADOR_DIR_CLINICO:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_DIR_CLINICO');
		formParams.DS_MULTI_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.DS_MULTI_EMPRESA');
		formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
		formParams.NR_AIH_INICIAL_CNRAC:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_AIH_INICIAL_CNRAC');
		formParams.NR_AIH_FINAL_CNRAC:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_AIH_FINAL_CNRAC');
		formParams.NR_INICIAL_AIH_ESPECIFICA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_INICIAL_AIH_ESPECIFICA');
		formParams.NR_FINAL_AIH_ESPECIFICA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.NR_FINAL_AIH_ESPECIFICA');
--raise_application_error(-20999,formParams.CD_PRESTADOR_AIH||' teste');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_EMPRESA_E(xml) THEN
				P_RETORNA_DADOS_EMPRESA(xml, pCd_Multi_Empresa, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_RETORNA_DADOS_EMPRESA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.P_EMPRESA', formParams.P_EMPRESA);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_IMPORTA_ATEND', formParams.SN_IMPORTA_ATEND);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_GERA_DISQUETE_PERIODO', formParams.SN_GERA_DISQUETE_PERIODO);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_GERA_ACH', formParams.SN_GERA_ACH);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_AIH', formParams.CD_PRESTADOR_AIH);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.CD_CGC', formParams.CD_CGC);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.CD_PRESTADOR_DIR_CLINICO', formParams.CD_PRESTADOR_DIR_CLINICO);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.DS_MULTI_EMPRESA', formParams.DS_MULTI_EMPRESA);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA', formParams.SN_REMESSA_OBRIGATORIA);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_AIH_INICIAL_CNRAC', formParams.NR_AIH_INICIAL_CNRAC);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_AIH_FINAL_CNRAC', formParams.NR_AIH_FINAL_CNRAC);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_INICIAL_AIH_ESPECIFICA', formParams.NR_INICIAL_AIH_ESPECIFICA);
		PKG_XML.SetVARCHAR2(xml, 'PARAMETER.NR_FINAL_AIH_ESPECIFICA', formParams.NR_FINAL_AIH_ESPECIFICA);
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_VALIDA_CID_OBITO</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_VALIDA_CID_OBITO (xml IN OUT NOCOPY PKG_XML.XmlContext, pCID In Varchar2,pEstadoPac in Varchar2,pMot in Varchar2) IS
Cursor cCID Is Select nvl(SubCat,'N')  SubCat
                   From CID
                  Where Cd_CID = pCID;
    Cursor cMotivo is Select Tp_Mot_Alta
                        From mot_alt
                       Where Cd_Mot_Alt = pMot;
  vTpMotAlta  mot_alt.tp_mot_alta%type;
  rCID        cCID%RowType;
  Saida       Exception;
Begin
  If pCID Is Null Then
    Raise Saida;
  End If;
  Open cMotivo;
    Fetch cMotivo into vTpMotAlta;
  Close cMotivo;
     If nvl(vTpMotAlta,'X') <> 'O' and pEstadoPac <> 'O' then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_85)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_85', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: não é possível informar O CID do óbito. Paciente não está em óbito.'),TRUE);
    End if;
  Open cCID;
    Fetch cCID Into rCID;
  Close cCID;
  If rCID.SubCat = 'N' then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_86)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_86', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CID do óbito não Válido Para lançamento.'),TRUE);
  End If;
Exception
      When Saida Then
        Null;
END;
PROCEDURE P_VALIDA_CID_OBITO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pCID Varchar2(4000);
	pEstadoPac Varchar2(4000);
	pMot Varchar2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pCID:= PKG_XML.GetVarchar2(xml, 'pCID');
		pEstadoPac:= PKG_XML.GetVarchar2(xml, 'pEstadoPac');
		pMot:= PKG_XML.GetVarchar2(xml, 'pMot');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_OBITO_E(xml) THEN
				P_VALIDA_CID_OBITO(xml, pCID, pEstadoPac, pMot);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_VALIDA_CID_OBITO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>Montar_Diaria_Acompanhante</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE ( xml IN OUT NOCOPY PKG_XML.XmlContext
                                         , pRegFat  In Number
                                         , pDias_DA In number
                                         , pReflesh  IN OUT NOCOPY Varchar2
                                         , reg_fat IN OUT NOCOPY REG_FATRec) IS
nLancamento  Number;
  Saida        Exception;
vMens    varchar2(100); --PDA 524796
Begin
   If Nvl(pDias_DA,0) = 0 Then
     If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_TEM_DA(xml, pRegFat) Then
         Pkg_ffis_M_LACTO_AIH_P321.P_DML_DELETE_DA(xml, pRegFat, REG_FAT);
     Else
       Raise Saida;
     End If;
   End if;
   If Not Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_TEM_DA(xml, pRegFat) then
     Pkg_ffis_M_LACTO_AIH_P321.P_INSERE_ITREG_FAT(xml, pRegFat,
                      nLancamento,
                      Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_PRC_DIARIA_ACOMPAN(xml, pRegFat),
                      Pkg_ffis_M_LACTO_AIH_P321.F_GET_DT_INTERNACAO(xml, pRegFat),
                      Pkg_ffis_M_LACTO_AIH_P321.F_GET_SETOR_REALIZADO(xml, pRegFat),
                      Pkg_ffis_M_LACTO_AIH_P321.F_GET_PRESTADOR_AIH(xml),
                      pDias_DA,
                      'N',
                      pReflesh);
    --INICIO PDA 524796
    pkg_ffis_valida_lancamento_aih.PRC_LANCA_QTD_COMPETENCIA(pRegFat, 'A', 'ACOMP', vMens);
    pReflesh:= 'S';
/*   Else
        Pkg_ffis_M_LACTO_AIH_P321.P_DML_ATUALIZA_DA(xml, pRegFat,pDias_DA);*/
    --FIM PDA 524796
   End if;
   commit;
Exception
  When Saida Then
    Null;
End;
PROCEDURE P_MONTAR_DIARIA_ACOMPANHANTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat Number;
	pDias_DA number;
	pReflesh Varchar2(4000);
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.GetNumber(xml, 'pRegFat');
		pDias_DA:= PKG_XML.Getnumber(xml, 'pDias_DA');
		pReflesh:= PKG_XML.GetVarchar2(xml, 'pReflesh');
		REG_FAT.NR_DIARIA_ACOMPANHANTE:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_DIARIA_ACOMPANHANTE_E(xml) THEN
				P_MONTAR_DIARIA_ACOMPANHANTE(xml, pRegFat, pDias_DA, pReflesh, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_MONTAR_DIARIA_ACOMPANHANTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE', REG_FAT.NR_DIARIA_ACOMPANHANTE);
		PKG_XML.SetVarchar2(xml, 'pReflesh', pReflesh);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_ATUALIZA_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_ATUALIZA_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number ,pDias in number) IS
Cursor cDA Is Select Sum(Qt_Lancamento) Qt_Lancamento
                  From ItReg_Fat
                 Where Cd_Reg_Fat = pRegFat
                   And Cd_Procedimento In (Select Cd_Procedimento
                                             From Procedimento_SUS_Detalhe
                                            Where SN_Diaria_Acompanhante = 'S');
  nTotalIT Number;
BEGIN
  Open cDA;
    Fetch cDa Into nTotalIT;
  Close cDA;
  If nTotalIT <> pDias Then
      Update ItReg_Fat
          Set Qt_Lancamento = pDias
     Where Cd_Reg_Fat    = pRegFat
       And Cd_Procedimento In (Select Cd_Procedimento
                                From Procedimento_SUS_Detalhe
                                Where SN_Diaria_Acompanhante = 'S');
  Commit;
  End If;
END;
PROCEDURE P_DML_ATUALIZA_DA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat number;
	pDias number;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
		pDias:= PKG_XML.Getnumber(xml, 'pDias');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_DA_E(xml) THEN
				P_DML_ATUALIZA_DA(xml, pRegFat, pDias);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_ATUALIZA_DA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRC_DML_DELETE_DA</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_DML_DELETE_DA (xml IN OUT NOCOPY PKG_XML.XmlContext, pRegFat in number, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
    If Pkg_ffis_M_LACTO_AIH_P321.F_F_SN_TEM_DA(xml, pRegFat) Then
      Delete ItReg_Fat
     Where Cd_Reg_Fat = pRegFat
       And Cd_Procedimento In (Select Cd_Procedimento
                                 From Procedimento_SUS_Detalhe
                                Where SN_Diaria_Acompanhante = 'S');
    End If;
    If NVL(REG_FAT.NR_DIARIA_ACOMPANHANTE,0) > 0 Then
    REG_FAT.NR_DIARIA_ACOMPANHANTE:= 0;
    End If;
  Commit;
END;
PROCEDURE P_DML_DELETE_DA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	pRegFat number;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		pRegFat:= PKG_XML.Getnumber(xml, 'pRegFat');
		REG_FAT.NR_DIARIA_ACOMPANHANTE:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DELETE_DA_E(xml) THEN
				P_DML_DELETE_DA(xml, pRegFat, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_DML_DELETE_DA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE', REG_FAT.NR_DIARIA_ACOMPANHANTE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.DSP_DS_CIDADANIA.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
--SAULO
begin
   if FSV_BLOCK_STATUS <> 'QUERY' AND PACIENTE.DSP_DS_CIDADANIA IS NOT NULL then
      SELECT CD_CIDADANIA
        INTO PACIENTE.CD_CIDADANIA
        FROM CIDADANIAS
       WHERE DS_CIDADANIA = PACIENTE.DSP_DS_CIDADANIA;
   end if;
exception
   when NO_DATA_FOUND then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_87)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_87', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidadania não Cadastrada.'),TRUE);
end;
END P_I_PC_P_DSP_DS_CIDADANIA;
PROCEDURE P_I_PC_P_DSP_DS_CIDADANIA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
	FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.CD_CIDADANIA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADANIA');
		PACIENTE.DSP_DS_CIDADANIA:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA');
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_CIDADANIA_E(xml) THEN
				P_I_PC_P_DSP_DS_CIDADANIA(xml, PACIENTE, FSV_BLOCK_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_CIDADANIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADANIA', PACIENTE.CD_CIDADANIA);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA', PACIENTE.DSP_DS_CIDADANIA);
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.DSP_DS_GRAU_INS.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
Declare
  Cursor cGrauInst Is Select Cd_Grau_Ins
                        From Grau_Ins
                       Where Ds_Grau_Ins = Paciente.Dsp_Ds_Grau_Ins;
Begin
   If FSV_Block_Status <> 'QUERY' then
     Open cGrauInst;
       Fetch cGrauInst Into Paciente.Cd_Grau_Ins;
     Close cGrauInst;
     If Paciente.Cd_Grau_Ins Is Null Then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_88)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_88', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Grau de Instrução não Cadastrado.'),True);
     End If;
   End If;
end;
END P_I_PC_P_DSP_DS_GRAU_INS;
PROCEDURE P_I_PC_P_DSP_DS_GRAU_INS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
	FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.DSP_DS_GRAU_INS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS');
		PACIENTE.CD_GRAU_INS:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_GRAU_INS');
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_GRAU_INS_E(xml) THEN
				P_I_PC_P_DSP_DS_GRAU_INS(xml, PACIENTE, FSV_BLOCK_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_DS_GRAU_INS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS', PACIENTE.DSP_DS_GRAU_INS);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_GRAU_INS', PACIENTE.CD_GRAU_INS);
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.NR_CEP.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_NR_CEP (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
begin
        begin
           SELECT cida.CD_UF,
                  cida.NM_CIDADE,
                  cida.CD_CIDADE
             into PACIENTE.DSP_CD_UF,
                  PACIENTE.DSP_NM_CIDADE,
                  PACIENTE.CD_CIDADE
             FROM CIDADE cida,
                  CEP_LOCALIDADES loca,
                  CEP_LOGRADOUROS logr
            WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
              AND loca.CD_UF         = cida.CD_UF
              AND loca.NM_LOCALIDADE = cida.NM_CIDADE
              AND logr.NR_CEP        = PACIENTE.NR_CEP;
        exception
            when NO_DATA_FOUND then
                 --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
                 --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_89)
                 PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:'),pkg_rmi_traducao.extrair_pkg_msg('MSG_89', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CEP não Encontrado.'),True);
        end;
/*
   if FSV_BLOCK_STATUS <> 'QUERY' then
      SELECT cep.NM_LOCALIDADE,
             cep.CD_UF,
             cida.CD_CIDADE
        into PACIENTE.DSP_NM_CIDADE,
             PACIENTE.DSP_CD_UF,
             PACIENTE.CD_CIDADE
        FROM CEP_LOCALIDADES cep,
             CIDADE cida
       WHERE cep.NM_LOCALIDADE = cida.NM_CIDADE
         AND cep.CD_UF         = cida.CD_UF
         AND cep.NR_CEP        = PACIENTE.NR_CEP;
   end if;
exception
   when NO_DATA_FOUND then
        begin
           SELECT cida.CD_UF,
                  cida.NM_CIDADE,
                  cida.CD_CIDADE
             into PACIENTE.DSP_CD_UF,
                  PACIENTE.DSP_NM_CIDADE,
                  PACIENTE.CD_CIDADE
             FROM CIDADE cida,
                  CEP_LOCALIDADES loca,
                  CEP_LOGRADOUROS logr
            WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
              AND loca.CD_UF         = cida.CD_UF
              AND loca.NM_LOCALIDADE = cida.NM_CIDADE
              AND logr.NR_CEP        = PACIENTE.NR_CEP;
        exception
            when NO_DATA_FOUND then
                 PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                               ,'Erro: CEP não Encontrado.',True);
        end;
*/
end;
END P_I_PC_P_NR_CEP;
PROCEDURE P_I_PC_P_NR_CEP (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
	FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
		PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
		PACIENTE.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADE');
		PACIENTE.NR_CEP:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CEP');
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_NR_CEP_E(xml) THEN
				P_I_PC_P_NR_CEP(xml, PACIENTE, FSV_BLOCK_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_NR_CEP_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADE', PACIENTE.CD_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.DSP_NR_CPF.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_P_DSP_NR_CPF (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec) IS
BEGIN
Declare
  Cursor cCPF Is select CD_PACIENTE
                   from paciente
                  where NR_CPF = to_char(PACIENTE.DSP_NR_CPF);
   VsMensagem    varchar2(100);
   nCdPac        number;
begin
   if nvl(global.CPFOld,0) <> nvl(PACIENTE.DSP_NR_CPF,1) then
      PACK_FFIS.erro_cpf(PACIENTE.DSP_NR_CPF, 1111, Null, Null, false, VsMensagem);
      if VsMensagem is not null then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_56)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_56', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s', arg_list(VsMensagem)),TRUE);
      end if;
      Open cCPF;
        Fetch cCPF Into nCdPac;
      Close cCPF;
      if nCdPac is null then
        PACIENTE.NR_CPF := to_char(PACIENTE.DSP_NR_CPF);
      end if;
      if nCdPac <> nvl(PACIENTE.CD_PACIENTE, 0) then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_90)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_90', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: CPF já Cadastrado em outro Paciente.'),TRUE);
      end if;
   end if;
end;
END P_I_PC_P_DSP_NR_CPF;
PROCEDURE P_I_PC_P_DSP_NR_CPF (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
	global GlobalsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.DSP_NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF');
		PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
		PACIENTE.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_PACIENTE');
		PACIENTE.DSP_NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF');
		PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
		PACIENTE.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_PACIENTE');
		global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
		global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_NR_CPF_E(xml) THEN
				P_I_PC_P_DSP_NR_CPF(xml, PACIENTE, global);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_P_DSP_NR_CPF_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.setVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_PACIENTE', PACIENTE.CD_PACIENTE);
		PKG_XML.setVARCHAR2(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_PACIENTE', PACIENTE.CD_PACIENTE);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.NR_CNS.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_P_NR_CNS (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec) IS
BEGIN
Declare
  Cursor cVerificaCNS is
    Select p.cd_paciente
      From paciente p
     Where p.nr_cns = PACIENTE.NR_CNS
       And p.cd_paciente <> PACIENTE.CD_PACIENTE;
  vValidaDef        Boolean;
  vValidaProv       Boolean;
  nCdPaciente       number;
Begin
  If Paciente.Nr_Cns Is Not Null Then
      -->>
       -->> Valida a numerAção do Cartão Nacional de Saúde definitivo.
       -->>
    vValidaDef := Pkg_ffis_M_LACTO_AIH_P321.F_VALIDA_CNS(xml, Paciente.Nr_Cns);
    If vValidaDef = FALSE  Then
         -->>
         -->> Valida a numerAção do Cartão Nacional de Saúde provisário.(PDA 82405)
         -->>
      vValidaProv := Pkg_ffis_M_LACTO_AIH_P321.F_VALIDA_CNS_PROV(xml, Paciente.Nr_Cns);
         IF NOT vValidaProv THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_91)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_91', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: O Número do CNS não confere. Verifique o Número digitado.'),true);
      END IF;
    END IF;
    nCdPaciente := NULL;
    Open  cVerificaCNS;
    Fetch cVerificaCNS into nCdPaciente;
    Close cVerificaCNS;
    IF nCdPaciente IS NOT NULL then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_92)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_92', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cartão Nacional de Saúde cadastrado em outro paciente.(%s)', arg_list(nCdPaciente)),true);
    END IF;
  END IF;
End;
END P_I_WVI_P_NR_CNS;
PROCEDURE P_I_WVI_P_NR_CNS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.NR_CNS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CNS');
		PACIENTE.NR_CNS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CNS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_P_NR_CNS_E(xml) THEN
				P_I_WVI_P_NR_CNS(xml, PACIENTE);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_P_NR_CNS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CNS', PACIENTE.NR_CNS);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CNS', PACIENTE.NR_CNS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PACIENTE.POST-QUERY</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PQ_PACIENTE (xml IN OUT NOCOPY PKG_XML.XmlContext, paciente IN OUT NOCOPY PACIENTERec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
Declare
    Cursor cLocalidade(pCEP Varchar2) Is
          SELECT substr(cep.NM_LOCALIDADE,1,40),
             cep.CD_UF
        FROM CEP_LOCALIDADES cep,
             CIDADE cida
       WHERE cep.NR_CEP        = pCEP
         and cep.NM_LOCALIDADE = cida.NM_CIDADE
         AND cep.CD_UF         = cida.CD_UF
       Group By substr(cep.NM_LOCALIDADE,1,40),
                cep.CD_UF;
    Cursor cLocalidade2(pCEP Varchar2) Is
    SELECT cida.NM_CIDADE
         , cida.CD_UF
      FROM CIDADE cida,
           CEP_LOCALIDADES loca,
           CEP_LOGRADOUROS logr
     WHERE logr.CD_LOCALIDADE = loca.CD_LOCALIDADE
       AND loca.CD_UF         = cida.CD_UF
       AND loca.NM_LOCALIDADE = cida.NM_CIDADE
       AND logr.NR_CEP        = pCEP
       GROUP BY cida.CD_UF,
                cida.NM_CIDADE;
      Cursor cCidadania(pCidadania Varchar2) Is SELECT DS_CIDADANIA
                                                  FROM CIDADANIAS
                                                 WHERE CD_CIDADANIA = pCidadania;
begin
  -- Retorna cidadania do paciente
/*  PACIENTE.DSP_DS_CIDADANIA:= M_PKG_GLOBAL_CIDADANIAS.F_RETORNA_DESCRICAO(xml,PACIENTE.CD_CIDADANIA
                                                                          ,formParams.P_EMPRESA
                                                                          ,xml.usuario
                                                                          ,FALSE
                                                                          ,FALSE);
*/
  -- Retorna grau de Instrução do paciente
  PACIENTE.DSP_DS_GRAU_INS:= M_PKG_GLOBAL_GRAU_INS.F_RETORNA_DESCRICAO(xml,PACIENTE.CD_GRAU_INS
                                                                       ,formParams.P_EMPRESA
                                                                       ,xml.usuario
                                                                       ,FALSE
                                                                       ,FALSE);
  Open cLocalidade(PACIENTE.NR_CEP);
    Fetch cLocalidade Into PACIENTE.DSP_NM_CIDADE,PACIENTE.DSP_CD_UF;
  Close cLocalidade;
  Open cCidadania(PACIENTE.CD_CIDADANIA);
    Fetch cCidadania Into PACIENTE.DSP_DS_CIDADANIA;
  Close cCidadania;
  If PACIENTE.DSP_NM_CIDADE Is Null Then
    Open cLocalidade2(PACIENTE.NR_CEP);
      Fetch cLocalidade2 Into PACIENTE.DSP_NM_CIDADE,PACIENTE.DSP_CD_UF;
    Close cLocalidade2;
  End If;
  Paciente.Dsp_Nr_CPF        := to_number(PACIENTE.NR_CPF);
  -- Guarda CPF Anterior para verificar Mudanca
  global.CPFOld              := Nvl(PACIENTE.DSP_NR_CPF, 0);
  Paciente.DSP_NR_Identidade := PACIENTE.NR_IDENTIDADE;
  -- Guarda RG Anterior para verificar Mudanca
  global.RGOld               := Nvl(PACIENTE.DSP_NR_IDENTIDADE, '0');
  If length (Paciente.Nr_Identidade) > 11 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_93)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_93', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número de Identidade maior que o permitido pelo SUS. Verifique o cadastro do paciente%sAção: Corrigir pela tela de cadastro de paciente.'
				  , arg_list(chr(10))),False);
  End if;
End;
END P_B_PQ_PACIENTE;
PROCEDURE P_B_PQ_PACIENTE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	paciente PACIENTERec;
	global GlobalsRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		PACIENTE.DSP_DS_CIDADANIA:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA');
		PACIENTE.CD_CIDADANIA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADANIA');
		PACIENTE.DSP_DS_GRAU_INS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS');
		PACIENTE.CD_GRAU_INS:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_GRAU_INS');
		PACIENTE.NR_CEP:= PKG_XML.GetNUMBER(xml, 'PACIENTE.NR_CEP');
		PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
		PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
		PACIENTE.DSP_NR_CPF:= PKG_XML.GetNUMBER(xml, 'PACIENTE.DSP_NR_CPF');
		PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
		PACIENTE.DSP_NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE');
		PACIENTE.NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE');
		PACIENTE.DSP_DS_CIDADANIA:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA');
		PACIENTE.CD_CIDADANIA:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_CIDADANIA');
		PACIENTE.DSP_DS_GRAU_INS:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS');
		PACIENTE.CD_GRAU_INS:= PKG_XML.GetNUMBER(xml, 'PACIENTE.CD_GRAU_INS');
		PACIENTE.NR_CEP:= PKG_XML.GetNUMBER(xml, 'PACIENTE.NR_CEP');
		PACIENTE.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE');
		PACIENTE.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF');
		PACIENTE.DSP_NR_CPF:= PKG_XML.GetNUMBER(xml, 'PACIENTE.DSP_NR_CPF');
		PACIENTE.NR_CPF:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_CPF');
		PACIENTE.DSP_NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE');
		PACIENTE.NR_IDENTIDADE:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE');
		global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
		global.RGOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.RGOLD');
		global.CPFOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CPFOLD');
		global.RGOLD:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.RGOLD');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_PACIENTE_E(xml) THEN
				P_B_PQ_PACIENTE(xml, PACIENTE, global, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_PACIENTE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA', PACIENTE.DSP_DS_CIDADANIA);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADANIA', PACIENTE.CD_CIDADANIA);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS', PACIENTE.DSP_DS_GRAU_INS);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_GRAU_INS', PACIENTE.CD_GRAU_INS);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE', PACIENTE.DSP_NR_IDENTIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE', PACIENTE.NR_IDENTIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_CIDADANIA', PACIENTE.DSP_DS_CIDADANIA);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_CIDADANIA', PACIENTE.CD_CIDADANIA);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_DS_GRAU_INS', PACIENTE.DSP_DS_GRAU_INS);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.CD_GRAU_INS', PACIENTE.CD_GRAU_INS);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.NR_CEP', PACIENTE.NR_CEP);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NM_CIDADE', PACIENTE.DSP_NM_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_CD_UF', PACIENTE.DSP_CD_UF);
		PKG_XML.SetNUMBER(xml, 'PACIENTE.DSP_NR_CPF', PACIENTE.DSP_NR_CPF);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_CPF', PACIENTE.NR_CPF);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.DSP_NR_IDENTIDADE', PACIENTE.DSP_NR_IDENTIDADE);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.NR_IDENTIDADE', PACIENTE.NR_IDENTIDADE);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.RGOLD', global.RGOLD);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CPFOLD', global.CPFOLD);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.RGOLD', global.RGOLD);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.DT_ATENDIMENTO.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_A_DT_ATENDIMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, p_atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
declare
   dDtAtend date;
   dLimite  date := sysdate;
   Paciente_Em_Atendimento exception;
begin
   if FSV_BLOCK_STATUS <> 'QUERY' then
      if P_ATENDIME.DT_ATENDIMENTO > sysdate then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_94)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_94', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Data de Internação não Pode Ser Maior que Data Atual!'),TRUE);
      end if;
      select max(dt_atendimento)
        into dDtAtend
        from ATENDIME
       where CD_PACIENTE      = P_ATENDIME.CD_PACIENTE
         and CD_MULTI_EMPRESA = formParams.P_EMPRESA
         and DT_ALTA          is null
         and TP_ATENDIMENTO   in('S','I','B')
         and CD_CONVENIO      in( select conv.cd_convenio
                                    from convenio conv
                                   where conv.TP_CONVENIO = 'H' );
      if dDtAtend is not null then
         raise Paciente_Em_Atendimento;
      end if;
   end if;
exception
   when NO_DATA_FOUND then
        declare
           dDtAlta Date;
           Atendimento_Menor_Ultima_Alta exception;
        begin
           select max(DT_ALTA)
             into dDtAlta
             from ATENDIME
            where CD_PACIENTE      = P_ATENDIME.CD_PACIENTE
              and CD_MULTI_EMPRESA = formParams.P_EMPRESA
              and DT_ALTA          is not null
              and TP_ATENDIMENTO   in('S','I','B')
              and CD_CONVENIO      in( select conv.cd_convenio
                                         from convenio conv
                                         where conv.TP_CONVENIO = 'H' );
           if dDtAlta > P_ATENDIME.DT_ATENDIMENTO then
              raise Atendimento_Menor_Ultima_Alta;
           end if;
        exception
           when NO_DATA_FOUND then
                Null;
           when Atendimento_Menor_Ultima_Alta then
                --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
                PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                              --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_95)
                              ,pkg_rmi_traducao.extrair_pkg_msg('MSG_95', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Atendimento Anterior a Ultima Alta: %s!', arg_list(to_char(dDtAlta, 'DD/MM/YYYY'))),TRUE);
        end;
   when Paciente_Em_Atendimento then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_96)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_96', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Paciente (%s) em atendimento desde: %s!', arg_list(P_ATENDIME.CD_PACIENTE, to_char(dDtAtend, 'DD/MM/YYYY'))),TRUE);
end;
END P_I_PC_A_DT_ATENDIMENTO;
PROCEDURE P_I_PC_A_DT_ATENDIMENTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
	formParams FormParamsRec;
	FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.DT_ATENDIMENTO:= PKG_XML.GetDATE(xml, 'ATENDIME.DT_ATENDIMENTO');
		ATENDIME.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PACIENTE');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_DT_ATENDIMENTO_E(xml) THEN
				P_I_PC_A_DT_ATENDIMENTO(xml, ATENDIME, formParams, FSV_BLOCK_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_DT_ATENDIMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetDATE(xml, 'ATENDIME.DT_ATENDIMENTO', ATENDIME.DT_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PACIENTE', ATENDIME.CD_PACIENTE);
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.CD_PRESTADOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_A_CD_PRESTADOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec) IS
BEGIN
IF PACK_SUS.PRC_SUS_RET_TAMANHO_CPF_CNPJ(ATENDIME.CD_PRESTADOR) > 11 THEN
  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
  PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_97)
                ,pkg_rmi_traducao.extrair_pkg_msg('MSG_97', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador só permite lançamento de C.P.F. Verifique o cadastro do prestador.'),TRUE);
END IF;
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_CPF_PRESTADOR(xml, ATENDIME.CD_PRESTADOR);
END P_I_WVI_A_CD_PRESTADOR;
PROCEDURE P_I_WVI_A_CD_PRESTADOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_PRESTADOR:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PRESTADOR');
		ATENDIME.CD_PRESTADOR:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PRESTADOR');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_A_CD_PRESTADOR_E(xml) THEN
				P_I_WVI_A_CD_PRESTADOR(xml, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_A_CD_PRESTADOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PRESTADOR', ATENDIME.CD_PRESTADOR);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PRESTADOR', ATENDIME.CD_PRESTADOR);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.CD_LEITO.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_A_CD_LEITO (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, paciente IN OUT NOCOPY PACIENTERec, formParams IN OUT NOCOPY FormParamsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
begin
   if FSV_BLOCK_STATUS <> 'QUERY' then
      ATENDIME.DSP_DS_LEITO      := Null;
      ATENDIME.CD_TIP_ACOM       := Null;
      ATENDIME.DSP_DS_TIP_ACOM   := Null;
      ATENDIME.DSP_DS_ENFERMARIA := Null;
      SELECT leito.ds_leito,
             leito.cd_tip_acom,
             leito.ds_enfermaria,
             tip_acom.ds_tip_acom
        INTO ATENDIME.DSP_DS_LEITO,
             ATENDIME.CD_TIP_ACOM,
             ATENDIME.DSP_DS_ENFERMARIA,
             ATENDIME.DSP_DS_TIP_ACOM
        FROM LEITO,
             unid_int,
             setor,
             tip_acom
       WHERE LEITO.CD_LEITO       = ATENDIME.CD_LEITO
         and leito.tp_situacao    = 'A'
         and leito.tp_ocupacao    = 'V'
         and leito.tp_sexo        in (PACIENTE.TP_SEXO, 'A')
         and unid_int.cd_unid_int = leito.cd_unid_int
         and unid_int.cd_setor    = setor.cd_setor
         and tip_acom.cd_tip_acom = leito.cd_tip_acom
         AND (
				      ( NVL(DBAMV.PKG_SUS_REGRA_SETOR.F_SN_HABILITA_SETOR_EMPRESA, 'N') = 'N' AND setor.cd_multi_empresa = formParams.P_EMPRESA)
					      OR
				      ( NVL(DBAMV.PKG_SUS_REGRA_SETOR.F_SN_HABILITA_SETOR_EMPRESA, 'N') = 'S')
		        	);
   end if;
exception
   when NO_DATA_FOUND then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_98)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_98', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Este Leito não existe ou não é Compativel com Sexo do Paciente.'),TRUE);
end;
END P_I_PC_A_CD_LEITO;
PROCEDURE P_I_PC_A_CD_LEITO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
	paciente PACIENTERec;
	formParams FormParamsRec;
	FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.DSP_DS_LEITO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_LEITO');
		ATENDIME.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM');
		ATENDIME.DSP_DS_TIP_ACOM:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_TIP_ACOM');
		ATENDIME.DSP_DS_ENFERMARIA:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA');
		ATENDIME.CD_LEITO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_LEITO');
		PACIENTE.TP_SEXO:= PKG_XML.GetVARCHAR2(xml, 'PACIENTE.TP_SEXO');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_CD_LEITO_E(xml) THEN
				P_I_PC_A_CD_LEITO(xml, ATENDIME, PACIENTE, formParams, FSV_BLOCK_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_A_CD_LEITO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_LEITO', ATENDIME.DSP_DS_LEITO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM', ATENDIME.CD_TIP_ACOM);
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_TIP_ACOM', ATENDIME.DSP_DS_TIP_ACOM);
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.DSP_DS_ENFERMARIA', ATENDIME.DSP_DS_ENFERMARIA);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_LEITO', ATENDIME.CD_LEITO);
		PKG_XML.SetVARCHAR2(xml, 'PACIENTE.TP_SEXO', PACIENTE.TP_SEXO);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.P_EMPRESA', formParams.P_EMPRESA);
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.PRE-INSERT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PI_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
Begin
  ATENDIME.CD_ORI_ATE       := pkt_config_ffis.retorna_campo('CD_ORI_ATE');
  ATENDIME.CD_CONVENIO      := pkt_config_ffis.retorna_campo('CD_CONVENIO');
  ATENDIME.CD_CON_PLA       := pkt_config_ffis.retorna_campo('CD_CON_PLA');
  ATENDIME.CD_MULTI_EMPRESA := formParams.P_Empresa;
  ATENDIME.NM_USUARIO       := PKG_XML.GetPropVarChar2(xml, 'APPLICATION','USERNAME');
   if ATENDIME.CD_ATENDIMENTO is Null then
      select SEQ_ATENDIME.NEXTVAL
        into ATENDIME.CD_ATENDIMENTO
        from sys.dual;
   end if;
exception
   when NO_DATA_FOUND then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_99)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_99', 'PKG_FFIS_M_LACTO_AIH_P321', 'ERRO INTERNO: Nenhuma linha na tabela SYS.DUAL'),True);
end;
END P_B_PI_ATENDIME;
PROCEDURE P_B_PI_ATENDIME (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_ORI_ATE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ORI_ATE');
		ATENDIME.CD_CONVENIO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CONVENIO');
		ATENDIME.CD_CON_PLA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CON_PLA');
		ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
		ATENDIME.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.NM_USUARIO');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		ATENDIME.CD_ORI_ATE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ORI_ATE');
		ATENDIME.CD_CONVENIO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CONVENIO');
		ATENDIME.CD_CON_PLA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_CON_PLA');
		ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
		ATENDIME.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'ATENDIME.NM_USUARIO');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_ATENDIME_E(xml) THEN
				P_B_PI_ATENDIME(xml, ATENDIME, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_ATENDIME_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ORI_ATE', ATENDIME.CD_ORI_ATE);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CONVENIO', ATENDIME.CD_CONVENIO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CON_PLA', ATENDIME.CD_CON_PLA);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.NM_USUARIO', ATENDIME.NM_USUARIO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ORI_ATE', ATENDIME.CD_ORI_ATE);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CONVENIO', ATENDIME.CD_CONVENIO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_CON_PLA', ATENDIME.CD_CON_PLA);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
		PKG_XML.SetVARCHAR2(xml, 'ATENDIME.NM_USUARIO', ATENDIME.NM_USUARIO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ATENDIME.ON-CHECK-DELETE-MASTER</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_OCDM_ATENDIME (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec) IS
BEGIN
DECLARE
  Dummy_Define CHAR(1);
  --
  -- Begin LOG_FALHA_IMPORTACAO detail declare section
  --
  CURSOR LOG_FALHA_IMPORTACAO_cur IS
    SELECT 1 FROM LOG_FALHA_IMPORTACAO L
    WHERE L.CD_ATENDIMENTO = ATENDIME.CD_ATENDIMENTO;
  --
  -- End LOG_FALHA_IMPORTACAO detail declare section
  --
  --
  -- Begin REG_FAT detail declare section
  --
  CURSOR REG_FAT_cur IS
    SELECT 1 FROM REG_FAT D
    WHERE D.CD_ATENDIMENTO = ATENDIME.CD_ATENDIMENTO and D.CD_MULTI_EMPRESA = ATENDIME.CD_MULTI_EMPRESA;
  --
  -- End REG_FAT detail declare section
  --
  --OP 10813 inicio
  CURSOR RESPONSA_cur IS
    SELECT 1 FROM RESPONSA R
    WHERE R.CD_ATENDIMENTO = ATENDIME.CD_ATENDIMENTO;
  --OP 10813 fim
--
-- End default relation declare section
--
--
-- Begin default relation program section
--
BEGIN
  --
  -- Begin LOG_FALHA_IMPORTACAO detail program section
  --
  OPEN LOG_FALHA_IMPORTACAO_cur;
  FETCH LOG_FALHA_IMPORTACAO_cur INTO Dummy_Define;
  IF ( LOG_FALHA_IMPORTACAO_cur%found ) THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_2)
    PKG_XML_MGS.MESSAGE(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_2', 'PKG_FFIS_M_LACTO_AIH_P321', 'Cannot delete master record when matching detail records exist.'));
    CLOSE LOG_FALHA_IMPORTACAO_cur;
    RAISE Form_Trigger_Failure;
  END IF;
  CLOSE LOG_FALHA_IMPORTACAO_cur;
  --
  -- End LOG_FALHA_IMPORTACAO detail program section
  --
  --
  -- Begin REG_FAT detail program section
  --
  OPEN REG_FAT_cur;
  FETCH REG_FAT_cur INTO Dummy_Define;
  IF ( REG_FAT_cur%found ) THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_2)
    PKG_XML_MGS.MESSAGE(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_2', 'PKG_FFIS_M_LACTO_AIH_P321', 'Cannot delete master record when matching detail records exist.'));
    CLOSE REG_FAT_cur;
    RAISE Form_Trigger_Failure;
  END IF;
  CLOSE REG_FAT_cur;
  --
  -- End REG_FAT detail program section
  --
  --OP 10813 inicio
  OPEN RESPONSA_cur;
  FETCH RESPONSA_cur INTO Dummy_Define;
  IF ( RESPONSA_cur%found ) THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_2)
    PKG_XML_MGS.MESSAGE(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_2', 'PKG_FFIS_M_LACTO_AIH_P321', 'Cannot delete master record when matching detail records exist.'));
    CLOSE RESPONSA_cur;
    RAISE Form_Trigger_Failure;
  END IF;
  CLOSE RESPONSA_cur;
  --OP 10813 fim
END;
END P_B_OCDM_ATENDIME;
PROCEDURE P_B_OCDM_ATENDIME (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		ATENDIME.CD_MULTI_EMPRESA:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_OCDM_ATENDIME_E(xml) THEN
				P_B_OCDM_ATENDIME(xml, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_OCDM_ATENDIME_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_MULTI_EMPRESA', ATENDIME.CD_MULTI_EMPRESA);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_GUIA.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_GUIA (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec) IS
BEGIN
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_NR_GUIA(xml, REG_FAT.CD_REG_FAT,REG_FAT.NR_GUIA);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GUIAS(xml, Atendime.Cd_Atendimento,Reg_Fat.Cd_Reg_Fat,Reg_Fat.Nr_Guia);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GLOSA_TOTAL(xml, REG_FAT.CD_REG_FAT);
END P_I_WVI_RF_NR_GUIA;
PROCEDURE P_I_WVI_RF_NR_GUIA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	atendime ATENDIMERec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_GUIA_E(xml) THEN
				P_I_WVI_RF_NR_GUIA(xml, REG_FAT, ATENDIME);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_GUIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_SEQAIH5.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
declare
     nSeq      number;
begin
   if REG_FAT.NR_SEQAIH5 is not Null  and
      REG_FAT.NR_IDENTIFICACAO <> '5' then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_100)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_100', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Sequencial só poderá ser Informado em Identificação 5.'),TRUE);
   end if;
   select nvl(max(r.NR_SEQAIH5),0)
     into nSeq
     from REG_FAT r
    where r.CD_ATENDIMENTO   = REG_FAT.CD_ATENDIMENTO
        AND r.CD_MULTI_EMPRESA = xml.multiEmpresa
        and r.NR_IDENTIFICACAO = '5'
        and r.nr_guia          = REG_FAT.NR_GUIA
      and r.CD_REG_FAT      <> nvl(REG_FAT.CD_REG_FAT,0);
   if REG_FAT.NR_SEQAIH5 <> (nSeq + 1) then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_101)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_101', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número fora da Sequencia para Identificação 5.'),TRUE);
   end if;
exception
   when NO_DATA_FOUND then
        if REG_FAT.NR_SEQAIH5 <> 1 then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_101)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_101', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Número fora da Sequencia para Identificação 5.'),TRUE);
        end if;
end;
END P_I_WVI_RF_NR_SEQAIH5;
PROCEDURE P_I_WVI_RF_NR_SEQAIH5 (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.NR_SEQAIH5:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_SEQAIH5');
		REG_FAT.NR_IDENTIFICACAO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO');
		REG_FAT.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_SEQAIH5:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_SEQAIH5');
		REG_FAT.NR_IDENTIFICACAO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO');
		REG_FAT.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_SEQAIH5_E(xml) THEN
				P_I_WVI_RF_NR_SEQAIH5(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_SEQAIH5_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_SEQAIH5', REG_FAT.NR_SEQAIH5);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO', REG_FAT.NR_IDENTIFICACAO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO', REG_FAT.CD_ATENDIMENTO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_SEQAIH5', REG_FAT.NR_SEQAIH5);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO', REG_FAT.NR_IDENTIFICACAO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO', REG_FAT.CD_ATENDIMENTO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_AIH_ANTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GUIAS(xml, Atendime.Cd_Atendimento,Reg_Fat.Cd_Reg_Fat,Reg_Fat.Nr_AIH_Anterior);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_NR_AIH(xml, REG_FAT.CD_REG_FAT,REG_FAT.NR_GUIA,'A',REG_FAT.NR_AIH_ANTERIOR,REG_FAT.NR_AIH_POSTERIOR);
END P_I_WVI_RF_NR_AIH_ANTERIOR;
PROCEDURE P_I_WVI_RF_NR_AIH_ANTERIOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_ANTERIOR_E(xml) THEN
				P_I_WVI_RF_NR_AIH_ANTERIOR(xml, ATENDIME, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_ANTERIOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_AIH_POSTERIOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_GUIAS(xml, Atendime.Cd_Atendimento,Reg_Fat.Cd_Reg_Fat,Reg_Fat.Nr_AIH_Posterior);
Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_NR_AIH(xml, REG_FAT.CD_REG_FAT
             ,REG_FAT.NR_GUIA
             ,REG_FAT.NR_AIH_ANTERIOR
             ,REG_FAT.NR_AIH_POSTERIOR
             ,'P');
END P_I_WVI_RF_NR_AIH_POSTERIOR;
PROCEDURE P_I_WVI_RF_NR_AIH_POSTERIOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		ATENDIME.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_POSTERIOR_E(xml) THEN
				P_I_WVI_RF_NR_AIH_POSTERIOR(xml, ATENDIME, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_AIH_POSTERIOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_ATENDIMENTO', ATENDIME.CD_ATENDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.CD_PRESTADOR_AUDITOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
Declare
    Cursor cAuditor Is Select SN_Auditor_SUS
                         From Prestador
                      Where Cd_Prestador = REG_FAT.CD_PRESTADOR_AUDITOR;
  vSn_Auditor_SUS  PRESTADOR.SN_AUDITOR_SUS%TYPE;
Begin
  -- Retorna a DESCRIÇÃO do Prestador Responsável
  -- Saulo
  If REG_FAT.CD_PRESTADOR_AUDITOR Is Not Null Then
    REG_FAT.NM_PRESTADOR_AUDITOR:= M_PKG_AMDC_PRESTADOR.F_RETORNA_DESCRICAO(xml,REG_FAT.CD_PRESTADOR_AUDITOR
                                                                           ,formParams.P_EMPRESA
                                                                           ,xml.usuario
                                                                           ,TRUE
                                                                           ,TRUE);
  End If;
  If global.OBG_MEDAUT = 'S' Then
      IF REG_FAT.CD_PRESTADOR_AUDITOR IS NOT NULL THEN
      Open cAuditor;
        Fetch cAuditor Into vSn_Auditor_SUS;
      Close cAuditor;
      IF vSn_Auditor_SUS = 'N' THEN
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_102)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_102', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Prestador %s não é auditor SUS. Verifique cadastro de prestadores.', arg_list(REG_FAT.CD_PRESTADOR_AUDITOR)),TRUE);
      END IF;
      -- Valida se o Prestador tem CPF e se é pessoa Física
      Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_CPF_PRESTADOR(xml, REG_FAT.CD_PRESTADOR_AUDITOR);
    ELSE
        REG_FAT.NM_PRESTADOR_AUDITOR := '';
        REG_FAT.DT_AUT_HOMONIMO := '';
    END IF;
    Pkg_ffis_M_LACTO_AIH_P321.P_HABILITA_DT_AUT_HOMONIMO(xml, REG_FAT);
  End If;
End;
END P_I_WVI_RF_CD_PRESTADOR_AUD;
PROCEDURE P_I_WVI_RF_CD_PRESTADOR_AUD (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	global GlobalsRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.DT_AUT_HOMONIMO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO');
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.DT_AUT_HOMONIMO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO');
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
		global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_CD_PRESTADOR_AUD_E(xml) THEN
				P_I_WVI_RF_CD_PRESTADOR_AUD(xml, REG_FAT, global, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_CD_PRESTADOR_AUD_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO', REG_FAT.DT_AUT_HOMONIMO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_AUT_HOMONIMO', REG_FAT.DT_AUT_HOMONIMO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.NR_LAUDO_ACH.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
declare
  vNrLaudoAch     varchar2(15);  -- Número do laudo convertido para caracter
  vDvLaudoAch     varchar2(1);   -- dígito verificador do laudo, validado
begin
    if reg_fat.nr_laudo_ach is not null then
    if length(reg_fat.nr_laudo_ach) = 13 then
          -- validação do Número do laudo de acordo com o dígito verificador
          vNrLaudoAch := to_char(reg_fat.nr_laudo_ach);
          vDvLaudoAch := pack_sus.fnc_retorna_dv_laudo_ach( substr(reg_fat.nr_laudo_ach, 1, length(reg_fat.nr_laudo_ach)-1), 1 );
          if vDvLaudoAch is null then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_103)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_103', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Erro na validação do dígito verificador do laudo ACH'),true);
          elsif substr(vNrLaudoAch,-1,1) <> vDvLaudoAch then
        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
        PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_104)
                      ,pkg_rmi_traducao.extrair_pkg_msg('MSG_104', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Número do laudo ACH inválido.'),true);
          end if;
        else
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_105)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_105', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: Número do laudo ACH deve conter 13 dígitos.'),true);
      end if;
     end if;
end;
END P_I_WVI_RF_NR_LAUDO_ACH;
PROCEDURE P_I_WVI_RF_NR_LAUDO_ACH (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.NR_LAUDO_ACH:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH');
		REG_FAT.NR_LAUDO_ACH:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_LAUDO_ACH_E(xml) THEN
				P_I_WVI_RF_NR_LAUDO_ACH(xml, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_RF_NR_LAUDO_ACH_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH', REG_FAT.NR_LAUDO_ACH);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_LAUDO_ACH', REG_FAT.NR_LAUDO_ACH);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.PRE-INSERT</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PI_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, atendime IN OUT NOCOPY ATENDIMERec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
declare
   -- Captura o Número da guia para contas de Internação de mutirão
   cursor cSequenceNrGuia is
     select seq_reg_fat_nr_guia.nextval
       from sys.dual;
   nNrGuia number;
   vMens varchar2(500);
begin
  If global.OBG_MEDAUT = 'S' then
    Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_PRESTADOR_AUDITOR(xml, REG_FAT);
  Else
      If global.vObrigaGestor = 'N' then
        REG_FAT.CD_PRESTADOR_AUDITOR := Null;
        REG_FAT.NM_PRESTADOR_AUDITOR := Null;
      End if;
  End if;
   select SEQ_REG_FAT.NEXTVAL
     into REG_FAT.CD_REG_FAT
     from sys.dual;
   REG_FAT.CD_TIP_ACOM := ATENDIME.CD_TIP_ACOM;
   REG_FAT.CD_CON_PLA :=  pkt_config_ffis.retorna_campo('CD_CON_PLA');
   REG_FAT.CD_CONVENIO :=  pkt_config_ffis.retorna_campo('CD_CONVENIO');
   ------------------------------------------------------
   Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_PONTO_PROFISSIONAL(xml, REG_FAT);
   if REG_FAT.DT_EMISSAO_LAUDO is null then
      REG_FAT.DT_EMISSAO_LAUDO := REG_FAT.DT_INICIO;
   end if;
   REG_FAT.NM_USUARIO           := PKG_XML.GetPropVarChar2(xml, 'APPLICATION','USERNAME');
   REG_FAT.CD_REGRA             := global.CD_REGRA;
   CG$CTRL.CD_SETOR_REA_ANT     := Null;
   CG$CTRL.CD_PRESTADOR_REA_ANT := Null;
   -- PDA 155918(início) - Retorna o Número da guia automática para contas de Internação
   --                      cuja remessa seja de mutirão.
   if pack_sus.fnc_retorna_remessa_mutirao( pnCdMultiEmpresa => xml.multiEmpresa
                                                    ,pnCdRemessa      => reg_fat.cd_remessa         ) = 'S' then
       open cSequenceNrGuia;
         fetch cSequenceNrGuia into nNrGuia;
         if cSequenceNrGuia%notfound then
              close cSequenceNrGuia;
              raise no_data_found;
         end if;
       close cSequenceNrGuia;
       reg_fat.nr_guia := to_char(nNrGuia);
   end if;
exception
   when NO_DATA_FOUND then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_106)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_106', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro Interno: Nenhuma linha na tabela SYS.DUAL'),TRUE);
   when others then
     RAISE;
end;
if not Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_REMESSA_OBRIGATORIA(xml, REG_FAT, formParams) then
   raise form_trigger_failure;
end if;
reg_fat.cd_pro_fat_realizado:= 'X0000000';
reg_fat.cd_pro_fat_solicitado:= 'X0000000';
END P_B_PI_REG_FAT;
PROCEDURE P_B_PI_REG_FAT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	atendime ATENDIMERec;
	cg$ctrl CG$CTRLRec;
	global GlobalsRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM');
		ATENDIME.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM');
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM');
		REG_FAT.DT_EMISSAO_LAUDO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO');
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_USUARIO');
		REG_FAT.CD_REGRA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REGRA');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.CD_PRO_FAT_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO');
		REG_FAT.CD_PRO_FAT_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO');
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.CD_TIP_ACOM:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM');
		REG_FAT.DT_EMISSAO_LAUDO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO');
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.NM_USUARIO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_USUARIO');
		REG_FAT.CD_REGRA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REGRA');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.CD_PRO_FAT_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO');
		REG_FAT.CD_PRO_FAT_SOLICITADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO');
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.CD_PRESTADOR_RESPONSAVEL:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
		REG_FAT.CD_MOT_ALT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_MOT_ALT');
		REG_FAT.CD_CON_PLA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_CON_PLA');
		REG_FAT.CD_CONVENIO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_CONVENIO');
		CG$CTRL.CD_SETOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT');
		CG$CTRL.CD_PRESTADOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT');
		CG$CTRL.CD_SETOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT');
		CG$CTRL.CD_PRESTADOR_REA_ANT:= PKG_XML.GetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT');
		global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
		global.VOBRIGAGESTOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR');
		global.CD_REGRA:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CD_REGRA');
		global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
		global.VOBRIGAGESTOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR');
		global.CD_REGRA:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.CD_REGRA');
		formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_REG_FAT_E(xml) THEN
				P_B_PI_REG_FAT(xml, REG_FAT, ATENDIME, CG$CTRL, global, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PI_REG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM', ATENDIME.CD_TIP_ACOM);
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_TIP_ACOM', ATENDIME.CD_TIP_ACOM);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM', REG_FAT.CD_TIP_ACOM);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO', REG_FAT.DT_EMISSAO_LAUDO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_USUARIO', REG_FAT.NM_USUARIO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REGRA', REG_FAT.CD_REGRA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO', REG_FAT.CD_PRO_FAT_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO', REG_FAT.CD_PRO_FAT_SOLICITADO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_TIP_ACOM', REG_FAT.CD_TIP_ACOM);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_CON_PLA', REG_FAT.CD_CON_PLA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_CONVENIO', REG_FAT.CD_CONVENIO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO', REG_FAT.DT_EMISSAO_LAUDO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_USUARIO', REG_FAT.NM_USUARIO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REGRA', REG_FAT.CD_REGRA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_REALIZADO', REG_FAT.CD_PRO_FAT_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PRO_FAT_SOLICITADO', REG_FAT.CD_PRO_FAT_SOLICITADO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL', REG_FAT.CD_PRESTADOR_RESPONSAVEL);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL', REG_FAT.NM_PRESTADOR_RESPONSAVEL);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_MOT_ALT', REG_FAT.CD_MOT_ALT);
		PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT', CG$CTRL.CD_SETOR_REA_ANT);
		PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT', CG$CTRL.CD_PRESTADOR_REA_ANT);
		PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_SETOR_REA_ANT', CG$CTRL.CD_SETOR_REA_ANT);
		PKG_XML.SetNUMBER(xml, 'CG$CTRL.CD_PRESTADOR_REA_ANT', CG$CTRL.CD_PRESTADOR_REA_ANT);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR', global.VOBRIGAGESTOR);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CD_REGRA', global.CD_REGRA);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR', global.VOBRIGAGESTOR);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.CD_REGRA', global.CD_REGRA);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>REG_FAT.PRE-UPDATE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PU_REG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, cg$ctrl IN OUT NOCOPY CG$CTRLRec, global IN OUT NOCOPY GlobalsRec, formParams IN OUT NOCOPY FormParamsRec, FSV_FORM_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
declare
   -- Captura o Número da guia para contas de Internação de mutirão
   cursor cSequenceNrGuia is
     select seq_reg_fat_nr_guia.nextval
       from sys.dual;
   nNrGuia    number;
   eSeqNrGuia exception;
   nEsp       number;
   vMens      varchar2(500);
begin
  If global.OBG_MEDAUT = 'S' then
    Pkg_ffis_M_LACTO_AIH_P321.P_DEFINE_PRESTADOR_AUDITOR(xml, REG_FAT);
  Else
      If global.vObrigaGestor = 'N' then
        REG_FAT.CD_PRESTADOR_AUDITOR := Null;
        REG_FAT.NM_PRESTADOR_AUDITOR := Null;
      End if;
  End if;
   ----------------- Validacao Guia ---------------------
    IF FSV_Form_Status = 'QUERY' then
     PRC_FFIS_VALIDA_GUIA (formParams.P_EMPRESA,
                                REG_FAT.CD_ATENDIMENTO,
                                REG_FAT.CD_REG_FAT,
                                REG_FAT.NR_GUIA,
                                REG_FAT.NR_AIH_ANTERIOR,
                                REG_FAT.NR_AIH_POSTERIOR,
                                REG_FAT.NR_IDENTIFICACAO,
                                REG_FAT.CD_SUS_REALIZADO,
                                REG_FAT.CD_ESPEC_SUS,
                                false,
                                vMens);
      if  vMens is not null then
         --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
         PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                       --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_56)
                       ,pkg_rmi_traducao.extrair_pkg_msg('MSG_56', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s', arg_list(vMens)),TRUE);
      end if;
    end if;
   ------------------------------------------------------------------------------------------------
   -- Valida o lançamento de diária de acompanhante
   Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_DIA_ACOMPANHANTE(xml, REG_FAT.CD_REG_FAT,REG_FAT.NR_DIARIA_ACOMPANHANTE, CG$CTRL, REG_FAT);
   Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_PONTO_PROFISSIONAL(xml, REG_FAT);
   if REG_FAT.DT_EMISSAO_LAUDO is null then
      REG_FAT.DT_EMISSAO_LAUDO := REG_FAT.DT_INICIO;
   end if;
   -- PDA 155918(início) - Retorna o Número da guia automática para contas de Internação
   --                      cuja remessa seja de mutirão.
   if pack_sus.fnc_retorna_remessa_mutirao( pnCdMultiEmpresa => xml.multiEmpresa
                                                    ,pnCdRemessa      => reg_fat.cd_remessa         ) = 'S' and
         reg_fat.nr_guia is null                                                                            then
       open cSequenceNrGuia;
         fetch cSequenceNrGuia into nNrGuia;
         if cSequenceNrGuia%notfound then
              close cSequenceNrGuia;
              raise eSeqNrGuia;
         end if;
       close cSequenceNrGuia;
       reg_fat.nr_guia := to_char(nNrGuia);
   end if;
exception
   when NO_DATA_FOUND then
        Null;
   when eSeqNrGuia then
     --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
     PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                   --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_106)
                   ,pkg_rmi_traducao.extrair_pkg_msg('MSG_106', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro Interno: Nenhuma linha na tabela SYS.DUAL'),TRUE);
   when others then
     RAISE;
end;
if not Pkg_ffis_M_LACTO_AIH_P321.F_DEFINE_REMESSA_OBRIGATORIA(xml, REG_FAT, formParams) then
   raise form_trigger_failure;
end if;
END P_B_PU_REG_FAT;
PROCEDURE P_B_PU_REG_FAT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	cg$ctrl CG$CTRLRec;
	global GlobalsRec;
	formParams FormParamsRec;
	FSV_FORM_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_PRESTADOR_AUDITOR:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR');
		REG_FAT.NM_PRESTADOR_AUDITOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR');
		REG_FAT.CD_ATENDIMENTO:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO');
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		REG_FAT.NR_GUIA:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_GUIA');
		REG_FAT.NR_AIH_ANTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR');
		REG_FAT.NR_AIH_POSTERIOR:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR');
		REG_FAT.NR_IDENTIFICACAO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO');
		REG_FAT.CD_SUS_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_SUS_REALIZADO');
		REG_FAT.CD_ESPEC_SUS:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS');
		REG_FAT.NR_DIARIA_ACOMPANHANTE:= PKG_XML.GetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE');
		REG_FAT.DT_EMISSAO_LAUDO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO');
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.CD_REMESSA:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REMESSA');
		REG_FAT.CD_PRESTADOR_RESPONSAVEL:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL');
		REG_FAT.NM_PRESTADOR_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL');
		REG_FAT.CD_PROCEDIMENTO_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO');
		REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
		REG_FAT.CD_MOT_ALT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_MOT_ALT');
		CG$CTRL.GO_ACOMPANHANTE:= PKG_XML.GetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE');
		global.OBG_MEDAUT:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT');
		global.VOBRIGAGESTOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.SN_REMESSA_OBRIGATORIA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA');
		FSV_FORM_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_FORM_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PU_REG_FAT_E(xml) THEN
				P_B_PU_REG_FAT(xml, REG_FAT, CG$CTRL, global, formParams, FSV_FORM_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PU_REG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_AUDITOR', REG_FAT.CD_PRESTADOR_AUDITOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_AUDITOR', REG_FAT.NM_PRESTADOR_AUDITOR);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_ATENDIMENTO', REG_FAT.CD_ATENDIMENTO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_GUIA', REG_FAT.NR_GUIA);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_ANTERIOR', REG_FAT.NR_AIH_ANTERIOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_AIH_POSTERIOR', REG_FAT.NR_AIH_POSTERIOR);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_IDENTIFICACAO', REG_FAT.NR_IDENTIFICACAO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_SUS_REALIZADO', REG_FAT.CD_SUS_REALIZADO);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_ESPEC_SUS', REG_FAT.CD_ESPEC_SUS);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.NR_DIARIA_ACOMPANHANTE', REG_FAT.NR_DIARIA_ACOMPANHANTE);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_EMISSAO_LAUDO', REG_FAT.DT_EMISSAO_LAUDO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REMESSA', REG_FAT.CD_REMESSA);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_PRESTADOR_RESPONSAVEL', REG_FAT.CD_PRESTADOR_RESPONSAVEL);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NM_PRESTADOR_RESPONSAVEL', REG_FAT.NM_PRESTADOR_RESPONSAVEL);
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.CD_PROCEDIMENTO_REALIZADO', REG_FAT.CD_PROCEDIMENTO_REALIZADO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_MOT_ALT', REG_FAT.CD_MOT_ALT);
    PKG_XML.SetVARCHAR2(xml, 'CG$CTRL.GO_ACOMPANHANTE', CG$CTRL.GO_ACOMPANHANTE);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.OBG_MEDAUT', global.OBG_MEDAUT);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VOBRIGAGESTOR', global.VOBRIGAGESTOR);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.P_EMPRESA', formParams.P_EMPRESA);
    PKG_XML.SetVARCHAR2(xml, 'PARAMETER.SN_REMESSA_OBRIGATORIA', formParams.SN_REMESSA_OBRIGATORIA);
		PKG_XML.SetVARCHAR2(xml, 'FSV_FORM_STATUS', FSV_FORM_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.QT_LANCAMENTO.MUDOU_SETOR</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_M_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, reg_fat IN OUT NOCOPY REG_FATRec, itreg_fat IN OUT NOCOPY ITREG_FATRec, global IN OUT NOCOPY GlobalsRec, FSV_BLOCK_STATUS IN OUT NOCOPY varchar2) IS
BEGIN
declare
  Cursor cSetor Is Select DISTINCT Cd_Setor
                     From ItReg_Fat
                    Where SN_Proced_Realizado = 'S'
                      And Cd_Reg_Fat          = Reg_fat.Cd_Reg_Fat;
   nSetor number;
begin
   -------- Se nao foi digitado Setor Joga o do Procedimento Realizado ---------
   If ItReg_Fat.Cd_Setor Is Null And ItReg_Fat.SN_Proced_Realizado = 'N' Then
     Open cSetor;
       Fetch cSetor Into nSetor;
     Close cSetor;
     if nSetor is not null then
       ITREG_FAT.CD_SETOR          := nSetor;
       ITREG_FAT.CD_SETOR_PRODUZIU := nSetor;
     End If;
   End If;
   ------------------------------------------------------------------------------
   if FSV_BLOCK_STATUS <> 'QUERY' then
      global.vCSetor := 'S';
   end if;
end;
END P_I_M_IF_QT_LANCAMENTO;
PROCEDURE P_I_M_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	reg_fat REG_FATRec;
	itreg_fat ITREG_FATRec;
	global GlobalsRec;
	FSV_BLOCK_STATUS VARCHAR2(4000);
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'REG_FAT.CD_REG_FAT');
		ITREG_FAT.CD_SETOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR');
		ITREG_FAT.SN_PROCED_REALIZADO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.SN_PROCED_REALIZADO');
		ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
		global.VCSETOR:= PKG_XML.GetVARCHAR2(xml, 'GLOBAL.VCSETOR');
		FSV_BLOCK_STATUS:= PKG_XML.GetVARCHAR2(xml, 'FSV_BLOCK_STATUS');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_M_IF_QT_LANCAMENTO_E(xml) THEN
				P_I_M_IF_QT_LANCAMENTO(xml, REG_FAT, ITREG_FAT, global, FSV_BLOCK_STATUS);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_M_IF_QT_LANCAMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'REG_FAT.CD_REG_FAT', REG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR', ITREG_FAT.CD_SETOR);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.SN_PROCED_REALIZADO', ITREG_FAT.SN_PROCED_REALIZADO);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
		PKG_XML.SetVARCHAR2(xml, 'GLOBAL.VCSETOR', global.VCSETOR);
		PKG_XML.SetVARCHAR2(xml, 'FSV_BLOCK_STATUS', FSV_BLOCK_STATUS);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.QT_LANCAMENTO.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
BEGIN
Declare
    Cursor cRCivil Is Select SN_Registro_Civil
                        From Procedimento_SUS_Detalhe
                       Where Cd_Procedimento = ItReg_Fat.Cd_Procedimento;
  vSN_Reg_Civil Varchar2(1);
Begin
  Open cRCivil;
    Fetch cRCivil Into vSN_Reg_Civil;
  Close cRCivil;
  IF vSN_Reg_Civil = 'S' AND ITREG_FAT.QT_LANCAMENTO > 1 THEN
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_107)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_107', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção: A quantidade será atualizada após preenchimentos dos dados do Registro Civil.'),true);
  END IF;
End;
END P_I_WVI_IF_QT_LANCAMENTO;
PROCEDURE P_I_WVI_IF_QT_LANCAMENTO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itreg_fat ITREG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		ITREG_FAT.QT_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO');
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		ITREG_FAT.QT_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_QT_LANCAMENTO_E(xml) THEN
				P_I_WVI_IF_QT_LANCAMENTO(xml, ITREG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_QT_LANCAMENTO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO', ITREG_FAT.QT_LANCAMENTO);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO', ITREG_FAT.QT_LANCAMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.CD_SETOR.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_IF_CD_SETOR (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
ITREG_FAT.DSP_NM_SETOR:= M_PKG_GLOBAL_SETOR.F_RETORNA_DESCRICAO(xml,ITREG_FAT.CD_SETOR
                                                                  ,formParams.P_EMPRESA
                                                                  ,xml.usuario
                                                                  ,TRUE
                                                                  ,TRUE);
  Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_SETOR(xml, formParams.P_EMPRESA,ITREG_FAT.CD_SETOR);
  ITREG_FAT.CD_SETOR_PRODUZIU := ITREG_FAT.CD_SETOR;
  ITREG_FAT.TP_MVTO           := 'FATURAMENTO';
END P_I_WVI_IF_CD_SETOR;
PROCEDURE P_I_WVI_IF_CD_SETOR (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itreg_fat ITREG_FATRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ITREG_FAT.DSP_NM_SETOR:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR');
		ITREG_FAT.CD_SETOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR');
		ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
		ITREG_FAT.TP_MVTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO');
		ITREG_FAT.DSP_NM_SETOR:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR');
		ITREG_FAT.CD_SETOR:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR');
		ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
		ITREG_FAT.TP_MVTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_E(xml) THEN
				P_I_WVI_IF_CD_SETOR(xml, ITREG_FAT, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR', ITREG_FAT.DSP_NM_SETOR);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR', ITREG_FAT.CD_SETOR);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO', ITREG_FAT.TP_MVTO);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DSP_NM_SETOR', ITREG_FAT.DSP_NM_SETOR);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR', ITREG_FAT.CD_SETOR);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.TP_MVTO', ITREG_FAT.TP_MVTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.CD_SETOR_PRODUZIU.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, formParams IN OUT NOCOPY FormParamsRec) IS
BEGIN
ITREG_FAT.DS_SETOR_PRODUZIU:= M_PKG_GLOBAL_SETOR.F_RETORNA_DESCRICAO(xml,ITREG_FAT.CD_SETOR_PRODUZIU
                                                                       ,formParams.P_EMPRESA
                                                                       ,xml.usuario
                                                                       ,TRUE
                                                                       ,TRUE);
  Pkg_ffis_M_LACTO_AIH_P321.P_VALIDA_SETOR(xml, formParams.P_EMPRESA,ITREG_FAT.CD_SETOR_PRODUZIU);
END P_I_WVI_IF_CD_SETOR_PRODUZIU;
PROCEDURE P_I_WVI_IF_CD_SETOR_PRODUZIU (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itreg_fat ITREG_FATRec;
	formParams FormParamsRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ITREG_FAT.DS_SETOR_PRODUZIU:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU');
		ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
		ITREG_FAT.DS_SETOR_PRODUZIU:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU');
		ITREG_FAT.CD_SETOR_PRODUZIU:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		formParams.P_EMPRESA:= PKG_XML.GetVARCHAR2(xml, 'PARAMETER.P_EMPRESA');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_PRODUZIU_E(xml) THEN
				P_I_WVI_IF_CD_SETOR_PRODUZIU(xml, ITREG_FAT, formParams);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_IF_CD_SETOR_PRODUZIU_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU', ITREG_FAT.DS_SETOR_PRODUZIU);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DS_SETOR_PRODUZIU', ITREG_FAT.DS_SETOR_PRODUZIU);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_SETOR_PRODUZIU', ITREG_FAT.CD_SETOR_PRODUZIU);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITREG_FAT.PRE-DELETE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PD_ITREG_FAT (xml IN OUT NOCOPY PKG_XML.XmlContext, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
BEGIN
   DELETE FROM ITLAN_MED
         WHERE CD_REG_FAT    = ITREG_FAT.CD_REG_FAT
           and CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
   DELETE FROM ITCOB_PRE
         WHERE CD_REG_FAT    = ITREG_FAT.CD_REG_FAT
           and CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
   --------------- Se Excluir Item Pre-Natal, Remove Nr.Ficha -------------------
   if ITREG_FAT.CD_PROCEDIMENTO = '0801010039' then
      REG_FAT.NR_PRE_NATAL := Null;
   end if;
   ------------------------------------------------------------------------------
END;--
-- Begin default relation program section
--
BEGIN
  --
  -- Begin REGISTRO_CIVIL detail program section
  --
   DELETE FROM REGISTRO_CIVIL D
   WHERE D.CD_REG_FAT = ITREG_FAT.CD_REG_FAT and D.CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
  --
  -- End REGISTRO_CIVIL detail program section
  --
  --
  -- Begin SUS_UTI detail program section
  --
   DELETE FROM diaria_uti_sus d
   WHERE d.CD_REG_FAT = ITREG_FAT.CD_REG_FAT and d.CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
  --
  -- End SUS_UTI detail program section
  --
  --
  -- Begin DIARIA_UTI_SUS detail program section
  --
   DELETE FROM Diaria_UTI_SUS D
   WHERE D.CD_REG_FAT = ITREG_FAT.CD_REG_FAT and D.CD_LANCAMENTO = ITREG_FAT.CD_LANCAMENTO;
  --
  -- End DIARIA_UTI_SUS detail program section
  --
END;
END P_B_PD_ITREG_FAT;
PROCEDURE P_B_PD_ITREG_FAT (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itreg_fat ITREG_FATRec;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.NR_PRE_NATAL:= PKG_XML.GetVARCHAR2(xml, 'REG_FAT.NR_PRE_NATAL');
		ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
		ITREG_FAT.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO');
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PD_ITREG_FAT_E(xml) THEN
				P_B_PD_ITREG_FAT(xml, ITREG_FAT, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PD_ITREG_FAT_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'REG_FAT.NR_PRE_NATAL', REG_FAT.NR_PRE_NATAL);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO', ITREG_FAT.CD_LANCAMENTO);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>ITCOB_PRE.VL_PRECO_UNITARIO.KEY-NEXT-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (xml IN OUT NOCOPY PKG_XML.XmlContext, itcob_pre IN OUT NOCOPY ITCOB_PRERec, itreg_fat IN OUT NOCOPY ITREG_FATRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Begin
  -- Retorna o valor unitário da protese.
  -- PDA 533434 Inicio
  /* ITCOB_PRE.VL_PRECO_UNITARIO:= PACK_SUS.FNC_SUS_MAX_VALOR_SH(ITREG_FAT.CD_PROCEDIMENTO
                                                                     ,NVL(REG_FAT.DSP_DT_COMPETENCIA
                                                                         ,REG_FAT.DT_INICIO)); */
  ITCOB_PRE.VL_PRECO_UNITARIO:= DBAMV.PKG_FFIS_CALC_AIH.FNC_SUS_MAX_VALOR_SH(ITREG_FAT.CD_PROCEDIMENTO
                                                                     ,NVL(REG_FAT.DSP_DT_COMPETENCIA
                                                                     ,REG_FAT.DT_INICIO));
  -- PDA 533434 Fim
/* Retirada da validação PDA 462264
  If Nvl(ITCOB_PRE.VL_PRECO_UNITARIO,0) = 0 Then
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, 'Atenção:'
                  ,'Erro: Protese não possui valor.',TRUE);
  End If;
*/
  ITCOB_PRE.VL_PRECO_TOTAL := ITCOB_PRE.VL_PRECO_UNITARIO * NVL(ITREG_FAT.QT_LANCAMENTO, 1);
End;
END P_I_KNI_IP_VL_PRECO_UNITARIO;
PROCEDURE P_I_KNI_IP_VL_PRECO_UNITARIO (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	itcob_pre ITCOB_PRERec;
	itreg_fat ITREG_FATRec;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.DSP_DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA');
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		ITCOB_PRE.VL_PRECO_UNITARIO:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_UNITARIO');
		ITCOB_PRE.VL_PRECO_TOTAL:= PKG_XML.GetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_TOTAL');
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		ITREG_FAT.QT_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_KNI_IP_VL_PRECO_UNITARIO_E(xml) THEN
				P_I_KNI_IP_VL_PRECO_UNITARIO(xml, ITCOB_PRE, ITREG_FAT, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_KNI_IP_VL_PRECO_UNITARIO_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA', REG_FAT.DSP_DT_COMPETENCIA);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_UNITARIO', ITCOB_PRE.VL_PRECO_UNITARIO);
		PKG_XML.SetNUMBER(xml, 'ITCOB_PRE.VL_PRECO_TOTAL', ITCOB_PRE.VL_PRECO_TOTAL);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.QT_LANCAMENTO', ITREG_FAT.QT_LANCAMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>RESPONSA.DS_NACIONALIDADE.WHEN-VALIDATE-ITEM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (xml IN OUT NOCOPY PKG_XML.XmlContext, responsa IN OUT NOCOPY RESPONSARec) IS
BEGIN
Declare
    nAchou Number;
Begin
      Select COUNT(*)
        Into nAchou
        From CIDADANIAS
       Where DS_CIDADANIA = RESPONSA.DS_NACIONALIDADE;
  If nAchou = 0 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_108)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_108', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Cidadania não cadastrada.'),TRUE);
  End If;
End;
END P_I_WVI_R_DS_NACIONALIDADE;
PROCEDURE P_I_WVI_R_DS_NACIONALIDADE (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	responsa RESPONSARec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		RESPONSA.DS_NACIONALIDADE:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DS_NACIONALIDADE');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_R_DS_NACIONALIDADE_E(xml) THEN
				P_I_WVI_R_DS_NACIONALIDADE(xml, RESPONSA);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_WVI_R_DS_NACIONALIDADE_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DS_NACIONALIDADE', RESPONSA.DS_NACIONALIDADE);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>RESPONSA.WHEN-NEW-BLOCK-INSTANCE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_WNBI_RESPONSA (xml IN OUT NOCOPY PKG_XML.XmlContext, atendime IN OUT NOCOPY ATENDIMERec, responsa IN OUT NOCOPY RESPONSARec) IS
BEGIN
Declare
    Cursor cResponsa Is select paci.DS_ENDERECO,
                             paci.DS_COMPLEMENTO,
                             paci.NR_ENDERECO,
                             paci.NM_BAIRRO,
                             paci.CD_CIDADE,
                             cida.NM_CIDADE,
                             cida.CD_UF
                        from PACIENTE paci,
                             CIDADE cida
                       where paci.CD_CIDADE   = cida.CD_CIDADE
                         and paci.CD_PACIENTE = ATENDIME.CD_PACIENTE;
begin
   if RESPONSA.NM_RESPONSAVEL is Null then
     Open cResponsa;
       Fetch cResponsa into RESPONSA.DS_ENDERECO,
                            RESPONSA.DS_COMPLEMENTO,
                            RESPONSA.NR_ENDERECO,
                            RESPONSA.NM_BAIRRO,
                            RESPONSA.CD_CIDADE,
                            RESPONSA.DSP_NM_CIDADE,
                            RESPONSA.DSP_CD_UF;
     Close cResponsa;
   end if;
end;
END P_B_WNBI_RESPONSA;
PROCEDURE P_B_WNBI_RESPONSA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	atendime ATENDIMERec;
	responsa RESPONSARec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ATENDIME.CD_PACIENTE:= PKG_XML.GetNUMBER(xml, 'ATENDIME.CD_PACIENTE');
		RESPONSA.NM_RESPONSAVEL:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.NM_RESPONSAVEL');
		RESPONSA.DS_ENDERECO:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DS_ENDERECO');
		RESPONSA.DS_COMPLEMENTO:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DS_COMPLEMENTO');
		RESPONSA.NR_ENDERECO:= PKG_XML.GetNUMBER(xml, 'RESPONSA.NR_ENDERECO');
		RESPONSA.NM_BAIRRO:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.NM_BAIRRO');
		RESPONSA.CD_CIDADE:= PKG_XML.GetNUMBER(xml, 'RESPONSA.CD_CIDADE');
		RESPONSA.DSP_NM_CIDADE:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DSP_NM_CIDADE');
		RESPONSA.DSP_CD_UF:= PKG_XML.GetVARCHAR2(xml, 'RESPONSA.DSP_CD_UF');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_WNBI_RESPONSA_E(xml) THEN
				P_B_WNBI_RESPONSA(xml, ATENDIME, RESPONSA);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_WNBI_RESPONSA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ATENDIME.CD_PACIENTE', ATENDIME.CD_PACIENTE);
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.NM_RESPONSAVEL', RESPONSA.NM_RESPONSAVEL);
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DS_ENDERECO', RESPONSA.DS_ENDERECO);
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DS_COMPLEMENTO', RESPONSA.DS_COMPLEMENTO);
		PKG_XML.SetNUMBER(xml, 'RESPONSA.NR_ENDERECO', RESPONSA.NR_ENDERECO);
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.NM_BAIRRO', RESPONSA.NM_BAIRRO);
		PKG_XML.SetNUMBER(xml, 'RESPONSA.CD_CIDADE', RESPONSA.CD_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DSP_NM_CIDADE', RESPONSA.DSP_NM_CIDADE);
		PKG_XML.SetVARCHAR2(xml, 'RESPONSA.DSP_CD_UF', RESPONSA.DSP_CD_UF);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DIARIA_UTI_SUS.DT_COMPETENCIA.POST-CHANGE</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, reg_fat IN OUT NOCOPY REG_FATRec) IS
BEGIN
Declare
    nAchou Number;
Begin
  If Trunc(Diaria_UTI_SUS.Dt_Competencia,'MM')
      Not BetWeen Trunc(Reg_Fat.Dt_Inicio,'MM')
      And Trunc(Nvl(Nvl(Reg_Fat.Dt_Final,Last_Day(Reg_Fat.Dsp_Dt_Competencia)),Sysdate),'MM') Then
      --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
      PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_109)
                    ,pkg_rmi_traducao.extrair_pkg_msg('MSG_109', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: Competência informada de UTI não compreende o período da conta.'),true);
  End If;
  Select Count(*)
    Into nAchou
    From Diaria_UTI_SUS d
   Where d.Cd_Reg_Fat                 = Diaria_UTI_SUS.Cd_Reg_Fat
     And d.Cd_Lancamento              = Diaria_UTI_SUS.Cd_Lancamento
     And Trunc(d.Dt_Competencia,'MM') = Trunc(Diaria_UTI_SUS.Dt_Competencia,'MM');
  If nAchou > 1 Then
    --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
    PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                  --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_110)
                  ,pkg_rmi_traducao.extrair_pkg_msg('MSG_110', 'PKG_FFIS_M_LACTO_AIH_P321', 'Erro: %s Competência já informada, verifique.', arg_list(nAchou)),true);
  End If;
End;
END P_I_PC_DUS_DT_COMPETENCIA;
PROCEDURE P_I_PC_DUS_DT_COMPETENCIA (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	diaria_uti_sus DIARIA_UTI_SUSRec;
	reg_fat REG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		REG_FAT.DT_INICIO:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_INICIO');
		REG_FAT.DT_FINAL:= PKG_XML.GetDATE(xml, 'REG_FAT.DT_FINAL');
		REG_FAT.DSP_DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA');
		DIARIA_UTI_SUS.DT_COMPETENCIA:= PKG_XML.GetDATE(xml, 'DIARIA_UTI_SUS.DT_COMPETENCIA');
		DIARIA_UTI_SUS.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'DIARIA_UTI_SUS.CD_REG_FAT');
		DIARIA_UTI_SUS.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'DIARIA_UTI_SUS.CD_LANCAMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_DUS_DT_COMPETENCIA_E(xml) THEN
				P_I_PC_DUS_DT_COMPETENCIA(xml, DIARIA_UTI_SUS, REG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_I_PC_DUS_DT_COMPETENCIA_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_INICIO', REG_FAT.DT_INICIO);
		PKG_XML.SetDATE(xml, 'REG_FAT.DT_FINAL', REG_FAT.DT_FINAL);
		PKG_XML.SetDATE(xml, 'REG_FAT.DSP_DT_COMPETENCIA', REG_FAT.DSP_DT_COMPETENCIA);
		PKG_XML.SetDATE(xml, 'DIARIA_UTI_SUS.DT_COMPETENCIA', DIARIA_UTI_SUS.DT_COMPETENCIA);
		PKG_XML.SetNUMBER(xml, 'DIARIA_UTI_SUS.CD_REG_FAT', DIARIA_UTI_SUS.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'DIARIA_UTI_SUS.CD_LANCAMENTO', DIARIA_UTI_SUS.CD_LANCAMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>DIARIA_UTI_SUS.POST-QUERY</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_B_PQ_DIARIA_UTI_SUS (xml IN OUT NOCOPY PKG_XML.XmlContext, diaria_uti_sus IN OUT NOCOPY DIARIA_UTI_SUSRec, itreg_fat IN OUT NOCOPY ITREG_FATRec) IS
BEGIN
Begin
  Select Sum(Qt_Lancada)
    Into Diaria_UTI_SUS.Dsp_Qt_Total_UTI
    From Diaria_UTI_SUS
   Where Cd_Reg_Fat = ItReg_Fat.Cd_Reg_Fat
     And Cd_Lancamento = ItReg_Fat.Cd_Lancamento;
  Diaria_UTI_SUS.Dsp_Ds_Procedimento:= ItReg_Fat.Ds_Procedimento;
  Diaria_UTI_SUS.Dsp_Cd_Procedimento:= ItReg_Fat.Cd_Procedimento;
Exception
    When No_Data_Found Then
      Null;
End;
END P_B_PQ_DIARIA_UTI_SUS;
PROCEDURE P_B_PQ_DIARIA_UTI_SUS (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
	diaria_uti_sus DIARIA_UTI_SUSRec;
	itreg_fat ITREG_FATRec;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		ITREG_FAT.CD_REG_FAT:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT');
		ITREG_FAT.CD_LANCAMENTO:= PKG_XML.GetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO');
		ITREG_FAT.DS_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.DS_PROCEDIMENTO');
		ITREG_FAT.CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO');
		DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI:= PKG_XML.GetNUMBER(xml, 'DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI');
		DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO');
		DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO:= PKG_XML.GetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO');
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_DIARIA_UTI_SUS_E(xml) THEN
				P_B_PQ_DIARIA_UTI_SUS(xml, DIARIA_UTI_SUS, ITREG_FAT);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_B_PQ_DIARIA_UTI_SUS_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_REG_FAT', ITREG_FAT.CD_REG_FAT);
		PKG_XML.SetNUMBER(xml, 'ITREG_FAT.CD_LANCAMENTO', ITREG_FAT.CD_LANCAMENTO);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.DS_PROCEDIMENTO', ITREG_FAT.DS_PROCEDIMENTO);
		PKG_XML.SetVARCHAR2(xml, 'ITREG_FAT.CD_PROCEDIMENTO', ITREG_FAT.CD_PROCEDIMENTO);
		PKG_XML.SetNUMBER(xml, 'DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI', DIARIA_UTI_SUS.DSP_QT_TOTAL_UTI);
		PKG_XML.SetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO', DIARIA_UTI_SUS.DSP_DS_PROCEDIMENTO);
		PKG_XML.SetVARCHAR2(xml, 'DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO', DIARIA_UTI_SUS.DSP_CD_PROCEDIMENTO);
		out_params := PKG_XML.GetOutputClob(xml);
END;
	/*
	<DATA_CRIACAO>03/03/2010 00:28</DATA_CRIACAO>
	<CRIADO_POR>Ferramenta de Migração ATX</CRIADO_POR>
	<OBJETIVO>PRE-FORM</OBJETIVO>
	<ALTERACOES></ALTERACOES>
	*/
	PROCEDURE P_F_PF (xml IN OUT NOCOPY PKG_XML.XmlContext) IS
BEGIN
declare
              Cursor cChecaVersao is
            select valor
          from configuracao
         where cd_sistema = 'FFIS'
           and chave = 'V_LACTO'
           and cd_multi_empresa = xml.multiEmpresa;
   SEM_VERSAO          exception;
     VERSAO_INCOMPATIVEL exception;
     vVersao             varchar2(20);
     vControle           varchar2(20);
   begin
     ---------------------------------------------------------------------------------
   -->> Toda versão deve ser alterada aqui o Código da tela
   ----------------------------------------------------------------------------------
     Open cChecaVersao;
    Fetch cChecaVersao into vVersao;
    Close cChecaVersao;
    vControle := fnc_versao_sus('V 2.70.0_1908090942');
   if  vVersao is null then
           raise SEM_VERSAO;
   end if;
   if vVersao <> vControle then
        raise VERSAO_INCOMPATIVEL;
   end if;
   --====================================================================================
   exception
    when SEM_VERSAO then
          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
          PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_111)
                        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_111', 'PKG_FFIS_M_LACTO_AIH_P321', 'A versão do módulo SUS não é compatível, solicitar atualização do PACOTE SUS com imagem desta mensagem. Email: marcius.melo@mv.com.br .'),true);
   when VERSAO_INCOMPATIVEL then
          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
          PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_111)
                        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_111', 'PKG_FFIS_M_LACTO_AIH_P321', 'A versão do módulo SUS não é compatível, solicitar atualização do PACOTE SUS com imagem desta mensagem. Email: marcius.melo@mv.com.br .'),true);
   when others then
          --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_1)
          PKG_XML_MGS.CHAMA_MENSAGEM(xml, pkg_rmi_traducao.extrair_pkg_msg('MSG_1', 'PKG_FFIS_M_LACTO_AIH_P321', 'Atenção:')
                        --MULTI-IDIOMA: Utilização do pkg_rmi_traducao.extrair_msg para mensagens (MSG_111)
                        ,pkg_rmi_traducao.extrair_pkg_msg('MSG_111', 'PKG_FFIS_M_LACTO_AIH_P321', 'A versão do módulo SUS não é compatível, solicitar atualização do PACOTE SUS com imagem desta mensagem. Email: marcius.melo@mv.com.br .'),true);
end;
END P_F_PF;
PROCEDURE P_F_PF (in_params in Clob, out_params out Clob) IS
	xml PKG_XML.XmlContext;
BEGIN
		xml := PKG_XML.Init(in_params);
		-- extract input parameters from the XML
		BEGIN
			IF Pkg_ffis_M_LACTO_AIH_P321_C.P_F_PF_E(xml) THEN
				P_F_PF(xml);
				Pkg_ffis_M_LACTO_AIH_P321_C.P_F_PF_S(xml);
			END IF;
		EXCEPTION
		WHEN OTHERS THEN
			PKG_XML.AddException(xml, SQLCODE, SQLERRM);
		END;
		-- save output parameters to the XML
		out_params := PKG_XML.GetOutputClob(xml);
END;
END PKG_FFIS_M_LACTO_AIH_P321;
/

CREATE OR REPLACE PUBLIC SYNONYM PKG_FFIS_M_LACTO_AIH_P321 FOR DBAMV.PKG_FFIS_M_LACTO_AIH_P321
/
